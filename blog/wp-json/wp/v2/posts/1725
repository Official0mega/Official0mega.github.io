{"id":1725,"date":"2022-11-17T12:12:42","date_gmt":"2022-11-17T12:12:42","guid":{"rendered":"https:\/\/blog-dev.sololearn.com\/?p=1725"},"modified":"2023-03-04T02:13:58","modified_gmt":"2023-03-04T02:13:58","slug":"responsive-web-design","status":"publish","type":"post","link":"https:\/\/www.sololearn.com\/blog\/responsive-web-design\/","title":{"rendered":"What Is Responsive Web Design?"},"content":{"rendered":"\n<p>In this article, we\u2019ll look at <strong>responsive web design (RWD)<\/strong> in detail. By the end of the article, you\u2019ll be able to make a website that your target audience can access on <a href=\"https:\/\/www.sololearn.com\/blog\/css-media-queries\/\" data-type=\"post\" data-id=\"1741\">all screen sizes.<\/a><\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Definition<\/h2>\n\n\n\n<p>Responsive web design is the practice of designing and developing websites that respond to the user\u2019s behavior on all screen sizes. These screen sizes in question include but are not limited to desktop, laptop, iPad, tablet, and mobile phone.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Why Responsive Design Matters<\/h2>\n\n\n\n<p>In the early times of the internet, people used to surf the net on desktop computers only. Then came mobile phones with the capability to view websites the way desktop and laptop computers can.&nbsp;<\/p>\n\n\n\n<p>During those early times of the internet, <a href=\"https:\/\/www.sololearn.com\/blog\/3-languages-you-should-know-to-become-a-website-developer\/\" data-type=\"post\" data-id=\"1998\">web developers<\/a> made one version of the website for computers and mobile phones. That was because internet users surf the net on computers (laptops and desktops). So there was no need to bother about <strong>responsive web design<\/strong>.<\/p>\n\n\n\n<p>Decades later, beginning in 2010, responsive web design was born due to two reasons:<\/p>\n\n\n\n<ul>\n<li>people started accessing the internet from mobile phones and iPad more than computers<\/li>\n\n\n\n<li>the screen of a mobile phone is not as wide as that of desktop and laptop computers<\/li>\n<\/ul>\n\n\n\n<p>Popular websites started making mobile versions and desktop versions of their websites. Then came the thought: why not create one website that would be accessible on both desktop\/laptop computers and mobile phones?&nbsp;<\/p>\n\n\n\n<p>That\u2019s how responsive web design started. By 2015, responsive web design became necessary for every website.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Custom Layout Structure<\/h2>\n\n\n\n<p>For a better user experience, making a website\u2019s layout respond to several screen sizes is important.&nbsp;<\/p>\n\n\n\n<p>On desktop and laptop computers, some parts of the website would be on the sides, and some would stack on top of one another. On mobile phones, every part of the website has to stack on top of one another. To achieve this, developers can use different <a href=\"https:\/\/www.sololearn.com\/blog\/what-is-css-used-for\/\" data-type=\"post\" data-id=\"1672\">CSS files<\/a>. But these days, developers use <strong>CSS media queries<\/strong> for this purpose.<\/p>\n\n\n\n<p>If you are wondering what CSS media query is, it is a CSS technique with which you can modify the layout of your website in response to different screen sizes and prints.<\/p>\n\n\n\n<p>The code below represents a layout structure that stacks on mobile phones and has some parts beside one another on a desktop.&nbsp;<\/p>\n\n\n\n<p>Here\u2019s the HTML:<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">&lt;body>\n  &lt;div class=\"wrapper\">\n    &lt;header>\n      &lt;h1>Header&lt;\/h1>\n    &lt;\/header>\n    &lt;aside class=\"sidebar sidebar1\">\n      &lt;h1>Sidebar 1&lt;\/h1>\n    &lt;\/aside>\n    &lt;article class=\"main\">\n      &lt;h1>Main Content&lt;\/h1>\n      &lt;p>  Lorem ipsum dolor sit amet consectetu adipisicing elit. Accusamus, dolores.  &lt;\/p>\n    &lt;\/article>\n    &lt;aside class=\"sidebar sidebar2\">\n      &lt;h1>Sidebar 2&lt;\/h1>\n    &lt;\/aside>\n    &lt;footer>\n      &lt;h1>Footer&lt;\/h1>\n    &lt;\/footer>\n  &lt;\/div>\n&lt;\/body><\/pre>\n\n\n\n<p>Here\u2019s the CSS:<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">* {\n\u00a0 \u00a0 \u00a0 \u00a0 margin: 0;\n\u00a0 \u00a0 \u00a0 \u00a0 padding: 0;\n\u00a0 \u00a0 \u00a0 \u00a0 box-sizing: border-box;\n\u00a0 \u00a0 \u00a0 \u00a0 font-family: \"Gill Sans\", \"Gill Sans MT\", Calibri, \"Trebuchet MS\",\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 sans-serif;\n\u00a0 \u00a0 \u00a0 }\n\u00a0 \u00a0 \u00a0 .wrapper {\n\u00a0 \u00a0 \u00a0 \u00a0 display: flex;\n\u00a0 \u00a0 \u00a0 \u00a0 flex-flow: row wrap;\n\u00a0 \u00a0 \u00a0 }\n\n\u00a0 \u00a0 \u00a0 .wrapper > * {\n\u00a0 \u00a0 \u00a0 \u00a0 flex: 1 100%;\n\u00a0 \u00a0 \u00a0 }\n\n\u00a0 \u00a0 \u00a0 header {\n\u00a0 \u00a0 \u00a0 \u00a0 background-color: #2ecc71;\n\u00a0 \u00a0 \u00a0 \u00a0 height: 120px;\n\u00a0 \u00a0 \u00a0 \u00a0 display: flex;\n\u00a0 \u00a0 \u00a0 \u00a0 align-items: center;\n\u00a0 \u00a0 \u00a0 \u00a0 justify-content: center;\n\u00a0 \u00a0 \u00a0 }\n\n\u00a0 \u00a0 \u00a0 footer {\n\u00a0 \u00a0 \u00a0 \u00a0 background-color: #333;\n\u00a0 \u00a0 \u00a0 \u00a0 height: 120px;\n\u00a0 \u00a0 \u00a0 \u00a0 display: flex;\n\u00a0 \u00a0 \u00a0 \u00a0 align-items: center;\n\u00a0 \u00a0 \u00a0 \u00a0 justify-content: center;\n\u00a0 \u00a0 \u00a0 }\n\n\u00a0 \u00a0 \u00a0 .main {\n\u00a0 \u00a0 \u00a0 \u00a0 text-align: left;\n\u00a0 \u00a0 \u00a0 \u00a0 background-color: crimson;\n\u00a0 \u00a0 \u00a0 \u00a0 height: 555px;\n\u00a0 \u00a0 \u00a0 \u00a0 display: flex;\n\u00a0 \u00a0 \u00a0 \u00a0 align-items: center;\n\u00a0 \u00a0 \u00a0 \u00a0 justify-content: center;\n\u00a0 \u00a0 \u00a0 \u00a0 flex-direction: column;\n\u00a0 \u00a0 \u00a0 }\n\n\u00a0 \u00a0 \u00a0 .sidebar1,\n\u00a0 \u00a0 \u00a0 .sidebar2 {\n\u00a0 \u00a0 \u00a0 \u00a0 background-color: #3498db;\n\u00a0 \u00a0 \u00a0 \u00a0 display: flex;\n\u00a0 \u00a0 \u00a0 \u00a0 align-items: center;\n\u00a0 \u00a0 \u00a0 \u00a0 justify-content: center;\n\u00a0 \u00a0 \u00a0 }\n\n\u00a0 \u00a0 \u00a0 @media all and (min-width: 800px) {\n\u00a0 \u00a0 \u00a0 \u00a0 .main {\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 flex: 3;\n\u00a0 \u00a0 \u00a0 \u00a0 }\n\n\u00a0 \u00a0 \u00a0 \u00a0 .sidebar1 {\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 order: 1;\n\u00a0 \u00a0 \u00a0 \u00a0 }\n\n\u00a0 \u00a0 \u00a0 \u00a0 .sidebar2 {\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 order: 2;\n\u00a0 \u00a0 \u00a0 \u00a0 }\n\n\u00a0 \u00a0 \u00a0 \u00a0 .main {\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 order: 2;\n\u00a0 \u00a0 \u00a0 \u00a0 }\n\n\u00a0 \u00a0 \u00a0 \u00a0 footer {\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 order: 4;\n\u00a0 \u00a0 \u00a0 \u00a0 }\n\u00a0 \u00a0 \u00a0 }\n\n\u00a0 \u00a0 \u00a0 @media all and (min-width: 600px) {\n\u00a0 \u00a0 \u00a0 \u00a0 .sidebar {\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 flex: 1;\n\u00a0 \u00a0 \u00a0 \u00a0 }\n\u00a0 \u00a0 \u00a0 }<\/pre>\n\n\n\n<p>And here\u2019s how it looks in the browser:<\/p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img decoding=\"async\" loading=\"lazy\" width=\"600\" height=\"297\" src=\"https:\/\/blog-dev.sololearn.com\/wp-content\/uploads\/2022\/11\/responsive-design-demo.gif\" alt=\"\" class=\"wp-image-1726\"\/><\/figure>\n\n\n\n<h2 class=\"wp-block-heading\"><strong>Multicol<\/strong><\/h2>\n\n\n\n<p>Multicol is an experimental HTML tag (&lt;muticol&gt;) that was used to create multiple layouts right inside the HTML file. It is now deprecated (it is still available but not recommended for use anymore).<\/p>\n\n\n\n<p>Multicol got deprecated because you can now use the columns property of CSS to do the same thing.<\/p>\n\n\n\n<p>This is how you can use the column property of CSS to layout your website:<\/p>\n\n\n\n<p>The HTML:<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">&lt;div class=\"container\">\n  &lt;p> Lorem ipsum dolor sit amet consectetur adipisicing elit. Totam, amet ad  reiciendis dolores laborum repellendus quae molestiae magnam incidunt  tempora.  &lt;\/p>\n  &lt;p> Lorem ipsum dolor sit amet consectetur adipisicing elit. Totam, amet ad  reiciendis dolores laborum repellendus quae molestiae magnam incidunt tempora.  &lt;\/p>\n  &lt;p> Lorem ipsum dolor sit amet consectetur adipisicing elit. Totam, amet ad  reiciendis dolores laborum repellendus quae molestiae magnam incidunt  tempora. &lt;\/p>\n&lt;\/div><\/pre>\n\n\n\n<p>The CSS:<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">.container {\n\u00a0 columns: 3;\n}<\/pre>\n\n\n\n<h2 class=\"wp-block-heading\"><strong>Flexbox<\/strong>&nbsp;<\/h2>\n\n\n\n<p><a href=\"https:\/\/www.sololearn.com\/blog\/css-flexbox\/\" data-type=\"post\" data-id=\"1628\">Flexbox <\/a>was introduced in the CSS release of version 3 to ease the way developers lay out content on a website. It is a unidirectional CSS layout technique with which you can lay out the content of a website in either row or column.<\/p>\n\n\n\n<p>The introduction of flexbox was a game changer because developers had to use floats for the same purpose. With floats, it was really hard to lay out content.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">The Steps to Take in Using CSS Flexbox<\/h3>\n\n\n\n<ul>\n<li>put your items in a container div element and bring in flexbox as a value of the display property:<\/li>\n<\/ul>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">.container {\n\u00a0 display: flex;\n}<\/pre>\n\n\n\n<ul>\n<li>specify the direction you want \u2013 it should be row or colum:<\/li>\n<\/ul>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">.container {\n  display: flex;\n  flex-direction: row;\n}<\/pre>\n\n\n\n<p>The default flex-direction is row, so you might not need to use the flex-direction property if you want a direction of row.<\/p>\n\n\n\n<p>To make the items responsive on a mobile phone and other smaller devices, write your media queries and specify a direction of column:<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">@media screen and (max-width: 700px) {\n\u00a0 .container {\n\u00a0 flex-direction: column;\n\u00a0 }\n}<\/pre>\n\n\n\n<p>This would make everything stack on any device with a maximum screen size of 700px.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\"><strong>CSS Grid<\/strong><\/h2>\n\n\n\n<p>CSS grid is a technology introduced in CSS 3. It lets you lay out your website as grids in rows and columns. So, CSS grid is bidirectional. This means it works in two directions. This is what makes it more advanced than flexbox, which is unidirectional.<\/p>\n\n\n\n<p>CSS grid is a real game changer in laying out the content of a website. It is instrumental in responsive web design.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\"><strong>The Steps to Take in Using CSS Grid<\/strong><\/h3>\n\n\n\n<ul>\n<li>put your items in a container div element and bring in grid as a value of the display property:<\/li>\n<\/ul>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">.container {\n\u00a0 display: grid;\n}<\/pre>\n\n\n\n<ul>\n<li>the next thing you have to do is to specify the columns and rows you want with two properties \u2013 grid-template-columns and grid-template-rows:<\/li>\n<\/ul>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">.container {\n\u00a0 \u00a0 display: grid;\n\u00a0 \u00a0 grid-template-columns: 1fr 1fr 1fr;\n\u00a0 \u00a0 grid-template-rows: 1fr 1fr 1fr;\n}<\/pre>\n\n\n\n<p>This would give the grid system 3 rows and 3 columns each of 1 fractional unit on a wide screen of desktop and laptop computers.<\/p>\n\n\n\n<p>When you want to make the grid system responsive on mobile phones, you can write the media queries and specify a template column of just 1:<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">@media screen and (max-width: 700px) {\n\u00a0 .container {\n\u00a0 \u00a0 \u00a0 grid-template-columns: 1fr;\n\u00a0 }\n}<\/pre>\n\n\n\n<p>This would make every row and column stack on top of one another on any device with a maximum width of 700px.<\/p>\n\n\n\n<p>You can represent the template columns and rows as fractional units as I did above, or you can use pixels. For example, 100px.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\"><strong>Flexible Images<\/strong><\/h2>\n\n\n\n<p>Images are a very important aspect of responsive web development. Some images might need to scale down on smaller screens, and some would be okay as they are initially presented.<\/p>\n\n\n\n<p>You can set a reset in your CSS that gives images a maximum width of 100% on any screen size. With this method, you convert the images to block elements and assign a max-width of 100%:<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">img {\n\u00a0 \u00a0 display: block;\n\u00a0 \u00a0 max-width: 100%;\n}<\/pre>\n\n\n\n<p>HTML also has built-in functionality to make images responsive. You get access to it by using the picture tag, so you may not need media queries to make images responsive:<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">&lt;picture>\n&lt;source\n\u00a0 media=\"(max-width: 1100px)\"\n\u00a0 srcset=\"ring-tailed-lemur-large.jpg\"\n\/>\n&lt;source\n\u00a0 media=\"(max-width: 900px)\"\n\u00a0 srcset=\"ring-tailed-lemur-medium.jpg\"\n\/>\n&lt;source\u00a0\u00a0\u00a0\u00a0media=\"(max-width: 760px)\"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0srcset=\"ring-tailed-lemur-small.jpg\"\u00a0\/>\n&lt;img\n\u00a0 src=\"ring-tailed-lemur-large.jpg\"\n\u00a0 alt=\"ring-tailed-lemur\"\n\u00a0 style=\"max-width: 100%\"\n\/>\n&lt;\/picture><\/pre>\n\n\n\n<p>This results into 3 separate images available to the browser:<\/p>\n\n\n\n<ul>\n<li>the large image shows on a screen size between 1100px and 900px<\/li>\n\n\n\n<li>the medium image shows on a screen size between 900px and 760px<\/li>\n\n\n\n<li>the small image shows on a screen size below 760px<\/li>\n<\/ul>\n\n\n\n<h2 class=\"wp-block-heading\"><strong>Responsive Text Size<\/strong><\/h2>\n\n\n\n<p>In responsive web development, the <a href=\"https:\/\/www.sololearn.com\/blog\/css-align-text\/\" data-type=\"post\" data-id=\"1744\">size of texts<\/a> need to scale down on mobile phones. You can achieve this by writing media queries or using relative units like rem (relative ephemeral unit) and em (ephemeral unit) instead of absolute units like px (pixels).<\/p>\n\n\n\n<p>In the code below, the font size would be 3rem on large screens and 1.5rem on any device with a screen less than 700px:<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">body {\n\u00a0 font-size: 3rem;\n}\n@media screen and (max-width: 700px) {\n\u00a0 body {\n\u00a0 \u00a0 font-size: 1.5rem;\n\u00a0 }\n}<\/pre>\n\n\n\n<h2 class=\"wp-block-heading\"><strong>Showing or Hiding Content<\/strong><\/h2>\n\n\n\n<p>There might be the need to show or hide some content on a website for the purpose of responsive web development.<\/p>\n\n\n\n<p>For instance, if you have two pieces of content that are almost the same but one is larger than the other, you might need to hide the large one on smaller devices like mobile phones.<\/p>\n\n\n\n<p>To get this done, you need to use the display property of CSS. You can set the value to hidden or none. It is recommended to set the value to none instead of hidden. That\u2019s because if you set the value to hidden, the content would still take its place, it just won\u2019t show. But if you set it to none, everything the content, and its space is totally taken off.<\/p>\n\n\n\n<p>In the code below, the large text shows on large devices but is hidden on smaller devices like mobile phones:<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">.large-text {\n\u00a0 \u00a0 \u00a0 \u00a0 font-size: 4rem;\n\u00a0 \u00a0 \u00a0 }\n\n\u00a0 \u00a0 \u00a0 .small-text {\n\u00a0 \u00a0 \u00a0 \u00a0 font-size: 2rem;\n\u00a0 \u00a0 \u00a0 }\n\n\u00a0 \u00a0 \u00a0 .mormal-text {\n\u00a0 \u00a0 \u00a0 \u00a0 font-size: 1rem;\n\u00a0 \u00a0 \u00a0 }\n\n\u00a0 \u00a0 \u00a0 @media screen and (max-width: 700px) {\n\u00a0 \u00a0 \u00a0 \u00a0 .large-text {\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 display: none;\n\u00a0 \u00a0 \u00a0 \u00a0 }\n\u00a0 \u00a0 \u00a0 }<\/pre>\n\n\n\n<h2 class=\"wp-block-heading\"><strong>How to Choose Breakpoints<\/strong><\/h2>\n\n\n\n<p>As already pointed out in this article, media queries is an essential part of responsive web design. Whenever you want to write your media queries, you need to choose the screen breakpoints you want to make the changes on.<\/p>\n\n\n\n<p>This is either a &#8220;min-width&#8221; or &#8220;max-width&#8221;. If you are designing in a mobile-first approach, then you need to use min-width to target large screen sizes. But if you are designing with a desktop-first approach, then you should target smaller screen sizes with max-width.<\/p>\n\n\n\n<p>The table below represents different breakpoints you can choose for different screen sizes:<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td><strong>Device<\/strong><\/td><td><strong>Breakpoint&nbsp;<\/strong><\/td><td><strong>Examples&nbsp;<\/strong><\/td><\/tr><tr><td>Mobile phones<\/td><td>320px, 375px, 415px<\/td><td>Small iPhones<\/td><\/tr><tr><td>Mobile phones<\/td><td>&lt;700px and &gt;420px<\/td><td>Bigger Android phones&nbsp;<\/td><\/tr><tr><td>Tablets&nbsp;<\/td><td>&gt;768px and &lt; 835px<\/td><td>iPad mini<\/td><\/tr><tr><td>Tablets&nbsp;<\/td><td>&gt;1024px and &lt;1114px<\/td><td>iPad Pro<\/td><\/tr><tr><td>Laptops&nbsp;<\/td><td>&gt;1200px and &lt;1450px<\/td><td>Laptops&nbsp;<\/td><\/tr><tr><td>Desktop and TV Screens<\/td><td>&gt;1600px<\/td><td>Desktop computers, large monitors and TVs<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h2 class=\"wp-block-heading\"><strong>CSS Units and Values for Responsive Design<\/strong><\/h2>\n\n\n\n<p>Choosing the right units is a very important aspect of responsive design. In CSS, there are <a href=\"https:\/\/www.sololearn.com\/blog\/css-absolute-fix-relative-positioning\/\" data-type=\"post\" data-id=\"1737\">absolute and relative units<\/a>. Examples of absolute units are centimeters (cm) and pixels (px) and examples of relative units are rem and em.<\/p>\n\n\n\n<p>Absolute units remain the same on all screen sizes, while relative units would adjust according to the screen size and the user\u2019s preferential settings. This is why it is recommended to use relative units instead of absolute units.<\/p>\n\n\n\n<p>You\u2019d see many developers use pixels (px). It&#8217;s not a bad thing to use them in development, but when you are ready to put your website on the internet, you should change them to rem or em.<\/p>\n\n\n\n<p>Instead of using an absolute unit like pixels (px), here are the relative units you can use:<\/p>\n\n\n\n<ul>\n<li><strong>%<\/strong> \u2014 percentage unit. Relative to the parent element. If the parent is 100% and you specify 50% for the child element, the child element takes 50% of the parent element.<\/li>\n\n\n\n<li><strong>em<\/strong> \u2014 ephemeral unit. It is relative to the font-size of the current element. 2em means X2 of the size of the current element.<\/li>\n<\/ul>\n\n\n\n<ul>\n<li><strong>rem<\/strong> \u2014 relative ephemeral unit. It is relative to the font-size of the root element. 1rem = 16px because 16px is the font-size of the root element unless you reset it.<\/li>\n\n\n\n<li><strong>vw <\/strong>\u2014 relative to 1% of the screen width. 50% vw means 50% of the screen width.<\/li>\n\n\n\n<li><strong>vh <\/strong>\u2014 relative to 1% of the screen height. 50% vh means 50% of the screen height.<\/li>\n<\/ul>\n\n\n\n<h2 class=\"wp-block-heading\"><strong>Wrapping Up<\/strong><\/h2>\n\n\n\n<p>This article took you through everything you need to know to get yourself familiarized with responsive web development.<\/p>\n\n\n\n<p>The foundation of responsive web design is HTML and CSS. That\u2019s why we at Sololearn created courses to help you learn both <a href=\"http:\/\/www.sololearn.com\/learn\/courses\/html-introduction\">HTML<\/a> and <a href=\"http:\/\/www.sololearn.com\/learn\/courses\/css-introduction\">CSS<\/a>. We also have <a href=\"https:\/\/www.sololearn.com\/learning\/1162\">a course dedicated to responsive web development<\/a>. In addition, if you want to write your HTML and CSS, you can use our <a href=\"https:\/\/www.sololearn.com\/compiler-playground\/web\">code playground<\/a>.<\/p>\n\n\n\n<p>The most fundamental thing you need to know is that the content can go side by side on large screens like desktop and laptop computers. But on smaller devices like mobile phones, the content of the web page must be on top of one another on small screens. Flexbox and grid make it possible to achieve that.<\/p>\n\n\n\n<p>Other items on a web page such as texts and images must also conform to responsive web design principles. For texts, you can target different breakpoints with media queries or use relative units such as rem and em. For images, you can convert them to a block display and give them a maximum width of 100%.<\/p>\n\n\n\n<p>Once you know these things about responsive web design, then you are on the pathway to making websites that respond to different screen sizes.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>In this article, we\u2019ll look at responsive web design (RWD) in detail. By the end of the article, you\u2019ll be able to make a website that your target audience can access on all screen sizes. Definition Responsive web design is the practice of designing and developing websites that respond to the user\u2019s behavior on all <a href=\"https:\/\/www.sololearn.com\/blog\/responsive-web-design\/\" class=\"more-link\">&#8230;<span class=\"screen-reader-text\">  What Is Responsive Web Design?<\/span><\/a><\/p>\n","protected":false},"author":7,"featured_media":2044,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[31],"tags":[],"_links":{"self":[{"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/posts\/1725"}],"collection":[{"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/users\/7"}],"replies":[{"embeddable":true,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/comments?post=1725"}],"version-history":[{"count":3,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/posts\/1725\/revisions"}],"predecessor-version":[{"id":2467,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/posts\/1725\/revisions\/2467"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/media\/2044"}],"wp:attachment":[{"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/media?parent=1725"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/categories?post=1725"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/tags?post=1725"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}