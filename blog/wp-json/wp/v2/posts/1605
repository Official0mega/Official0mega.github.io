{"id":1605,"date":"2022-11-17T13:10:39","date_gmt":"2022-11-17T13:10:39","guid":{"rendered":"https:\/\/blog-dev.sololearn.com\/?p=1605"},"modified":"2023-03-02T01:27:03","modified_gmt":"2023-03-02T01:27:03","slug":"python-dictionaries","status":"publish","type":"post","link":"https:\/\/www.sololearn.com\/blog\/python-dictionaries\/","title":{"rendered":"Python Dictionaries"},"content":{"rendered":"\n<p>Before Google became the go to for word search, we used dictionaries. Dictionaries helped us figure out the meaning of words and add information about them. <a href=\"https:\/\/www.sololearn.com\/blog\/best-ides-for-python\/\" data-type=\"post\" data-id=\"2375\">Python <\/a>dictionaries are similar. They have keys (which can be compared to words) and values (which can be compared to the \u201ca word\u2019s\u201d meaning).<\/p>\n\n\n\n<p>A dictionary is a collection of items wrapped around by curly braces. Those items are referred to as key and value pairs. <\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Properties of Python Dictionaries<\/h2>\n\n\n\n<ul>\n<li>All its items are encapsulated in curly braces {}<\/li>\n\n\n\n<li>Each item in a dictionary must have a key and a value.<\/li>\n\n\n\n<li>A key is a unique element, it can be a string or integer (an example of a key is a student&#8217;s name)&nbsp;<\/li>\n\n\n\n<li>A value provides additional information about a key, it can be a string (a text wrapped around in quotation marks), an integer (whole numbers), floating numbers (have decimal values), a boolean (they are either true or false), a list (items separated with a comma in a square bracket) or even another dictionary. An example of a value is a&nbsp;student\u2019s age<\/li>\n\n\n\n<li>A key and a value are separated by a colon(:)<\/li>\n<\/ul>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">key : value<\/pre>\n\n\n\n<ul>\n<li>If there are other keys and values, they are separated by a comma(,)<\/li>\n<\/ul>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">key : value,\nkey1 : value1,\nkey2: value2<\/pre>\n\n\n\n<p>There is no need to put a comma at the end of the last value.<\/p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img decoding=\"async\" loading=\"lazy\" width=\"681\" height=\"436\" src=\"https:\/\/blog-dev.sololearn.com\/wp-content\/uploads\/2022\/11\/python-dictionnary-structure.png\" alt=\"\" class=\"wp-image-1739\" srcset=\"https:\/\/www.sololearn.com\/wp-content\/uploads\/2022\/11\/python-dictionnary-structure.png 681w, https:\/\/www.sololearn.com\/wp-content\/uploads\/2022\/11\/python-dictionnary-structure-300x192.png 300w\" sizes=\"(max-width: 681px) 100vw, 681px\" \/><\/figure>\n\n\n\n<h2 class=\"wp-block-heading\">Creating a Dictionary<\/h2>\n\n\n\n<p>There are two methods of creating a dictionary; using the curly braces and using the dict()&nbsp;<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">Curly Braces<\/h3>\n\n\n\n<p>We will create a variable that will store a dictionary<\/p>\n\n\n\n<ul>\n<li>First, create a variable name&nbsp;<\/li>\n\n\n\n<li>Then use the<em> assignment operator<\/em> (=)&nbsp;<\/li>\n\n\n\n<li>lastly, put the curly braces after the <em>operator<\/em><\/li>\n<\/ul>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">my_first_dictionary = {}\n# This is called an empty dictionary because nothing is stored in it<\/pre>\n\n\n\n<ul>\n<li>Using the<em> type()<\/em> method, it checks what type of data the variable is:<\/li>\n<\/ul>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">print(type(my_first_dictionary))\n\n# output\n# &lt;class 'dict'><\/pre>\n\n\n\n<p><strong>Creating a dictionary with items<\/strong><\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">my_first_dictionary = {\"Character Name\": \"Smolder Bravestone\"}<\/pre>\n\n\n\n<h3 class=\"wp-block-heading\">Using the built-in dict() function<\/h3>\n\n\n\n<ul>\n<li>First, create a variable name&nbsp;<\/li>\n\n\n\n<li>Then use the assignment operator (=)&nbsp;<\/li>\n\n\n\n<li>Afterwards, type in the \u201c<em>dict()<\/em>\u2019\u2019 keyword,&nbsp;<\/li>\n\n\n\n<li>Then print out the variable name<\/li>\n<\/ul>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">my_first_dictionary = dict()\nprint(my_first_dictionary)\n# ouput\n# {} an empty dictionary has no items present<\/pre>\n\n\n\n<p><strong>Creating a dictionary with items<\/strong><\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">my_first_dictionary = dict({\"Character Name\": \"Smolder Bravestone\"})<\/pre>\n\n\n\n<p>Example: create a dictionary that stores the names of 5 students and their ages;<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">student_age = {\"Bob\": 12, \"Helen\": 14, \"Lucy\": 10, \"Matt\": 13, \"Ella\": 11}\n\n# the keys are the name of students and data type is a string(\u2018text\u2019) , the values are the ages of each student and the data type is an integer(\u2018whole numbers\u2019)\n# Ouput\n{\"Bob\": 12, \"Helen\": 14, \"Lucy\": 10, \"Matt\": 13, \"Ella\": 11}<\/pre>\n\n\n\n<p><strong>Examples of Dictionaries with different data types<\/strong><\/p>\n\n\n\n<p>Example I: with lists<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">about_me = {\n\u00a0\u00a0'Name': 'Karen Gillen',\n\u00a0\u00a0'Profession':'Actress',\n\u00a0\u00a0'Age': 30,\n\u00a0\u00a0'Popular Character': 'Ruby Roundhouse',\n\u00a0\u00a0'Strength':'Dance Fighting',\n\u00a0\u00a0'Weakness': 'Venom',\n\u00a0\u00a0'Popular Movies': ['Jumanji','Jumanji 2','Treasure Island']\u00a0\u00a0\n}<\/pre>\n\n\n\n<p>In the example above, we see that both the keys and values are strings, except one key that has its value as a<em> list.<\/em><\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"raw\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">'Popular Movies': ['Jumanji','Jumanji 2','Treasure Island']  <\/pre>\n\n\n\n<p>Example II: with boolean<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">neighbour_pet = {\n\u00a0\u00a0'Animal': 'Dog',\n\u00a0\u00a0'Name': 'Bingo',\n\u00a0\u00a0'Fur color': 'White',\n\u00a0\u00a0'Barks': False,\n\u00a0\u00a0'Pees': True,\n\u00a0\u00a0'Friendly': True\n}<\/pre>\n\n\n\n<p>In the example above, all the keys are strings while some of the values are <em>strings<\/em> and <em>boolean<\/em>. A <em>boolean<\/em> expression consists of True or false statements.<\/p>\n\n\n\n<p>Example III: with floating numbers<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">grading_points = {\n\u00a0\u00a0'A': 90.55,\n\u00a0\u00a0'B': 80.45,\n\u00a0\u00a0'C': 70.35,\n\u00a0\u00a0'D': 60.25,\n\u00a0\u00a0'E': 50.15\n}<\/pre>\n\n\n\n<p>In the example above, all the keys are <em>strings<\/em> while all the values are <em>floating numbers<\/em>.&nbsp;<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Accessing Items in a Dictionary<\/h2>\n\n\n\n<p>There are different ways of accessing elements stored in a dictionary.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">Using keywords:<\/h3>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">student_age = {\n\u00a0\u00a0'Bob': 12,\n\u00a0\u00a0'Helen' : 14,\n\u00a0\u00a0'Lucy': 10,\n\u00a0\u00a0'Matt':13,\n\u00a0\u00a0'Ella': 11\n}<\/pre>\n\n\n\n<ul>\n<li>In the dictionary above, \u2018the variable name is [student_age], the keys are the names (strings), and the values are the ages (integer).<\/li>\n\n\n\n<li>Let&#8217;s say I want to print Bob\u2019s age;<\/li>\n\n\n\n<li>Since we want to access information in the dictionary, we take the variable name (student_age) and use <em>indexing<\/em>.<\/li>\n\n\n\n<li><em>Indexing<\/em> is a process of accessing elements in a<em> list<\/em> or <em>dictionary<\/em> using a particular value; for lists, they are integers, and for dictionaries, they are keywords.<\/li>\n<\/ul>\n\n\n\n<p>They have this format;<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">variable_name[keyword]\n# variable_name is the variable that stores the dictionary\n# keyword is the item we are looking for in the dictionary it can be a string or an integer\n# The variable name is \u201cstudent_age\u201d and the keyword is \u201cBob\u201d\n\nprint(student_age['Bob'])\n# ouptut\n# 12<\/pre>\n\n\n\n<ul>\n<li>I put the output in a formatted string to make it much better. The formatted strings enable me to add text to a variable without using the \u201c+\u201d sign (concatenation). To write a formatted string, you type the letter(f) and two quotation marks in front. [f\u201d \u201c], a variable is placed in curly braces.<\/li>\n<\/ul>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">print(\"Bob is \" + str(student_age[\"Bob\"]) + \"years old\")\n\n# output\n# Bob is 12 years<\/pre>\n\n\n\n<p>In <em>concatenation,<\/em> you must convert the <em>integer<\/em> to a <em>string<\/em> because integers cannot be added to a string.<\/p>\n\n\n\n<p><strong>Note:<\/strong> When passing in the keyword, how they appear in the dictionary is how they should be passed. We see above (\u2018Bob\u2019) has its first letter in a capital letter; if we pass in the small letter b, it throws an error.<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">student_age = {\n\u00a0\u00a0'Bob': 12,\n\u00a0\u00a0'Helen' : 14,\n\u00a0\u00a0'Lucy': 10,\n\u00a0\u00a0'Matt':13,\n\u00a0\u00a0'Ella': 11\n}\n\nprint(student_age['bob'])\n\n# output\n# KeyError: 'bob'<\/pre>\n\n\n\n<h3 class=\"wp-block-heading\">Using Loops<\/h3>\n\n\n\n<p>We use the <a href=\"https:\/\/www.sololearn.com\/blog\/python-for-loop\/\" data-type=\"post\" data-id=\"1653\"><em>for loop<\/em> <\/a>to access all elements in the dictionary. In <em>for loops<\/em>, we pass in one variable to get the \u2018keys\u2019 and use <em>indexing<\/em> to get the \u2018values.\u2019\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">student_age = {\n\u00a0\u00a0'Bob': 12,\n\u00a0\u00a0'Helen' : 14,\n\u00a0\u00a0'Lucy': 10,\n\u00a0\u00a0'Matt':13,\n\u00a0\u00a0'Ella': 11\n}\n\nfor name in student_age:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0age = student_age[name]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(name)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(age)\n\n#output\n#Bob\n#12\n#Helen\n#14\n#Lucy\n#10\n#Matt\n#13\n#Ella\n#11<\/pre>\n\n\n\n<ul>\n<li>The information in the variable \u201cstudent_age\u201d is in two parts; the left side consists of the keys holding the names of students, while the right side consists of the values corresponding to the keys that are the ages of the students.<\/li>\n\n\n\n<li>Looping through the new variable, &lt;name&gt;, it stores the items accessed in the loop. The \u2018name\u2019 variable stores the keys.<\/li>\n\n\n\n<li>To access the values corresponding to the keys, we use <em>indexing<\/em>.<\/li>\n\n\n\n<li>The variable name is &lt;student_age&gt; and the keyword is the variable &lt;name&gt;<\/li>\n\n\n\n<li>Then we create a new variable &lt;age&gt; to store the values.&nbsp;<\/li>\n\n\n\n<li>Last, we print &lt;name&gt; and &lt;age&gt;<\/li>\n<\/ul>\n\n\n\n<p><strong>Note: <\/strong>the variable in the loop you use to access the keys can be any name of your choice.<\/p>\n\n\n\n<ul>\n<li>the keyword in this indexing is a new variable, not a string, so there is no need to wrap it with quotation marks<\/li>\n<\/ul>\n\n\n\n<h2 class=\"wp-block-heading\">Adding items in a Dictionary<\/h2>\n\n\n\n<p>In<em> lists,<\/em> when we want to add items to the existing information, we use the \u201c<em>append<\/em>\u201d method. In <em>dictionaries<\/em>, we pass in the keyword in square brackets and assign the value making the variable name a reference point.<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">student_age = {\n\u00a0'Bob': 12,\n\u00a0\u00a0'Helen' : 14,\n\u00a0\u00a0'Lucy': 10,\n\u00a0\u00a0'Matt':13,\n\u00a0\u00a0'Ella': 11\n}<\/pre>\n\n\n\n<p>Let\u2019s say we want to add a new student&#8217;s name and age to this existing information and print the new dictionary. We take the following steps;<\/p>\n\n\n\n<ul>\n<li>Since we are introducing changes to the existing dictionary above, we take the variable name &lt;student_age&gt; and make use of <em>indexing<\/em>.<\/li>\n\n\n\n<li>Indexing is a process of accessing elements in a list or dictionary using a particular value; for lists, they are integers, and for dictionaries, they are keywords.<\/li>\n\n\n\n<li>They have this format: <strong>variable_name[keyword]<\/strong><\/li>\n\n\n\n<li>Then put the assignment operator(=), type in the details of the keyword (value)<\/li>\n\n\n\n<li>Lastly, you print the variable that stores the dictionary to see the updated information.<\/li>\n<\/ul>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\"># Format\nstudent_age[\"Mario\"] = 12\nprint(student_age)\n\n# output\n{\"Bob\": 12, \"Helen\": 14, \"Lucy\": 10, \"Matt\": 13, \"Ella\": 11, \"Mario\": 12}<\/pre>\n\n\n\n<h2 class=\"wp-block-heading\">How to change Values Using Indexing<\/h2>\n\n\n\n<p>Just like we use <em>indexing<\/em> to find a value and add new keys and values, we can also change some values using the same method.&nbsp;<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">student_age = {\n\u00a0\u00a0'Bob': 12,\n\u00a0\u00a0'Helen' : 14,\n\u00a0\u00a0'Lucy': 10,\n\u00a0\u00a0'Matt':13,\n\u00a0\u00a0'Ella': 11\n}\n\nstudent_age['Bob'] = 15\nprint(student_age)\n\n# output\u00a0\n{'Bob': 15, 'Helen': 14, 'Lucy': 10, 'Matt': 13, 'Ella': 11}<\/pre>\n\n\n\n<h2 class=\"wp-block-heading\">Lists Versus Dictionaries<\/h2>\n\n\n\n<p>A list stores items in a square bracket, while a dictionary stores pairs of items in curly braces.&nbsp;<\/p>\n\n\n\n<p><strong>Similarities<\/strong><\/p>\n\n\n\n<ul>\n<li>They both store different <em>data types<\/em> like <em>strings<\/em> and <em>integers.<\/em><\/li>\n\n\n\n<li>Their items can both be accessed by <em>loops<\/em>.<\/li>\n\n\n\n<li>Their items can be deleted, and new items can be added to both lists and dictionaries<\/li>\n\n\n\n<li>Their items can be accessed with the <em>indexing <\/em>method<\/li>\n<\/ul>\n\n\n\n<p>In lists<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">scores = [20, 40, 50, 60, 12]\nprint(scores[0])\n\n# output\n20<\/pre>\n\n\n\n<p>In dictionaries<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">award_winning_author = {\n\u00a0\u00a0'Author': 'C.S Lewis',\n\u00a0\u00a0'Book Title': '100 shades of awesomeness'\n}\nprint(award_winning_author['Author'])\n\n# output\nC.S Lewis<\/pre>\n\n\n\n<h2 class=\"wp-block-heading\"><strong>Methods In Dictionaries<\/strong><\/h2>\n\n\n\n<p>Methods are built-in functions that make code execution simpler.&nbsp;<\/p>\n\n\n\n<p>For example the sum() method adds all elements in a list, or max() method finds the maximum numbers in a list. Many methods aid our work with dictionaries. Some of them are;<\/p>\n\n\n\n<ol>\n<li><strong>Clear:<\/strong> this method wipes out all items in a dictionary, returning an <em>empty dictionary &lt;{}&gt;<\/em>. We type the variable name and add &lt;.clear()&gt; method.<\/li>\n<\/ol>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">student_age = {\n\u00a0\u00a0'Bob': 12,\n\u00a0\u00a0'Helen' : 14,\n\u00a0\u00a0'Lucy': 10,\n\u00a0\u00a0'Matt':13,\n\u00a0\u00a0'Ella': 11\n}\n\nstudent_age.clear()\nprint(student_age)\n\n# output\n# {} &lt;- this is an empty dictionary, no items in it<\/pre>\n\n\n\n<ol start=\"2\">\n<li><strong>Get:<\/strong> This method finds a particular keyword and returns the corresponding value. It works like <em>indexing<\/em> but uses &lt;.get()&gt; instead of the square brackets&lt;[]&gt;.<\/li>\n<\/ol>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">student_age = {\n\u00a0\u00a0'Bob': 12,\n\u00a0\u00a0'Helen' : 14,\n\u00a0\u00a0'Lucy': 10,\n\u00a0\u00a0'Matt':13,\n\u00a0\u00a0'Ella': 11\n}\n\nprint(student_age.get('Bob'))\n\n# output\n12<\/pre>\n\n\n\n<ol start=\"3\">\n<li>Pop: This method removes items from a dictionary but returns the corresponding value.<\/li>\n<\/ol>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">grades = {\n40 : \"Fail\"\u00a0 ,\n90 :\u00a0 \"Excellent\",\n70 :\u00a0 \"Good\"\n}\n\ngrades.pop(40)\nprint(grades)\n\n# output\n{90: 'Excellent', 70: 'Good'}<\/pre>\n\n\n\n<ol start=\"4\">\n<li><strong>dict keys():<\/strong> this method prints all the keys in the dictionary; they are the items on the left-hand side. The format is dict.keys() where &#8220;dict&#8221; is the name of the variable that stores the dictionary and .keys() is a method.<\/li>\n<\/ol>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">student_age = {\n\u00a0\u00a0'Bob': 12,\n\u00a0\u00a0'Helen' : 14,\n\u00a0\u00a0'Lucy': 10,\n\u00a0\u00a0'Matt':13,\n\u00a0\u00a0'Ella': 11\n}\n\nprint(student_age.keys())\n\n# output\ndict_keys(['Bob', 'Helen', 'Lucy', 'Matt', 'Ella'])<\/pre>\n\n\n\n<ol start=\"5\">\n<li><strong>dict.values():<\/strong> this method prints all the values in the dictionary; they are the items on the right-hand side. The format is dict.values() where &#8220;dict&#8221; is the name of the variable that stores the dictionary and .values() is a method.<\/li>\n<\/ol>\n\n\n\n<ol start=\"6\">\n<li><strong>dict.items(): <\/strong>this method returns both the keys and the values simultaneously. The keys are values are wrapped around in a parenthesis ()- called tuples and enclosed in a square bracket.&nbsp;<\/li>\n<\/ol>\n\n\n\n<p>The format is &lt;dict.items()&gt;, where &lt;dict&gt; is the name of the variable that stores the dictionary and &lt; .items()&gt; is a method.<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">student_age = {\n\u00a0\u00a0'Bob': 12,\n\u00a0\u00a0'Helen' : 14,\n\u00a0\u00a0'Lucy': 10,\n\u00a0\u00a0'Matt':13,\n\u00a0\u00a0'Ella': 11\n}\n\nprint(student_age.items())\n\n# output\ndict_items([('Bob', 12), ('Helen', 14), ('Lucy', 10), ('Matt', 13), ('Ella', 11)])<\/pre>\n\n\n\n<ol start=\"7\">\n<li><strong>Update:<\/strong> this method adds new items to the dictionary and also changes values that existed in the dictionary. The format is &lt;variable_name.update(key = value)&gt; where the &lt;variable_name&gt; stores the dictionary, &lt;key&gt; are the items on the left side while &lt;value&gt; are the items on the right side.<\/li>\n<\/ol>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">student_age = {\n\u00a0\u00a0'Bob': 12,\n\u00a0\u00a0'Helen' : 14,\n\u00a0\u00a0'Lucy': 10,\n\u00a0\u00a0'Matt':13,\n\u00a0\u00a0'Ella': 11\n}\n\nstudent_age.update(Bob=15)\nprint(student_age)\n\n#output \n#15<\/pre>\n\n\n\n<p><strong>Conclusion<\/strong><\/p>\n\n\n\n<p>Congratulations, this was a long read, but you made it to the end, and now you know how to work with python dictionaries. Remember to take learning in bits and celebrate your progress along the way. To know more about python lists and other data structures, check <a href=\"https:\/\/www.sololearn.com\/learning\/1159\">here<\/a>.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Before Google became the go to for word search, we used dictionaries. Dictionaries helped us figure out the meaning of words and add information about them. Python dictionaries are similar. They have keys (which can be compared to words) and values (which can be compared to the \u201ca word\u2019s\u201d meaning). A dictionary is a collection <a href=\"https:\/\/www.sololearn.com\/blog\/python-dictionaries\/\" class=\"more-link\">&#8230;<span class=\"screen-reader-text\">  Python Dictionaries<\/span><\/a><\/p>\n","protected":false},"author":7,"featured_media":2095,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[35,31],"tags":[],"_links":{"self":[{"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/posts\/1605"}],"collection":[{"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/users\/7"}],"replies":[{"embeddable":true,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/comments?post=1605"}],"version-history":[{"count":4,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/posts\/1605\/revisions"}],"predecessor-version":[{"id":2436,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/posts\/1605\/revisions\/2436"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/media\/2095"}],"wp:attachment":[{"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/media?parent=1605"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/categories?post=1605"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/tags?post=1605"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}