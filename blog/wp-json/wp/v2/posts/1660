{"id":1660,"date":"2022-11-16T21:05:03","date_gmt":"2022-11-16T21:05:03","guid":{"rendered":"https:\/\/blog-dev.sololearn.com\/?p=1660"},"modified":"2023-03-07T14:48:41","modified_gmt":"2023-03-07T14:48:41","slug":"c-sharp-array","status":"publish","type":"post","link":"https:\/\/www.sololearn.com\/blog\/c-sharp-array\/","title":{"rendered":"C# Array: What Are They &#038; How to Use Them?"},"content":{"rendered":"\n<p>C# is <a href=\"https:\/\/pypl.github.io\/PYPL.html\" target=\"_blank\" rel=\"noopener\">amongst the top 5 programming<\/a> languages according to the \u2018Popularity of Programming Language index.\u2019 You can find its use in diverse applications such as mobile applications, game development, and enterprise software.&nbsp;<\/p>\n\n\n\n<p>C#, pronounced as \u2018See Sharp\u2019, is an object-oriented, general-purpose language. It runs on the most loved <a href=\"https:\/\/www.sololearn.com\/blog\/what-is-a-framework\/\" data-type=\"post\" data-id=\"2371\">software development framework<\/a> .NET, by Microsoft. Developers enjoy learning this multi-paradigm programming language. It is readable, fast, cross-platform, and focused on developer productivity. Moreover, it is high-in-demand with an active &amp; vibrant community of developeC# arrayrs.<\/p>\n\n\n\n<p>C# arrays are the next thing to learn after establishing C# language fundamentals related to data types, variables, and methods. This article explains the basics of C# arrays. And also discusses various array manipulation techniques.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">What is Array in C#?<\/h2>\n\n\n\n<p>An array in C# is a type of data structure. It stores a sequential collection of elements with a fixed size.&nbsp;<\/p>\n\n\n\n<p>An array is a collection of the same type of variables. Data items stored in an array are called array elements.\u00a0 Array stores these elements at contiguous memory locations. The number of elements in an array specifies its length. The first element corresponds to the lowest address. And the last element corresponds to the highest address of a particular array. C# arrays are different from <a href=\"https:\/\/www.sololearn.com\/blog\/c-plus-plus-array\/\" data-type=\"post\" data-id=\"1746\">C\/C++ arrays<\/a>.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">How to Initialize Array in C#?<\/h2>\n\n\n\n<p>Array initialization is the process of assigning or storing values in an array. To initialize an array, you first need to declare it. You can declare an array by using an array name preceded by the data type and square bracket.&nbsp;<\/p>\n\n\n\n<h4 class=\"wp-block-heading\"><strong>Syntax:<\/strong>&nbsp;<\/h4>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"csharp\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">Data Type[] Arrayname<\/pre>\n\n\n\n<p>Once declared, you can initialize the array in the memory. The below-given statement declares and initializes an integer-type array. It can store ten integer values, as mentioned in the square bracket.&nbsp;<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"csharp\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">int[] Array = new int[10];<\/pre>\n\n\n\n<p>The following code snippet shows how to instantiate a C# integer array with predetermined values.<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"csharp\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">int[] Array = new int[4] {\n  23,\n  45,\n  78,\n  34\n}<\/pre>\n\n\n\n<p>The statement given above initializes an array named \u201c<strong>Array<\/strong>\u201d with values 23, 45, 78, 34. The length of the array is 4.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">Difference Between a List and Array<\/h3>\n\n\n\n<p>While both lists and arrays store variables; they are different. Lists in C# are a general collection of data items. Their memory is random and dynamic. It resizes whenever you add or remove elements from it. A list can contain heterogeneous data elements.<\/p>\n\n\n\n<p>But, an array in C# always has a fixed size because array memory is static. It stores a fixed number of items of the same data types. Array memory is continuous and thus does not need memory tracking.&nbsp;<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">What is a C# String Array?<\/h3>\n\n\n\n<p>A string is a sequence of Unicode characters. And a string array is a collection of character arrays (in other words, an array of strings). You cannot change the string elements. C# string arrays can store only a fixed number of strings. It can be single and multidimensional.<\/p>\n\n\n\n<p>You can specify the size of the array while declaring it or later. Use the following syntax to declare a string array in C# without specifying the size.<\/p>\n\n\n\n<h4 class=\"wp-block-heading\">Syntax:&nbsp;<\/h4>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"csharp\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">String[] &lt; your variable name >\n\/\/ declaration of string array named \u201cArr\u201d using keyword \u201cstring\u201dstring [] Arr;<\/pre>\n\n\n\n<p>To declare an array of strings with size, use the following syntax:<\/p>\n\n\n\n<h4 class=\"wp-block-heading\">Syntax:<\/h4>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"csharp\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">String \/ string[] &lt; your variable name >= new String \/ string[provided size] \/\/ declaration of string array named \u201cArr\u201d with size \u201c3\u201d using class object \u201cString\u201dString [] Arr = new String[3];<\/pre>\n\n\n\n<p>You can also declare and initialize an array with some strings in it, as shown below:<\/p>\n\n\n\n<h4 class=\"wp-block-heading\">Syntax:<\/h4>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"csharp\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">string[] Array_1, Array_2;<\/pre>\n\n\n\n<p>In the statement given above declares two string arrays named \u2018Array_1\u2019 and \u2018Array_2\u2019. You can also initialize these arrays using the following syntax:<\/p>\n\n\n\n<h4 class=\"wp-block-heading\">Syntax:<\/h4>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"csharp\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">Array_1 = new string[3] {\n  \"item1\",\n  \"item2\",\n  \"item3\"\n};\nArray_2 = new string[4] {\n  \"item1\",\n  \"item2\",\n  \"item3\",\n  \"item4\"\n};<\/pre>\n\n\n\n<p><strong>Note: <\/strong>If you initialize an array without specifying its size, the code will give a compile time error. Thus, the size of an array is required while initializing it.<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"csharp\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">String[] Array = new String[]; \/\/this will give errorString [] Array = new String[5]; \/\/this is fine<\/pre>\n\n\n\n<h3 class=\"wp-block-heading\">What is int Array?<\/h3>\n\n\n\n<p>Integers are whole numbers that can be positive or negative. An int array is a collection of integer values only. Declaration and initialization of an integer-type array are similar to a string array. Below is the syntax for declaring an integer array:&nbsp;<\/p>\n\n\n\n<h4 class=\"wp-block-heading\"><strong>Syntax:&nbsp;<\/strong><\/h4>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"csharp\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">Data Type[] &lt; Array Name ><\/pre>\n\n\n\n<p>Below is an example to declare and initialize an int array.&nbsp;<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"csharp\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">\/\/ Declaration of array\nint[] numarr1, numarr2;\n\/\/ Initializing the array \u00a0\nnumarr1 = new int[3] {\n  2,\n  4,\n  6\n};\nnumarr2 = new int[4] {\n  -1, 25, -12, 100\n};<\/pre>\n\n\n\n<h2 class=\"wp-block-heading\">How to Perform C# Array Manipulation?<\/h2>\n\n\n\n<p>Array manipulation is the act of performing various tasks on the array elements. You can add, remove, access, and transform the array elements using manipulation methods. Let\u2019s explore some of the basic C# array manipulation techniques.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">Access the Values of an Array<\/h3>\n\n\n\n<p>You can use the index value to access the items in the array. An index is the location reference of any array element. Array indexes start from 0. The square bracket contains the index number, followed by the array name.&nbsp;<\/p>\n\n\n\n<h4 class=\"wp-block-heading\">Syntax:<\/h4>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"csharp\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">&lt;Array Name> [ &lt;Index Number> ]<\/pre>\n\n\n\n<h4 class=\"wp-block-heading\">Example:&nbsp;<\/h4>\n\n\n\n<p>The following code snippet declares and initializes a string array with 4 elements named \u201ccolors\u201d. The first element of the array is at index \u20180\u2019.<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"csharp\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">string[] colors = {\n  \"Red\",\n  \"Green\",\n  \"Blue\",\n  \"Gray\"\n};\nConsole.WriteLine(\"==== Printing Strings in Array colors ====\");\n\nConsole.WriteLine(colors[0]);\nConsole.WriteLine(colors[1]);\nConsole.WriteLine(colors[2]);\nConsole.WriteLine(colors[3]);<\/pre>\n\n\n\n<p>To access different elements of the array pass the index value in the square bracket followed by the array name. Use index \u20180\u2019 to read the first element of the array \u201cRed.\u201d Incrementing the index value will give the next item in the array.<\/p>\n\n\n\n<p>The following output is obtained using the C# Compiler. <a href=\"https:\/\/www.sololearn.com\/compiler-playground\/csharp\">C# Compiler<\/a> is a user-friendly online compiler from Sololearn that allows users to write and run Java code on the web browser.<\/p>\n\n\n\n<h4 class=\"wp-block-heading\">Output:<\/h4>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"raw\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">==== Printing Strings in Array colors ====\nRed\nGreen\nBlue\nGray<\/pre>\n\n\n\n<h3 class=\"wp-block-heading\">Change an Array Element<\/h3>\n\n\n\n<p>The elements in the array are not immutable. In other words, you can change array items.&nbsp;<\/p>\n\n\n\n<h4 class=\"wp-block-heading\">Example:&nbsp;<\/h4>\n\n\n\n<p>Below, we have declared an integer-type array with the name \u201cnum\u201d. Suppose we want to change the value at the first and third index.&nbsp;<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"csharp\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">int[] num = {\n  2,\n  4,\n  6,\n  8\n};<\/pre>\n\n\n\n<p>To change the first item, assign the value \u2018-5\u2019 to the array num at index \u20180\u2019, as per the below statement.&nbsp;&nbsp;<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"csharp\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">num[0] = -5;<\/pre>\n\n\n\n<p>To change the third item, assign the product of two numbers to the array num at index \u20182\u2019.&nbsp;<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"csharp\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">num[2] = 256 * 15;<\/pre>\n\n\n\n<p>Output the final array by printing the values on the console. The first and third array items will be modified.<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"csharp\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">Console.WriteLine(\"==== Printing Integers in Array num ====\");\n\nConsole.WriteLine(num[0]);\nConsole.WriteLine(num[1]);\nConsole.WriteLine(num[2]);\nConsole.WriteLine(num[3]);<\/pre>\n\n\n\n<h4 class=\"wp-block-heading\">Output:<\/h4>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"raw\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">==== Printing Integers in Array num ====\n-5\n4\n3840\n8<\/pre>\n\n\n\n<h3 class=\"wp-block-heading\">Print Out Array<\/h3>\n\n\n\n<p>Loops are used to print out a complete array. Loops perform iteration on an array from a starting index to the ending index.&nbsp;<\/p>\n\n\n\n<h4 class=\"wp-block-heading\">Example:<\/h4>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"csharp\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">int[] num = {\n  2,\n  4,\n  6,\n  8\n};\nfor (int i = 0; i &lt; num.Length; i++) {\n  Console.Write($\"| {vals[i]} |\");\n}<\/pre>\n\n\n\n<p>The variable <strong>\u201ci\u201d<\/strong> is initialized as 0 and indicates the index number. The variable <strong>\u201ci\u201d<\/strong> increments after each iteration. And the item at the index gets printed on the console. It will continue to increase to the highest value corresponding to the array length, which is 4 in our case.&nbsp;<\/p>\n\n\n\n<p>We can achieve the same goal with a <strong>\u201cforeach\u201d <\/strong>loop as well, using the following code snippet.<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"csharp\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">foreach(var item in array) {\n  Console.Write($\"| {item} |\");\n}<\/pre>\n\n\n\n<h4 class=\"wp-block-heading\">Output:<\/h4>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"raw\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">| 2 || 4 || 6 || 8 |<\/pre>\n\n\n\n<h3 class=\"wp-block-heading\">Convert Array to String<\/h3>\n\n\n\n<p>You can convert an array of items to strings using the <strong>\u201cstring.Join\u201d<\/strong> function. It concatenates the elements of an array using a parameter.<\/p>\n\n\n\n<h4 class=\"wp-block-heading\">Example:&nbsp;<\/h4>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"csharp\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">int[] num = {\n  -13,\n  5,\n  255,\n  -78\n};\nConsole.WriteLine(string.Join(\" === \", num));<\/pre>\n\n\n\n<p>Let\u2019s consider an int array. The <strong>\u201cstring.Join\u201d<\/strong> function will iterate through the array and concatenate the string using the \u201c===\u201d parameter.<\/p>\n\n\n\n<h4 class=\"wp-block-heading\">Output:<\/h4>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"raw\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">-13 === 5 === 255 === -78<\/pre>\n\n\n\n<h2 class=\"wp-block-heading\">Check if an Element is in an Array<\/h2>\n\n\n\n<p>You can use the <strong>\u201cArray.Exists\u201d<\/strong> function to check if an item exists in the array or not,&nbsp; i. Let\u2019s consider an example of a string array containing the fruit names &#8211; apple, banana, orange, and grapes.&nbsp;<\/p>\n\n\n\n<h4 class=\"wp-block-heading\">Example:<\/h4>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"csharp\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">string[] fruits = {\n  \"apple\",\n  \"banana\",\n  \"orange\",\n  \"grapes\"\n};\nstring searchElement = \"orange\";\nbool exists = Array.Exists(fruits, element => element == searchElement);\nif (exists) {\n  Console.WriteLine(\"Item found in array\");\n} else {\n  Console.WriteLine(\"Item not found in array\");\n}<\/pre>\n\n\n\n<p><strong>\u201cArray.Exists\u201d <\/strong>have a callback function that uses a temporary variable as a search element. In this case, the variable element is a parameter. It checks if the \u2018searchElement\u2019 is equal to the element in the fruit array or not.&nbsp;<\/p>\n\n\n\n<p>If the values are equal, the function returns \u2018true\u2019; else, it returns \u2018false.\u2019<\/p>\n\n\n\n<h4 class=\"wp-block-heading\">Output:<\/h4>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"raw\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">Item found in array<\/pre>\n\n\n\n<h2 class=\"wp-block-heading\">Conclusion &#8211; Become an Expert in C# with Sololearn<\/h2>\n\n\n\n<p>This article lays out the basics of C# arrays. It serves as a good starting point to learn about C# arrays and work with them using various manipulation techniques.&nbsp;&nbsp;&nbsp;<\/p>\n\n\n\n<p>For programmers interested in <a href=\"https:\/\/www.sololearn.com\/blog\/c-plus-plus-or-c-sharp\/\" data-type=\"post\" data-id=\"1642\">mastering the C# language<\/a>, Sololearn offers a detailed course, &#8220;<a href=\"http:\/\/www.sololearn.com\/learn\/courses\/c-introduction\">Introduction to C#<\/a>.&#8221; It is an excellent resource to build your basics and attain intermediate-level expertise in C#.<\/p>\n\n\n\n<p>Moreover, with support from Sololearn\u2019s global community and educational resources developed by experts, you can excel in your academics and programming career.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>C# is amongst the top 5 programming languages according to the \u2018Popularity of Programming Language index.\u2019 You can find its use in diverse applications such as mobile applications, game development, and enterprise software.&nbsp; C#, pronounced as \u2018See Sharp\u2019, is an object-oriented, general-purpose language. It runs on the most loved software development framework .NET, by Microsoft. <a href=\"https:\/\/www.sololearn.com\/blog\/c-sharp-array\/\" class=\"more-link\">&#8230;<span class=\"screen-reader-text\">  C# Array: What Are They &#038; How to Use Them?<\/span><\/a><\/p>\n","protected":false},"author":7,"featured_media":2114,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[33],"tags":[60,72,73],"_links":{"self":[{"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/posts\/1660"}],"collection":[{"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/users\/7"}],"replies":[{"embeddable":true,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/comments?post=1660"}],"version-history":[{"count":3,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/posts\/1660\/revisions"}],"predecessor-version":[{"id":2485,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/posts\/1660\/revisions\/2485"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/media\/2114"}],"wp:attachment":[{"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/media?parent=1660"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/categories?post=1660"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/tags?post=1660"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}