{"id":1763,"date":"2022-11-22T08:37:55","date_gmt":"2022-11-22T08:37:55","guid":{"rendered":"https:\/\/blog-dev.sololearn.com\/?p=1763"},"modified":"2023-03-04T01:56:31","modified_gmt":"2023-03-04T01:56:31","slug":"javascript-function","status":"publish","type":"post","link":"https:\/\/www.sololearn.com\/blog\/javascript-function\/","title":{"rendered":"What is a Function in JavaScript?"},"content":{"rendered":"\n<p>Learn what a function is, why you need it, and how to create and use a function in JavaScript.<\/p>\n\n\n\n<p>A function is a part of your code that does exactly one thing. It\u2019s a logical unit of code that can carry out its <a href=\"https:\/\/www.sololearn.com\/blog\/what-is-javascript-used-for\/\" data-type=\"post\" data-id=\"1791\">task efficiently<\/a> <em>every time<\/em> you <strong>call <\/strong>it. So you can call a function and it will execute what it was set to do.<\/p>\n\n\n\n<p>In a nutshell, programming means giving instructions to computers or digital devices. In programming, these instructions are called <strong>statements<\/strong>. A function contains one or more programming statements. As such, when you call a function, the computer executes the statements inside this function, one after another.<\/p>\n\n\n\n<p>A function takes an input(s) that it will use to carry out its task. An <strong>argument<\/strong> is an input you give a function when you want to call it. So functions can take arguments and use them to perform their specific jobs.<\/p>\n\n\n\n<p>A function has a point of reference (or a <em>name)<\/em>. A function\u2019s name describes what it does. In most cases, the function\u2019s name starts with a verb. For example, if you have a function that displays the sum of two numbers, its name will be addTwoNumbers.<\/p>\n\n\n\n<p>To call a function, write its <em>name<\/em> followed by its <em>arguments<\/em> inside parentheses &nbsp;( ) . Something like the following:<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">addTwoNumbers(1, 2) \/\/ 3<\/pre>\n\n\n\n<p>In the above call to the addTwoNumbers function, \u201caddTwoNumbers\u201d is the name of the function while 1 and 2 are its arguments (inside parentheses).<\/p>\n\n\n\n<p><strong>Note: <\/strong>Arguments are optional. Some functions may not need an argument(s). In that case, you don\u2019t put anything inside the parentheses when you call such functions. E.g. To display <em>pi<\/em>, you can have a displayPi function that doesn\u2019t need any arguments:<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">displayPi() \/\/ 3.14159...<\/pre>\n\n\n\n<p><strong>Why do you need a Function?<\/strong><\/p>\n\n\n\n<ol>\n<li><strong>Functions make code shorter and snappier&nbsp;<\/strong><\/li>\n<\/ol>\n\n\n\n<p>DRY is a programming technique that involves making your code shorter where possible. The smaller the code, the better it is \u2014 given that it still does the same thing. DRY is an acronym for <strong><em>D<\/em><\/strong><em>on\u2019t <\/em><strong><em>R<\/em><\/strong><em>epeat <\/em><strong><em>Y<\/em><\/strong><em>ourself<\/em>.<\/p>\n\n\n\n<p>When coding, some statements repeat themselves frequently. So instead of continuously repeating those statements, you can group them into a single unit \u2014 a <strong>function<\/strong>. In other words, functions help to make your code DRY.&nbsp;<\/p>\n\n\n\n<ol start=\"2\">\n<li><strong>Functions arrange the code<\/strong><\/li>\n<\/ol>\n\n\n\n<p>Programming is used to solve problems. As a programmer, you are a problem solver. When you want to solve a problem, you first think out the <a href=\"https:\/\/www.sololearn.com\/blog\/10-basics-of-javascript\/\" data-type=\"post\" data-id=\"2000\">various steps involved in the solution<\/a>. Then you use programming languages like JavaScript to solve these problems.<\/p>\n\n\n\n<p>Given a well-defined solution, you can use functions to break down this solution into specific tasks. Hence, functions help arrange the code.&nbsp;<\/p>\n\n\n\n<p>Let\u2019s say you are building a personal assistant website. When the website loads, you want it to fetch all schedules, sort them, and then display them on a calendar. You can use various functions for each of these tasks. You could have the following JavaScript code for this website:<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">fetchAllSchedules()\nsortSchedules()\ndisplayOnCalendar()<\/pre>\n\n\n\n<p><strong>How to Create a Function in JavaScript<\/strong><\/p>\n\n\n\n<p>To declare a function means to create it. When creating a function, you specify its <em>name<\/em>. If that function will be called with any arguments, you indicate the arguments when creating the function.&nbsp;<\/p>\n\n\n\n<p>A <strong>parameter<\/strong> is a variable that a function uses to perform its task. When creating a function, parameters are the arguments of that function. So when declaring a function, you provide parameters \u2014 variables that the function will use. But when calling functions, you provide arguments \u2014 values of the parameters.<\/p>\n\n\n\n<p>When you declare a function you provide the function\u2019s <em>body. <\/em>This <em>body<\/em> contains all the statements that the computer will run line by line when you use that function.&nbsp;<\/p>\n\n\n\n<p>When declaring a function, surround the function body with left and right curly braces &nbsp;{ } . These braces (and hence the function body) come after the parameter list (the parentheses&nbsp; &nbsp;( ) ).<\/p>\n\n\n\n<p>There are two ways to declare a function in JavaScript. They are as follows:<\/p>\n\n\n\n<ol>\n<li>Using the function keyword.<\/li>\n\n\n\n<li>Using the arrow syntax.<\/li>\n<\/ol>\n\n\n\n<ol>\n<li><strong>Declare JS Function with function keyword<\/strong><\/li>\n<\/ol>\n\n\n\n<p>To declare a function using the function keyword, carry out the following steps:<\/p>\n\n\n\n<ol>\n<li>Type the function keyword followed by the <em>desired function\u2019s name.<\/em><\/li>\n\n\n\n<li>Type open and close parentheses &nbsp;( ) . Add the function\u2019s parameters inside these parentheses (i.e. if the function needs parameters).<\/li>\n\n\n\n<li>Type left curly brace &nbsp;{ .<\/li>\n\n\n\n<li>Type the statements of the function (the function\u2019s body).<\/li>\n\n\n\n<li>Type right curly brace &nbsp;} .<\/li>\n<\/ol>\n\n\n\n<p>For example, using the <a href=\"https:\/\/www.sololearn.com\/blog\/javascript-function\/\" data-type=\"post\" data-id=\"1763\">function keyword method<\/a>, you will declare the addTwoNumbers function in the following way:<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">function addTwoNumbers(a, b) {\n\tconst sum = a + b\n\tconsole.log(sum)\n}\n\naddTwoNumbers(1, 2) \/\/ 3<\/pre>\n\n\n\n<p>Where the parameters of the addTwoNumbers function are a and b.<\/p>\n\n\n\n<ol start=\"2\">\n<li><strong>Declare JS Function with arrow syntax<\/strong><\/li>\n<\/ol>\n\n\n\n<p>To declare a function with the arrow syntax, carry out the following steps:<\/p>\n\n\n\n<ol>\n<li>Type the const keyword, then the <em>desired function\u2019s name <\/em>and an equals sign &nbsp;= .<\/li>\n\n\n\n<li>Type open and close parentheses &nbsp;( ) . Add the function\u2019s parameters inside these parentheses (i.e. if the function needs parameters).<\/li>\n\n\n\n<li>Type an equals sign joined with a greater sign together &nbsp;=&gt; .This is the arrow syntax.<\/li>\n\n\n\n<li>Type left curly brace &nbsp;{ .<\/li>\n\n\n\n<li>Type the statements of the function (the function\u2019s body).<\/li>\n\n\n\n<li>Type right curly brace &nbsp;} .<\/li>\n<\/ol>\n\n\n\n<p>For example, using the arrow syntax method, you will declare the addTwoNumbers function in the following way:<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">const addTwoNumbers = (a, b) => {\n\tconst sum = a + b\n\tconsole.log(sum)\n}\n\naddTwoNumbers(1, 2) \/\/ 3<\/pre>\n\n\n\n<p><strong>Should you use function keywords and arrow syntax to declare functions?<\/strong><\/p>\n\n\n\n<p><strong>What is similar?&nbsp;<\/strong><\/p>\n\n\n\n<p>Both ways set the function name, its parameters, and its body.<\/p>\n\n\n\n<p><strong>What is different?&nbsp;<\/strong><\/p>\n\n\n\n<ul>\n<li>One way uses the function keyword while the other uses the arrow (equals and greater than signs) &nbsp;=&gt; .<\/li>\n\n\n\n<li>Also, in the first way, the function keyword comes first while in the other, the arrow &nbsp;=&gt; &nbsp;comes in between the parentheses and curly braces.<\/li>\n\n\n\n<li>Another difference is that you must assign the function to a variable with the arrow syntax way. In other words, const with the <em>function name<\/em>, followed by the equals sign, has to precede the parentheses.<\/li>\n<\/ul>\n\n\n\n<p><strong>Which should you use?&nbsp;<\/strong><\/p>\n\n\n\n<p>The arrow syntax method is the recommended way to declare functions. It is more modern than its function keyword counterpart. It is recommended because you can use it as a one-liner (coming later).<\/p>\n\n\n\n<p><strong>What are Void and Value Functions?<\/strong><\/p>\n\n\n\n<p>The above example&nbsp; addTwoNumbers function is a <strong>void<\/strong> function. A void function is a function that does not <em>return<\/em> a value. Returning a value means that there will be a return keyword <em>with the result<\/em> of some computation.&nbsp;<\/p>\n\n\n\n<p>A void function simply does some computation and ends there. It carries out one or more statements. On the other hand, a value function does computations <em>and returns a value<\/em>. So, at the end of a value function, you will see the return keyword with some value or variable.<\/p>\n\n\n\n<p>Because value functions can return a value, you can call them anywhere you will insert a variable. Let\u2019s use the above addTwoNumbers function. To convert it from a void to a value function, <em>return <\/em>the computed sum. Then you can use the return value as you wish. Something like the following:<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">const addTwoNumbers = (a, b) => {\n\tconst sum = a + b\n\treturn sum\n}\n\nconsole.log(addTwoNumbers(1, 2)) \/\/ 3<\/pre>\n\n\n\n<p>Value functions are useful when you need to use the return value. You could also use them when you want to perform another computation with that return value.&nbsp;<\/p>\n\n\n\n<p>Let\u2019s say you want to display the double of the returned sum. You will create another&nbsp; displayDouble&nbsp; that doubles its argument and displays the double. Something like the following:<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">const displayDouble = (n) => {\n\tconsole.log(n * 2)\n}\n\ndisplayDouble(addTwoNumbers(1, 2)) \/\/ 3<\/pre>\n\n\n\n<p><strong>One-liner JavaScript Functions<\/strong><\/p>\n\n\n\n<p>The above displayDouble function has only one statement. Anytime a function has only one statement, you can write its body (the single statement), without the enclosing braces. These kinds of functions are called <strong>one-liners<\/strong>.&nbsp;<\/p>\n\n\n\n<p>Rewriting the above displayDouble function to be a one-liner, we have the following:<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">const displayDouble = (n) => console.log(n * 2)\n\ndisplayDouble(2) \/\/ 4<\/pre>\n\n\n\n<p>One-liners are elegant. They are short and easy to read. You can only use one-liners, once there is <strong>only one<\/strong> statement in a given function. If the function has more than one statement, remember to put its body inside curly braces.<\/p>\n\n\n\n<p><strong>Congrats! You\u2019ve now know what JS functions are<\/strong><\/p>\n\n\n\n<p>A function is a group of codes that do the same thing when you call it. It has a name, parameters, and body. You can supply arguments (if need be) when you call a given function. A function can return a value. This return value can be used for other computations or assigned to a variable.<\/p>\n\n\n\n<p>Generally, use functions when you are in either of the following scenarios:<\/p>\n\n\n\n<ol>\n<li>When you need to repetitively carry out a given task.<\/li>\n\n\n\n<li>When you need to break down a huge task into smaller specific tasks.<\/li>\n<\/ol>\n\n\n\n<p>Functions are a great part of JavaScript, but the language also has other important parts like conditionals, loops, operators, etc. But learning them doesn\u2019t have to be hard. Just check out our bite-sized lessons and try writing some JavaScript code of your own on Sololearn.<a href=\"https:\/\/www.sololearn.com\/learn\/languages\/javascript\"> Learn JavaScript for FREE on Sololearn here<\/a>.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Learn what a function is, why you need it, and how to create and use a function in JavaScript. A function is a part of your code that does exactly one thing. It\u2019s a logical unit of code that can carry out its task efficiently every time you call it. So you can call a <a href=\"https:\/\/www.sololearn.com\/blog\/javascript-function\/\" class=\"more-link\">&#8230;<span class=\"screen-reader-text\">  What is a Function in JavaScript?<\/span><\/a><\/p>\n","protected":false},"author":7,"featured_media":2092,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[35,33],"tags":[],"_links":{"self":[{"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/posts\/1763"}],"collection":[{"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/users\/7"}],"replies":[{"embeddable":true,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/comments?post=1763"}],"version-history":[{"count":4,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/posts\/1763\/revisions"}],"predecessor-version":[{"id":2463,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/posts\/1763\/revisions\/2463"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/media\/2092"}],"wp:attachment":[{"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/media?parent=1763"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/categories?post=1763"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/tags?post=1763"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}