{"id":1746,"date":"2022-11-21T15:16:40","date_gmt":"2022-11-21T15:16:40","guid":{"rendered":"https:\/\/blog-dev.sololearn.com\/?p=1746"},"modified":"2023-03-04T03:08:26","modified_gmt":"2023-03-04T03:08:26","slug":"c-plus-plus-array","status":"publish","type":"post","link":"https:\/\/www.sololearn.com\/blog\/c-plus-plus-array\/","title":{"rendered":"Introduction to C++ Array"},"content":{"rendered":"\n<p>Let&#8217;s understand with an example \u2014&nbsp; suppose we want to store 5 students&#8217; marks for some calculation. Marks are integer types, so we can declare variables something like this.<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"cpp\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">int st1, st2, st3, st4, st5<\/pre>\n\n\n\n<p>If we declare it like above, it&#8217;ll be very difficult for us to manipulate such data.<\/p>\n\n\n\n<p>What if students are increasing, then it is very difficult to declare numerous variables and keep track of them.<\/p>\n\n\n\n<p>To overcome this kind of situation, we have arrays. So now we can define the Arrays \u2014 used to store multiple values in a single variable of the same type, instead of declaring separate variables for each value. Or we can say it&#8217;s a collection of the same type of data in a single variable.<\/p>\n\n\n\n<p><strong>To declare an array<\/strong>:<\/p>\n\n\n\n<ul>\n<li>Define the variable type (array type)<\/li>\n\n\n\n<li>Specify the name of the array followed by square brackets<\/li>\n\n\n\n<li>Specify the number of elements it should store in between square brackets&nbsp;<\/li>\n<\/ul>\n\n\n\n<p>For example: <\/p>\n\n\n\n<ol>\n<li>int marks[10];&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; (int type)<\/li>\n\n\n\n<li>string names[20];&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; (string type)<\/li>\n\n\n\n<li>double prices[15]; &nbsp; &nbsp; &nbsp; &nbsp; (double type)<\/li>\n\n\n\n<li>char letters[5]; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; (char type)<\/li>\n<\/ol>\n\n\n\n<h2 class=\"wp-block-heading\"><strong>Initializing the Array&nbsp;<\/strong><\/h2>\n\n\n\n<p><strong>Initializing the Array during the declaration<\/strong><\/p>\n\n\n\n<p>Initializing the array during declaration means with the time of declaration array we initialize the array elements or values. How can we do that:<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"cpp\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">int marks[5] = {\n  80,\n  78,\n  92,\n  97,\n  86\n};<\/pre>\n\n\n\n<p>Here, we place the value of 5 students marks in an array at the time of declaration.<\/p>\n\n\n\n<p><strong>Assigning the values after the declaration<\/strong><\/p>\n\n\n\n<p>Sometimes we declare the array without initializing elements like this.<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"cpp\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">int marks[5];<\/pre>\n\n\n\n<p>But for initializing the array, we place the value to the index number.&nbsp;<\/p>\n\n\n\n<ul>\n<li>marks[0] = 80;<\/li>\n\n\n\n<li>marks[1] = 78;<\/li>\n\n\n\n<li>marks[2] = 92;<\/li>\n\n\n\n<li>marks[3] = 97;<\/li>\n\n\n\n<li>marks[4] = 86;<\/li>\n<\/ul>\n\n\n\n<p>Note: 0,1,2,3,4 are the index numbers that start from 0.<\/p>\n\n\n\n<p><strong>Few things to remember about array:<\/strong><\/p>\n\n\n\n<ul>\n<li>The array indices start with 0. Meaning arr[0] is the first element stored at index 0.<\/li>\n\n\n\n<li>If the size of an array is N, the last element is stored at index (N-1). In this example, marks[4] is the last element.<\/li>\n\n\n\n<li>Elements of an array have consecutive addresses. For example, suppose the starting address of marks[0] is 8484. Then, the address of the next element marks[1] will be 8488, the address of marks[2] will be 8492, and so on.<\/li>\n\n\n\n<li>Here, the size of each element is increased by 4. This is because the size of int is 4 bytes.<\/li>\n\n\n\n<li>If we forget to declare the size of an array during initialisation then compiler automatically assigns the size of an array.<\/li>\n\n\n\n<li><\/li>\n<\/ul>\n\n\n\n<p><strong>Let&#8217;s discuss about types of array in C++<\/strong><\/p>\n\n\n\n<p>Basically, there are two types of array in <a href=\"https:\/\/www.sololearn.com\/blog\/c-plus-plus-or-c-sharp\/\" data-type=\"post\" data-id=\"1642\">C++<\/a>:<\/p>\n\n\n\n<ul>\n<li><em>One dimensional array<\/em><\/li>\n\n\n\n<li><em>Multi dimensional array<\/em><\/li>\n<\/ul>\n\n\n\n<p><strong>One dimensional array \u2014<\/strong> in this type of array, the elements are stored in a single dimension or we can say single row.<\/p>\n\n\n\n<p>Example: int bikes[20]<\/p>\n\n\n\n<p><strong>Multi dimensional array \u2014<\/strong> in this type of array, the elements are stored in multi dimensions row and column wise. Two indices describe each element, the first index represents a row, and the second index represents a column.<\/p>\n\n\n\n<p>Example: int cars[10][20], int rooms[5][10][15]<\/p>\n\n\n\n<h2 class=\"wp-block-heading\"><strong>Manipulating the Array<\/strong><\/h2>\n\n\n\n<h3 class=\"wp-block-heading\"><strong>Accessing the Elements of an Array<\/strong><\/h3>\n\n\n\n<p>Each element in an array is associated with an index number. We can access the elements of an array by using those indices.<\/p>\n\n\n\n<p>Like: cout&lt;&lt;arr[0];<\/p>\n\n\n\n<p>This will print the first element of an array.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\"><strong>How to print whole Array<\/strong><\/h3>\n\n\n\n<p>For printing all elements of an array, we&#8217;ll use loops to print the elements of an array.<\/p>\n\n\n\n<p>There are many ways to print the whole array elements. Here we&#8217;re using a for-each loop to print elements.<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"cpp\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">int arr[3] = {\n  8,\n  7,\n  9\n};\nfor (int i: arr) {\n  cout &lt;&lt; i &lt;&lt; \" \";\n}\n\/\/Output: 8 7 9<\/pre>\n\n\n\n<p><strong>How to check if the index number goes to out of range<\/strong><\/p>\n\n\n\n<p>Let&#8217;s suppose we&#8217;ve an array of size 10. So what if someone wants to access the value at index 12. So here we need to first check the range of the index whether it&#8217;s in range or not.<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"cpp\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">int arr[] = {\n  1,\n  2,\n  3,\n  4,\n  5\n};\nint sizeOfArray = sizeof(arr) \/ sizeof(int);\nint index = 20;\nif (index &lt; 0 || index > sizeOfArray) {\n  count &lt;&lt; \"index out of range\";\n}<\/pre>\n\n\n\n<p><strong>Array operations in C++<\/strong><\/p>\n\n\n\n<ul>\n<li>Traversal&nbsp;<\/li>\n\n\n\n<li>Insertion<\/li>\n\n\n\n<li>Search&nbsp;<\/li>\n\n\n\n<li>Updation<\/li>\n\n\n\n<li>Deletion&nbsp;<\/li>\n<\/ul>\n\n\n\n<p><strong>Let&#8217;s discuss one-by-one<\/strong><\/p>\n\n\n\n<p><strong>1: Traversal<\/strong> <strong>\u2014<\/strong> Traversal in an array means printing the elements of the array one by one. Means we&#8217;re accessing the elements of the array. This can done using a simple code:<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"cpp\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">int main() {\n  int arr[3] = {\n    1,\n    3,\n    2\n  };\n  for (int i = 0; i &lt; 3; i++) {\n    cout &lt;&lt; arr[i] &lt;&lt; endl;\n  }\n  return 0;\n}<\/pre>\n\n\n\n<p><strong>2: Insertion \u2014<\/strong><\/p>\n\n\n\n<p>Insertion of element in the end of the Array&nbsp;<\/p>\n\n\n\n<p>Now we want to add some extra values to an existing array. In the above array we want to add 6 and 7. How to do this?<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"cpp\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">int arr[] = {\n  1,\n  2,\n  3,\n  4,\n  5\n};\n\/\/ Here last index is 4 so we've to add extra value to next \nindexarr[5] = 6;\narr[6] = 7;\n\/\/ We can add more values to an array<\/pre>\n\n\n\n<p><strong>Insertion of element at the specific Index<\/strong><\/p>\n\n\n\n<ul>\n<li>First get the element to be inserted, let say elem<\/li>\n<\/ul>\n\n\n\n<ul>\n<li>Then get the position at which this element is to be inserted, let say position<\/li>\n<\/ul>\n\n\n\n<ul>\n<li>Then shift the array elements from this position to one position forward, and do this for all the other elements next to position.<\/li>\n<\/ul>\n\n\n\n<ul>\n<li>Insert the element elem now at the position position.<\/li>\n<\/ul>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"cpp\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">int arr[] = {\n  1,\n  2,\n  3,\n  4,\n  5\n};\nint i;\nint sizeOfArray = sizeof(arr) \/ sizeof(int);\nint position = 3, elem = 8;\ncout &lt;&lt; sizeOfArray &lt;&lt; endl;\nfor (i = sizeOfArray; i >= position; i--)\n  arr[i] = arr[i - 1];\narr[i] = elem;\nsizeOfArray++;\nfor (int j; j &lt; sizeOfArray; j++) {\n  cout &lt;&lt; arr[j];\n}<\/pre>\n\n\n\n<p>In the above code we want to add element 8 at index number 3. Let&#8217;s understand this code in detail.<\/p>\n\n\n\n<p>Here,<\/p>\n\n\n\n<p>arr[0] = 1;<\/p>\n\n\n\n<p>arr[1] = 2;<\/p>\n\n\n\n<p>arr[2] = 3;<\/p>\n\n\n\n<p>arr[3] = 4;<\/p>\n\n\n\n<p>arr[4] = 5;<\/p>\n\n\n\n<p>The size of the array is 5.<\/p>\n\n\n\n<p><strong>Inside the first for loop:<\/strong><\/p>\n\n\n\n<ul>\n<li>i = 5<\/li>\n<\/ul>\n\n\n\n<ul>\n<li>Now the condition, i &gt;= position or 5 &gt;= 3 evaluates to be true, therefore program flow goes inside the loop<\/li>\n<\/ul>\n\n\n\n<ul>\n<li>Inside the loop, arr[i-1] or arr[5-1] or arr[4] or 5 gets initialised to arr[i] or arr[5]. So arr[5] = 5.<\/li>\n<\/ul>\n\n\n\n<ul>\n<li>Now the program flow goes to the update part of the for loop decrements the value of i. So i=4, and evaluates the condition again<\/li>\n<\/ul>\n\n\n\n<ul>\n<li>That is the condition i &gt;= position or 4&gt;=3 evaluates to be true again, therefore program flow again goes inside the loop<\/li>\n<\/ul>\n\n\n\n<ul>\n<li>This process continues, until the condition of the for loop evaluates to be false. Before its condition evaluated to be false, here are the new values of arr[]:<\/li>\n<\/ul>\n\n\n\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arr[5] = 5;<\/p>\n\n\n\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arr[4] = 4;<\/p>\n\n\n\n<ul>\n<li>Now 4 element is placed on the 4th index that was placed on the 3rd index.<\/li>\n<\/ul>\n\n\n\n<ul>\n<li>Now the 3rd index is free to placed new element.<\/li>\n<\/ul>\n\n\n\n<h2 class=\"wp-block-heading\"><strong>Check if an element is in Array<\/strong><\/h2>\n\n\n\n<p><strong>3: Search<\/strong> <strong>\u2014<\/strong> Now we&#8217;re going to search a specific element in the array. For that we need to ask the user to enter the element that you want to search in the array. Then traverse the whole array and check the entered value is matched with any element in the array. Let&#8217;s understand with an example.<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"cpp\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">int main() {\n  int arr[3] = {\n    25,\n    76,\n    63\n  };\n  int userInput;\n  cin >> userInput;\n  for (int i: arr) {\n    if (i == userInput) {\n      cout &lt;&lt; \"Found\";\n    } else {\n      cout &lt;&lt; \"Not found\";\n      break;\n    }\n  }\n  return 0;\n}<\/pre>\n\n\n\n<h3 class=\"wp-block-heading\"><strong>How to change or update the elements&nbsp;<\/strong><\/h3>\n\n\n\n<p><strong>4: Updation<\/strong> \u2014 Updating refers to updating an existing array element at a particular index value to a new element.&nbsp;<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"cpp\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">int main() {\n  int arr[4] = {\n    10,\n    20,\n    30,\n    50\n  };\n  int pos = 4;\n  int newElem = 40;\n  cout &lt;&lt; \"Original array :\" &lt;&lt; endl;\n  for (int i = 0; i &lt; 4; i++) {\n    cout &lt;&lt; arr[i] &lt;&lt; endl;\n  }\n  arr[pos - 1] = newElem;\n  cout &lt;&lt; \"after updating the array :\" &lt;&lt; endl;\n  for (int i = 0; i &lt; 4; i++) {\n    cout &lt;&lt; arr[i] &lt;&lt; endl;\n  }\n  return 0;\n}<\/pre>\n\n\n\n<p><strong>5: Deletion<\/strong> \u2014 Deletion operation is used to delete an element from the array. A simple program to perform deletion in an array is shown below.<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"cpp\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">int main() {\n  int arr[] = {\n    1,\n    2,\n    3,\n    4\n  };\n  int pos = 2, size = 4;\n  int j = pos;\n  while (j &lt; size) {\n    arr[j - 1] = arr[j];\n    j = j + 1;\n  }\n  size = size - 1;\n  for (int i = 0; i &lt; size; i++) {\n    cout &lt;&lt; arr[i] &lt;&lt; endl;\n  }\n  return 0;\n}<\/pre>\n\n\n\n<p><strong>What are Empty Arrays?<\/strong><\/p>\n\n\n\n<p>Empty arrays means those arrays have no elements. How can we declare empty arrays? There are some ways to declare empty arrays.<\/p>\n\n\n\n<p>For example:<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"cpp\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">int arr[10];\nint arr[10] = {};\nint arr[50] = {\n  0\n};<\/pre>\n\n\n\n<h3 class=\"wp-block-heading\"><strong>Creating the Array using loop<\/strong><\/h3>\n\n\n\n<p>By using the loop, we&#8217;ll create the arrays and initialise the array with user input.<\/p>\n\n\n\n<p>To fill an array with user input. We need to ask the user to enter the size of the array then the elements of an array. Let&#8217;s understand with an example.<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"cpp\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">int main() {\n    int size;\n    cin >> size;\n    int arr[size];\n    for (int i = 0; i &lt; size; i++) {\n      int j;\n      cin >> j;\n      arr[i] = j;\n    }\n    for (int k: arr) {\n      cout &lt;&lt; k &lt;&lt; endl;\n    }<\/pre>\n\n\n\n<p><strong>How to know the size or length of an array?<\/strong><\/p>\n\n\n\n<p>Basically, when we say the length of an array actually we refer to the total number of elements present in the array.&nbsp;<\/p>\n\n\n\n<p>For example:<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"cpp\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">int books[8] = {\n  1,\n  2,\n  3,\n  4,\n  5,\n  6,\n  7,\n  8\n};<\/pre>\n\n\n\n<p>Here we can count the total number of elements in the array. But what if there are many more elements?<\/p>\n\n\n\n<p>We&#8217;re going to learn about the various ways to find the array length.<\/p>\n\n\n\n<p><strong>Ways to find Length of an Array<\/strong><\/p>\n\n\n\n<ul>\n<li>Counting element-by-element<\/li>\n\n\n\n<li>begin() and end() function&nbsp;<\/li>\n\n\n\n<li>sizeof() function<\/li>\n\n\n\n<li>Pointers.<\/li>\n<\/ul>\n\n\n\n<p>Let&#8217;s understand one by one:<\/p>\n\n\n\n<p><strong>Counting element-by-element<\/strong><\/p>\n\n\n\n<p>In this method we&#8217;ll traverse all the elements of an array and simultaneously we&#8217;ll count the elements. Let&#8217;s understand with an example.<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"cpp\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">int main() {\n  int count;\n  int arr[] = {\n    1,\n    2,\n    3,\n    4,\n    5,\n    6,\n    7,\n    8\n  };\n  for (int i: arr) {\n    cout &lt;&lt; i &lt;&lt; endl;\n    count++;\n  }\n  cout &lt;&lt; \"The length of the array is: \" &lt;&lt; count;\n  return 0;\n}<\/pre>\n\n\n\n<p><strong>Using begin() and end() function<\/strong>&nbsp;<\/p>\n\n\n\n<p>We can also calculate the length of an array using the standard library\u2019s begin() and end() functions. See below code.<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"cpp\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">int main() {\n  int count;\n  int arr[] = {\n    1,\n    2,\n    3,\n    4,\n    5,\n    6,\n    7,\n    8\n  };\n  count = end(arr) - begin(arr);\n  cout &lt;&lt; \"The length of the array is: \" &lt;&lt; count;\n  return 0;\n}<\/pre>\n\n\n\n<p><strong>By using sizeof() operator<\/strong><\/p>\n\n\n\n<p>The sizeof() operator returns the size of the passed variable or data in bytes. But for finding total numbers of elements in an array we divide the whole bytes with the size of data type of an array. See below example.<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"cpp\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">int main() {\n  int arr[] = {\n    10,\n    20,\n    30,\n    40,\n    50,\n    60,\n    70,\n    80\n  };\n  int count = sizeof(arr) \/ sizeof(int);\n  cout &lt;&lt; \"The length of the array is: \" &lt;&lt; count;\n  return 0;\n}<\/pre>\n\n\n\n<h3 class=\"wp-block-heading\"><strong>Find the array length using pointer&nbsp;<\/strong><\/h3>\n\n\n\n<p><strong>By using pointer<\/strong><\/p>\n\n\n\n<p>We can also calculate the length of an array by using a pointer. See example:<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"cpp\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">int main() {\n  int arr[] = {\n    8,\n    6,\n    9,\n    5,\n    3,\n    5\n  };\n  int count = * ( &amp; arr + 1) - arr;\n  cout &lt;&lt; \"The length of the array is: \" &lt;&lt; count;\n  return 0;\n}<\/pre>\n\n\n\n<p><strong>Sometimes we need to check the array whether it&#8217;s full or not?<\/strong><\/p>\n\n\n\n<p>Full array means all the elements are filled with equal to the array size. For example an array size is 20 then it&#8217;ll be called full array when the total number of elements are 20.<\/p>\n\n\n\n<p>So how to check with code?&nbsp;<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"cpp\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">int main() {\n  int arr[2] = {\n    1,\n    2\n  };\n  int count = 0;\n  int size = sizeof(arr) \/ sizeof(int);\n  for (int i: arr) {\n    if (arr[i] != 0) count++;\n  }\n  if (count == size) cout &lt;&lt; \"Array is full\";\n  else cout &lt;&lt; \"Array isn't full\";\n  return 0;\n}<\/pre>\n\n\n\n<p><strong>Array in Classes or Array of objects<\/strong><\/p>\n\n\n\n<p>When a class is defined, only the specification for the object is defined; no memory or storage is allocated. To use the data and access functions defined in the class, you need to create objects of class type. Let&#8217;s have a look at the code.<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">class emp {\n  public: int id;\n  string name;\n  void get() {\n    cin >> id >> name;\n  }\n  void show() {\n    cout &lt;&lt; id &lt;&lt; \" \" &lt;&lt; name &lt;&lt; endl;\n  }\n};\nint main() {\n  emp e[2];\n  for (int j = 0; j &lt; 2; j++) {\n    e[j].get();\n  }\n  for (int j = 0; j &lt; 2; j++) {\n    e[j].show();\n  }\n  return 0;\n}<\/pre>\n\n\n\n<p>Here we created an emp class with a public member ( id type of int, name type of string ) two member functions: get() for getting employee details and show() for printing the details of employees.<\/p>\n\n\n\n<p>Next we created an array of type class in the main function.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\"><strong>Passing Array to a function&nbsp;<\/strong><\/h3>\n\n\n\n<p>Just like normal variables, Arrays can also be passed to a function as an argument of a function, but in <a href=\"https:\/\/www.sololearn.com\/blog\/what-is-c-plus-plus-used-for\/\" data-type=\"post\" data-id=\"1242\">C++<\/a> whenever we pass an array as a function argument then it is always treated as a pointer by a function. It means a function argument can never be an array \u2013 they&#8217;re always converted to the <strong>pointers.<\/strong><\/p>\n\n\n\n<p>Basically there are three ways to pass an array to a function argument.<\/p>\n\n\n\n<ul>\n<li><strong>Formal parameter as a sized array<\/strong><\/li>\n\n\n\n<li><strong>Formal parameter as a unsized array<\/strong><\/li>\n\n\n\n<li><strong>Formal parameter as a pointers&nbsp;<\/strong><\/li>\n<\/ul>\n\n\n\n<p>Let&#8217;s understand one-by-one:<\/p>\n\n\n\n<p><strong>1. Formal parameter as a sized array \u2014&nbsp;<\/strong><\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"cpp\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">#include&lt;iostream>using namespace std;int sum(int []);\u00a0int main(){\u00a0\u00a0\u00a0int arr[3] = {2, 3, 4};\u00a0\u00a0\u00a0cout&lt;&lt;sum(arr);\u00a0\u00a0\u00a0return 0;}\n\nint sum(int array[3]) { \/\/ here we pass the array with size\u00a0\u00a0\u00a0int total =0;\u00a0\u00a0\u00a0for(int i=0;i&lt;3;i++){\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0total += array[i];\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0return total;}<\/pre>\n\n\n\n<p>Even though the parameter array is declared as an int array of <strong>3<\/strong> <strong>elements<\/strong>, the compiler automatically converts it to an int <strong>pointer<\/strong> like this <strong>int *array<\/strong>. This is necessary because no parameter can actually receive an entire array. A pointer to an array gets passed when an array is passed to the function.<\/p>\n\n\n\n<p><strong>2. Formal parameter as a unsized array \u2014<\/strong><\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"cpp\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">#include&lt;iostream>using namespace std;int sum(int [],int);int main(){int arr[3] = {2, 3, 4}; int size = 3; cout&lt;&lt;sum(arr,size); \/\/ we pass the array as well size of the array as an argument return 0;}\n\nint sum(int array[3], int n) {\n  int total = 0;\n  for (int i = 0; i &lt; n; i++) {\n    total += array[i];\n  }\n  return total;\n}<\/pre>\n\n\n\n<p>In this method, we pass the array with the size of an array as an argument.<\/p>\n\n\n\n<p><strong>3 Formal parameter as a pointer \u2014<\/strong><\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"cpp\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">#include&lt;iostream>using namespace std;int sum(int [],int);int main(){\u00a0\u00a0\u00a0int arr[3] = {2, 3, 4};\u00a0\u00a0\u00a0int size = 3;\u00a0\u00a0\u00a0cout&lt;&lt;sum(arr,size); \/\/ we pass the array as well size of the array as an argument\u00a0\u00a0\u00a0\u00a0return 0;}\n\nint sum(int * array, int n) {\n  int total = 0;\n  for (int i = 0; i &lt; n; i++) {\n    total += array[i];\n  }\n  return total;\n}<\/pre>\n\n\n\n<p>Here we&#8217;re not using square brackets because the function argument can&#8217;t be an array \u2013 they&#8217;re always converted to the <strong>pointers<\/strong>. So here we directly used pointers.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Let&#8217;s understand with an example \u2014&nbsp; suppose we want to store 5 students&#8217; marks for some calculation. Marks are integer types, so we can declare variables something like this. If we declare it like above, it&#8217;ll be very difficult for us to manipulate such data. What if students are increasing, then it is very difficult <a href=\"https:\/\/www.sololearn.com\/blog\/c-plus-plus-array\/\" class=\"more-link\">&#8230;<span class=\"screen-reader-text\">  Introduction to C++ Array<\/span><\/a><\/p>\n","protected":false},"author":7,"featured_media":2113,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[33],"tags":[],"_links":{"self":[{"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/posts\/1746"}],"collection":[{"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/users\/7"}],"replies":[{"embeddable":true,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/comments?post=1746"}],"version-history":[{"count":12,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/posts\/1746\/revisions"}],"predecessor-version":[{"id":2482,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/posts\/1746\/revisions\/2482"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/media\/2113"}],"wp:attachment":[{"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/media?parent=1746"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/categories?post=1746"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/tags?post=1746"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}