{"id":1466,"date":"2021-11-03T09:17:00","date_gmt":"2021-11-03T09:17:00","guid":{"rendered":"https:\/\/blog-dev.sololearn.com\/2022\/11\/03\/deep-dive-into-node-js\/"},"modified":"2023-03-30T17:24:57","modified_gmt":"2023-03-30T17:24:57","slug":"deep-dive-into-node-js","status":"publish","type":"post","link":"https:\/\/www.sololearn.com\/blog\/deep-dive-into-node-js\/","title":{"rendered":"Deep Dive Into Node.js"},"content":{"rendered":"\n<p><a href=\"https:\/\/www.sololearn.com\/learning\/1024\"><span style=\"font-weight: 400;\">JavaScript<\/span><\/a><span style=\"font-weight: 400;\"> has risen to prominence over the past decade especially, as the features and tools it offers are ideally designed for modern web development (among many other use cases). JavaScript\u2019s combination of speed, accessibility, and a massive developer base worldwide has led to a rising number of tools based in the language. And perhaps the most popular tool in that set is <\/span><a href=\"https:\/\/www.sololearn.com\/Blog\/55\/what-is-node-js-an-essential-tool-for-javascript-coders\/\"><span style=\"font-weight: 400;\">Node.js<\/span><\/a><span style=\"font-weight: 400;\">.<\/span><\/p>\n\n\n\n<p><span style=\"font-weight: 400;\">Why all the hype around <\/span><a href=\"https:\/\/nodejs.org\/\" target=\"_blank\" rel=\"noopener\"><span style=\"font-weight: 400;\">Node.js<\/span><\/a><span style=\"font-weight: 400;\">? A package of tools written primarily in JavaScript, including Google\u2019s V8 JavaScript engine, the libuv platform abstraction layer, and a core library, Node.js was specifically designed for developers as a tool for working in the non-blocking, event-driven I\/O paradigm. In simpler terms, Node.js was designed to shine specifically in real-time web applications which employ push technology.&nbsp;<\/span><\/p>\n\n\n\n<p><span style=\"font-weight: 400;\">As apps become more and more real-time (with information refreshing in margins of seconds, as opposed to the minutes and longer of the Internet of the past), solutions for building these types of apps become equally more and more important. That\u2019s why Node.js continues to draw loyal developers, and offer a robust solution for modern programming challenges and needs. But to know why it\u2019s such a useful asset for your <\/span><a href=\"https:\/\/www.sololearn.com\/\"><span style=\"font-weight: 400;\">programming knowledge<\/span><\/a><span style=\"font-weight: 400;\">, you need to know what Node.js includes, and what it can do. That\u2019s where this guide can help.<\/span><\/p>\n\n\n\n<figure class=\"wp-block-image\"><img decoding=\"async\" src=\"https:\/\/api.sololearn.com\/Uploads\/Deep_Dive_Into_Node_js_blog_02.jpg\" alt=\"Deep Dive Into Node.js\"\/><\/figure>\n\n\n\n<h2 class=\"wp-block-heading\"><strong>Why Was Node.js Initially Developed?&nbsp;<\/strong><\/h2>\n\n\n\n<p><span style=\"font-weight: 400;\">After years and years of stateless-web (founded on the stateless request-response paradigm), modern web applications are now more and more real-time, two-way connections. In simpler terms, these are cases where both the server and client can initiate communication, allowing for a more free data exchange. This is very different to the historical stateless web response paradigm, where the client always initiates communication. Additionally, it\u2019s all based on the open web stack.<\/span><\/p>\n\n\n\n<p><span style=\"font-weight: 400;\">Many people point to tools like Java Applets and Flash as examples of how this type of functionality has existed for years. However, those tools were actually just sandboxed environments using the web as a transport protocol to be delivered to the client. Additionally, they were run in isolation and often operated over non-standard ports, which may have required extra permissions and other annoying hurdles to jump through.<\/span><\/p>\n\n\n\n<p><span style=\"font-weight: 400;\">As a result of its aforementioned advantages (and this new web paradigm), Node.js now plays a critical role in the technology stack of many high-profile companies who depend on its unique benefits.&nbsp;<\/span><\/p>\n\n\n\n<h2 class=\"wp-block-heading\"><strong>How Does Node.js Work?&nbsp;<\/strong><\/h2>\n\n\n\n<p><span style=\"font-weight: 400;\">Simply put, Node.js fills a very specific and essential need in modern web development. For example, Node.js is not ideal for CPU-intensive operations, which actually removes most of the advantages it offers programmers. Instead, Node.js is ideal for building fast and scalable network applications (scalability, which allows software to function optimally on a variety of systems, is also an essential element of modern web development). This is due to its ability to handle a huge amount of simultaneous connections via high throughput. Put another way, Node.js can help you manage intense surges of real-time traffic and server requests.<\/span><\/p>\n\n\n\n<p><span style=\"font-weight: 400;\">So what does the actual nuts and bolts of this functionality look like? Well, compared to traditional web-serving techniques where every connection (or request) generates a new thread, which thus chews up <a href=\"https:\/\/www.sololearn.com\/blog\/what-is-ram\/\" data-type=\"post\" data-id=\"2649\">system RAM<\/a> and eventually maxes out at the amount of RAM available, Node.js operates on a single-thread, using non-blocking I\/O calls. This allows Node.js to support thousands upon thousands of concurrent connections held within the event loop.<\/span><\/p>\n\n\n\n<p><span style=\"font-weight: 400;\">One potential downside of writing Node.js applications is the potential of sharing a single thread between all clients requests. This is problematic because heavy computation could clog up Node\u2019s single thread and cause problems for all of the clients, as incoming requests would be blocked until this computation was completed. Fortunately, the rapidly growing Node.js developer community has already generated a variety of useful tools to solve this issue (as well as others that have emerged).<\/span><\/p>\n\n\n\n<h2 class=\"wp-block-heading\"><strong>What Should You Know About The Node Package Manager (NPM)?<\/strong><\/h2>\n\n\n\n<p><span style=\"font-weight: 400;\">One of the most popular and useful elements of Node.js is the standard built-in support for package management using NPM, which is included by default with any Node.js installation. Very similar to the idea of Ruby Gems, NPM offers programmers a set of publicly available and&nbsp; reusable components. These are all available through easy installation via an online repository, and come along with version and dependency management.<\/span><\/p>\n\n\n\n<p><span style=\"font-weight: 400;\">Some of the most useful npm modules today are:<\/span><\/p>\n\n\n\n<ul>\n<li><a href=\"http:\/\/expressjs.com\/\" target=\"_blank\" rel=\"noopener\"><span style=\"font-weight: 400;\">express<\/span><\/a><span style=\"font-weight: 400;\"> &#8211; otherwise known as Express.js, this tool is a Sinatra-inspired web development framework for Node.js, and the go-to standard for the majority of Node.js applications in use on the modern web (including by some of the biggest names in software)<\/span><\/li>\n\n\n\n<li><a href=\"http:\/\/socket.io\/\" target=\"_blank\" rel=\"noopener\"><span style=\"font-weight: 400;\">socket.io<\/span><\/a><span style=\"font-weight: 400;\"> and <\/span><a href=\"https:\/\/github.com\/sockjs\" target=\"_blank\" rel=\"noopener\"><span style=\"font-weight: 400;\">sockjs<\/span><\/a><span style=\"font-weight: 400;\"> &#8211; Server-side component of the two most common websockets components in use today<\/span><\/li>\n\n\n\n<li><span style=\"font-weight: 400;\">lodash (underscore, lazy.js) &#8211; This is your standard JavaScript utility belt (and there are several to choose from)<\/span><\/li>\n\n\n\n<li><span style=\"font-weight: 400;\">hapi &#8211; hapi is a configuration-centric framework for building web and services applications, which is gaining popularity because of its ease-of-use<\/span><\/li>\n\n\n\n<li><span style=\"font-weight: 400;\">moment &#8211; A JavaScript date library for parsing, validating, manipulating, and formatting dates<\/span><\/li>\n\n\n\n<li><a href=\"http:\/\/www.senchalabs.org\/connect\/\" target=\"_blank\" rel=\"noopener\"><span style=\"font-weight: 400;\">connect<\/span><\/a><span style=\"font-weight: 400;\"> &#8211; as an HTTP server framework, this offers a collection of high performance \u201cplugins\u201d known as middleware, which functions as a base for Express<\/span><\/li>\n\n\n\n<li><span style=\"font-weight: 400;\">pug (formerly Jade) &#8211; One of the more popular templating engines, inspired by HAML, as well as a default in Express<\/span><\/li>\n\n\n\n<li><a href=\"https:\/\/npmjs.org\/package\/mongodb\" target=\"_blank\" rel=\"noopener\"><span style=\"font-weight: 400;\">mongodb<\/span><\/a><span style=\"font-weight: 400;\"> and <\/span><a href=\"https:\/\/github.com\/gett\/mongojs\" target=\"_blank\" rel=\"noopener\"><span style=\"font-weight: 400;\">mongojs<\/span><\/a><span style=\"font-weight: 400;\"> &#8211; MongoDB wrappers to provide the API for MongoDB object databases in Node.js.<\/span><\/li>\n\n\n\n<li><a href=\"https:\/\/github.com\/mranney\/node_redis\" target=\"_blank\" rel=\"noopener\"><span style=\"font-weight: 400;\">redis<\/span><\/a><span style=\"font-weight: 400;\"> &#8211; Redis client library.<\/span><\/li>\n\n\n\n<li><a href=\"https:\/\/npmjs.org\/package\/forever\" target=\"_blank\" rel=\"noopener\"><span style=\"font-weight: 400;\">forever<\/span><\/a><span style=\"font-weight: 400;\"> &#8211; Probably the most common utility for ensuring that a given node script runs continuously. This is essential for keeping a Node.js production upright during specific bugs and failures<\/span><\/li>\n\n\n\n<li><span style=\"font-weight: 400;\">bluebird &#8211; A full featured Promises\/A+ implementation with exceptionally good performance<\/span><\/li>\n<\/ul>\n\n\n\n<p><span style=\"font-weight: 400;\">There are tons and tons more tools available, and more being added by the global JavaScript community every day. Like any good and popular language, the more bugs and issues that are found, the more solutions are developed to solve them for you.<\/span><\/p>\n\n\n\n<h2 class=\"wp-block-heading\"><strong>What Are Some Popular Use Cases For Node.js?<\/strong><\/h2>\n\n\n\n<h3 class=\"wp-block-heading\"><strong>Queued Inputs&nbsp;<\/strong><\/h3>\n\n\n\n<p><span style=\"font-weight: 400;\">In the case where you may be intaking a high amount of concurrent data, your database can become a bottleneck. Fortunately, Node.js can easily handle concurrent connections themselves. However, since database access can be a blocking operation, this can cause trouble on the back-end. The solution is to acknowledge the client\u2019s behavior before the data is truly written to the database.<\/span><\/p>\n\n\n\n<p><span style=\"font-weight: 400;\">With that approach, the system maintains its responsiveness even when being taxed by a heavy load. This is particularly useful when the client doesn\u2019t need firm confirmation of a successful data write. This might include situations like the logging or writing of user-tracking data, processed in batches and not used until a later time; as well as operations that don\u2019t need to be reflected instantly (like updating a \u2018Likes\u2019 count on Facebook) where eventual consistency is acceptable.<\/span><\/p>\n\n\n\n<p><span style=\"font-weight: 400;\">Data gets queued through a cacheing or message queuing infrastructure and subsequently digested by a separate database batch-write process, or computation intensive processing backend services, written in a better performing platform for such tasks. While other languages and frameworks can perform similar behavior, the hardware is not the same, and Node.js does it more efficiently and reliably.<\/span><\/p>\n\n\n\n<h3 class=\"wp-block-heading\"><strong>Chat&nbsp;<\/strong><\/h3>\n\n\n\n<p><span style=\"font-weight: 400;\">Chat is the most common real-time, multi-user application where Node.js is often employed. The chat application is really the ideal example for the benefits Node.js offers, since it\u2019s a lightweight, high traffic, data-intensive (but low processing\/computation) application that runs across distributed devices. For those of you who are just <\/span><a href=\"https:\/\/www.sololearn.com\/Courses\/\"><span style=\"font-weight: 400;\">beginning to learn<\/span><\/a><span style=\"font-weight: 400;\"> Node.js, this is also a great place to learn the ins and outs, since chat is simple but also covers most of the paradigms you\u2019d ever use in any typical Node.js application.<\/span><\/p>\n\n\n\n<h3 class=\"wp-block-heading\"><strong>Data Streaming&nbsp;<\/strong><\/h3>\n\n\n\n<p><span style=\"font-weight: 400;\">In more traditional web platforms, HTTP requests and responses are often handled like isolated events, while in actuality they\u2019re streams. This observation can be utilized in Node.js to build some cool features, such as processing files while they\u2019re still being uploaded (since the data comes in through a stream and thus can be processed in an online fashion). This is particularly useful in the case of real-time audio or video encoding, and proxying between different data sources.<\/span><\/p>\n\n\n\n<h3 class=\"wp-block-heading\"><strong>Proxy&nbsp;<\/strong><\/h3>\n\n\n\n<p><span style=\"font-weight: 400;\">Speaking of proxying, Node.js is easily employed as a server-side proxy, where it can tackle a significant amount of simultaneous connections in a non-blocking manner. It\u2019s particularly useful for proxying different services with different response times, or for collecting data from multiple source points.<\/span><\/p>\n","protected":false},"excerpt":{"rendered":"<p>JavaScript has risen to prominence over the past decade especially, as the features and tools it offers are ideally designed for modern web development (among many other use cases). JavaScript\u2019s combination of speed, accessibility, and a massive developer base worldwide has led to a rising number of tools based in the language. And perhaps the <a href=\"https:\/\/www.sololearn.com\/blog\/deep-dive-into-node-js\/\" class=\"more-link\">&#8230;<span class=\"screen-reader-text\">  Deep Dive Into Node.js<\/span><\/a><\/p>\n","protected":false},"author":7,"featured_media":1465,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[35],"tags":[21],"_links":{"self":[{"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/posts\/1466"}],"collection":[{"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/users\/7"}],"replies":[{"embeddable":true,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/comments?post=1466"}],"version-history":[{"count":3,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/posts\/1466\/revisions"}],"predecessor-version":[{"id":2654,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/posts\/1466\/revisions\/2654"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/media\/1465"}],"wp:attachment":[{"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/media?parent=1466"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/categories?post=1466"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/tags?post=1466"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}