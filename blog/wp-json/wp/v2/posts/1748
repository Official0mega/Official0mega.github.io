{"id":1748,"date":"2022-11-18T17:31:04","date_gmt":"2022-11-18T17:31:04","guid":{"rendered":"https:\/\/blog-dev.sololearn.com\/?p=1748"},"modified":"2023-03-04T02:07:12","modified_gmt":"2023-03-04T02:07:12","slug":"java-data-types","status":"publish","type":"post","link":"https:\/\/www.sololearn.com\/blog\/java-data-types\/","title":{"rendered":"Java Data Types: The Complete Guide To Get You Started"},"content":{"rendered":"\n<p>Java provides a variety of data types for the developers to choose from. It enables flexible and <a href=\"https:\/\/www.sololearn.com\/blog\/best-ides-for-java\/\" data-type=\"post\" data-id=\"2390\">easy data manipulation in a program<\/a>. A data type of a <em>variable <\/em>tells the compiler the type of value allowed to be stored in it and also defines the size in the memory location.\u00a0<\/p>\n\n\n\n<p>Defining the data type of a variable has a lot of technical benefits. It becomes convenient for the developer to allocate possible values and perform allowed operations on it, which in turn results in less programming errors and bugs.<\/p>\n\n\n\n<p>For example, a variable created with numeric data type cannot store any alphabetic value. In this case, the developer is restricted to store a numeric value in the variable. If the developer mistakenly tries to store an alphabetic value to a numeric data type, the compiler will not allow it to do so. It will ensure an error free program execution at the end.&nbsp;<\/p>\n\n\n\n<p>If you want to learn about the introduction, you can visit the following URL<\/p>\n\n\n\n<p><a href=\"http:\/\/www.sololearn.com\/learn\/courses\/java-introduction\">www.sololearn.com\/learn\/courses\/java-introduction<\/a><\/p>\n\n\n\n<h2 class=\"wp-block-heading\"><strong>Data Types<\/strong><\/h2>\n\n\n\n<p>There are two categories of data types in Java, called <em>primitive <\/em>and <em>non &#8211; primitive<\/em>.\u00a0<\/p>\n\n\n\n<h3 class=\"wp-block-heading\"><strong>Primitive&nbsp;<\/strong><\/h3>\n\n\n\n<p>The primitive category provides very basic data types for the variables. There are eight types available in Java.&nbsp;<\/p>\n\n\n\n<ul>\n<li><strong>int<\/strong>&nbsp;<\/li>\n<\/ul>\n\n\n\n<p>It is used to store whole numbers ranging from -128 to 127. For example, if we want to store a whole number 5, the following line of code will do the trick<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"java\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">int x = 5;<\/pre>\n\n\n\n<p>The size of this variable in memory will be 4 bytes.<\/p>\n\n\n\n<ul>\n<li><strong>float<\/strong>&nbsp;<\/li>\n<\/ul>\n\n\n\n<p>It is used to store fractional numbers up to 7 decimal digits, ranging from 1.40129846432481707e-45 to 3.40282346638528860e+38 (positive or negative). A float value can be stored as follows<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"java\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">float x = 5.5555555f; <\/pre>\n\n\n\n<p>The size in the memory will be 4 bytes.<\/p>\n\n\n\n<ul>\n<li><strong>double<\/strong>&nbsp;<\/li>\n<\/ul>\n\n\n\n<p>It stores fractional numbers up to 15 decimal digits, ranging from 4.94065645841246544e-324d to 1.79769313486231570e+308d (positive or negative).<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"java\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">double x = 55.555;<\/pre>\n\n\n\n<p>The size in the memory will be 8 bytes.<\/p>\n\n\n\n<ul>\n<li><strong>short<\/strong>&nbsp;<\/li>\n<\/ul>\n\n\n\n<p>It used to store whole numbers and the range is -32,768 to 32,767.<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"java\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">short x = 555;<\/pre>\n\n\n\n<p>The size in the memory will be 2 bytes.<\/p>\n\n\n\n<ul>\n<li><strong>long<\/strong><\/li>\n<\/ul>\n\n\n\n<p>It is used to store whole numbers and the range is -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807.<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"java\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">long x = 5555;<\/pre>\n\n\n\n<p>The size in the memory will be 8 bytes.<\/p>\n\n\n\n<ul>\n<li><strong>char<\/strong><\/li>\n<\/ul>\n\n\n\n<p>It is used to store alphabetic character.<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"java\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">char x = a;<\/pre>\n\n\n\n<p>The size in the memory will be 2 bytes.<\/p>\n\n\n\n<ul>\n<li><strong>byte<\/strong><\/li>\n<\/ul>\n\n\n\n<p>Used to store whole numbers ranging from -128 to 127<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"java\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">byte x = 11;<\/pre>\n\n\n\n<p>The size in the memory will be 1 byte.<\/p>\n\n\n\n<ul>\n<li><strong>boolean<\/strong>&nbsp;<\/li>\n<\/ul>\n\n\n\n<p>It is used to store true or false value.<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"java\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">boolean x = true;<\/pre>\n\n\n\n<p>The size in the memory will be 1 bit.<\/p>\n\n\n\n<p>Let us start with a simple example of adding two numbers and showing their result.&nbsp;<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"java\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">int firstNumber = 2;\nint secondNumber = 3;<\/pre>\n\n\n\n<p>In the above lines, we created two variables firstNumber and secondNumber containing integer values 2 and 3 respectively.&nbsp;<\/p>\n\n\n\n<p>Now we will do manipulation on our two variables. We will add them.<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"java\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">int sum = firstNumber + secondNumber;<\/pre>\n\n\n\n<p>We added the variables and stored the result in a new variable sum having the same data type int. In this case, the sum will contain 5.<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"java\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">public class Program {\n\tpublic static void main(String[] args) {\n\t\tint firstNumber = 2;\n\t\tint secondNumber = 3;\n\t\tint sum = firstNumber + secondNumber;\n\t\tSystem.out.println(sum);\n\t}\n\n}<\/pre>\n\n\n\n<p>You can do coding by yourself to understand the concept. The following URL provides an online compiler.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\"><strong>Non &#8211; primitive<\/strong><\/h3>\n\n\n\n<p>These data types are created by the developers. Unlike primitive ones, these are not pre-defined in Java. A non &#8211; primitive data type is also called a <em>reference <\/em>type. The reason being it always refers to an <em>object.<\/em><\/p>\n\n\n\n<p>Now what is an object? An object is a collection of multiple primitive data types and some useful <em>functions <\/em>or<em> methods<\/em>. These functions are capable of performing computations. For example, we can say that a car is an object. We can map its features, price and number of seats as primitive data types and driving as a useful function.<\/p>\n\n\n\n<p>Now let us discuss the memory location of this reference data type. Let us take the example of the car. When a developer creates an object car in the application, the program creates two things in the memory. One is the reference and the other is the object car to which this reference points to. The reference is created in the <em>heap <\/em>memory. The object car is created in <em>stack <\/em>memory.<\/p>\n\n\n\n<ul>\n<li><strong>String<\/strong><\/li>\n<\/ul>\n\n\n\n<p>A string data type contains a sequence of characters surrounded by double quotes. It is used to store names and alphabetic values. For example, to store username and password in a login application, the developer can create the following strings<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"java\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">String username = \u201cnew user\u201d;\nString password = \u201cuser password\u201d;<\/pre>\n\n\n\n<ul>\n<li><strong>Array<\/strong><\/li>\n<\/ul>\n\n\n\n<p>It is a collection of a same data type. Each member of the array can be accessed using the <em>index <\/em>technique. Suppose a developer wants to store a list of odd numbers. He or she will create an array as follows<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"java\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">int[] oddNumbers = {\n\t1,\n\t3,\n\t5,\n\t7,\n\t9,\n\t11\n};<\/pre>\n\n\n\n<p>Each member of the array is called an <em>element<\/em>. The first element of the array can be accessed by the following line of code.<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"java\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">System.out.println(oddNumbers[0]);<\/pre>\n\n\n\n<p>In the similar way, a developer can access any element of the array using the index technique. The output of the above line of code on the console will be 1.<\/p>\n\n\n\n<p>If a developer wishes to know about the length of the array, he or she can do so by the following line of code.<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"java\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">System.out.println(oddNumbers.length);<\/pre>\n\n\n\n<p>The output on the console will be 6 for the following code for instance: <\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"java\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">public class Program {\n\tpublic static void main(String[] args) {\n\t\tint[] oddNumbers = {\n\t\t\t1,\n\t\t\t3,\n\t\t\t5,\n\t\t\t7,\n\t\t\t9,\n\t\t\t11\n\t\t};\n\t\tSystem.out.println(oddNumbers[0]);\n\t\tSystem.out.println(oddNumbers.length);\n\t}\n\n}<\/pre>\n\n\n\n<ul>\n<li><strong>Class<\/strong><\/li>\n<\/ul>\n\n\n\n<p>A class in Java provides all the necessary details required to create an object. A class contains data members and functions\/methods. It serves as a blueprint for the object.<\/p>\n\n\n\n<p>For example, a developer is creating an application for car leasing. He or she will create a class containing the data members car model, company name and car price. The methods or functions of the class can be driving, monthly installment and insurance plan.<\/p>\n\n\n\n<p>The car model and company name will be string data type, whereas the price will be float. In the driving function, the developer can write code for implementing different driving rules for the car. The monthly installment plan function can include code for calculating monthly installment the customer has to pay. The insurance plan function will include calculations for the insurance of the car.<\/p>\n\n\n\n<p>The following lines of code will create a class car having all the above discussed details<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"java\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">public class car {\n\tString companyName;\n\tString modelName;\n\tfloat price;\n\tpublic void driving() {\n\t\t\/\/ lines of code\n\t}\n\n\tpublic void calculateMonthlyInstalment() {\n\t\t\/\/lines of code\n\n\t}\n\n\tpublic void calculateInsurance() {\n\t\t\/\/lines of code\n\t}\n\n}<\/pre>\n\n\n\n<ul>\n<li><strong>Interface<\/strong><\/li>\n<\/ul>\n\n\n\n<p>It is similar to a class. It also contains data members and methods. One difference is that the methods or functions do not contain any coding logic. The logic of these functions can be implemented by other classes.&nbsp;<\/p>\n\n\n\n<p>Let us take the previous example of the car. Suppose a developer wants to create a method that builds different model names for different car companies. Some companies might like to include date of manufacturing in the model name, others might like to include a specific code in the model name. So in this case, the class car can contain a method called buildModelName() which will not contain any logic.&nbsp;<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"java\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">interface car {\n\tString modelName;\n\tfloat price;\n\tpublic void buildModelName();\n}<\/pre>\n\n\n\n<p>This interface can be implemented by other classes.<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"java\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">class xyz implements car {\n\tpublic void buildModelName() {\n\t\t\/\/ logic for building model name including date of manufacturing\n\t}\n}\n\nclass abc implements car {\n\tpublic void buildModelName() {\n\t\t\/\/ logic for building model name including specific code\n\t}\n}<\/pre>\n\n\n\n<p>In this way, interface car is providing abstraction.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\"><strong>Type of variable (Primitive and Non &#8211; Primitive)<\/strong><\/h2>\n\n\n\n<p>Sometimes in a program, there comes many scenarios when a developer needs to check the type of a variable. For example, suppose a program checks input given by the end-user (end-user is the person who uses the software). Suppose a program checks whether the input type is numeric or alphabetic. In this case, a developer has to code to identify the type.<\/p>\n\n\n\n<p>There are two functions a developer can use to identify the type of a variable<\/p>\n\n\n\n<p>getClass() this method is of class Object in Java. It fetches the details of the class of the variable.<\/p>\n\n\n\n<p>getSimpleName() it fetches the name of the class for which I is being called.<\/p>\n\n\n\n<p>To check the type of a primitive variable, the following line of code will do the trick<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"java\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">long a;\n\nSystem.out.println(((Object)a).getClass().getSimpleName());<\/pre>\n\n\n\n<p>A developer has to cast the variable a to Object because this method is written for reference type variables.<\/p>\n\n\n\n<p>For non \u2013 primitive, the following code will be used<\/p>\n\n\n\n<p>car c = new car(); \/\/ object of class car from our above example<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"java\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">System.out.println(c.getClass().getSimpleName());<\/pre>\n\n\n\n<p>If you wish to learn Java at the intermediate level, you can check the following URL<\/p>\n\n\n\n<p><a href=\"http:\/\/www.sololearn.com\/learn\/courses\/java-intermediate\">www.sololearn.com\/learn\/courses\/java-intermediate<\/a><\/p>\n\n\n\n<p><strong>Conclusion<\/strong><\/p>\n\n\n\n<p>In this blog, we have learnt about the main data types in Java. Primitive data types are pre &#8211; defined in the language whereas non &#8211; primitive are created by the developers. These are actually reference types and they refer to an object. An object is a collection of data members and computational functions. A developer can make comprehensive and useful programs and applications using an object or more than one object. Multiple objects can interact with each other and it will result in a comprehensive and scalable application.&nbsp;<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Java provides a variety of data types for the developers to choose from. It enables flexible and easy data manipulation in a program. A data type of a variable tells the compiler the type of value allowed to be stored in it and also defines the size in the memory location.\u00a0 Defining the data type <a href=\"https:\/\/www.sololearn.com\/blog\/java-data-types\/\" class=\"more-link\">&#8230;<span class=\"screen-reader-text\">  Java Data Types: The Complete Guide To Get You Started<\/span><\/a><\/p>\n","protected":false},"author":7,"featured_media":2122,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[35,31],"tags":[],"_links":{"self":[{"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/posts\/1748"}],"collection":[{"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/users\/7"}],"replies":[{"embeddable":true,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/comments?post=1748"}],"version-history":[{"count":3,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/posts\/1748\/revisions"}],"predecessor-version":[{"id":2465,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/posts\/1748\/revisions\/2465"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/media\/2122"}],"wp:attachment":[{"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/media?parent=1748"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/categories?post=1748"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/tags?post=1748"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}