{"id":2402,"date":"2023-02-25T04:50:52","date_gmt":"2023-02-25T04:50:52","guid":{"rendered":"https:\/\/www.sololearn.com\/blog\/?p=2402"},"modified":"2023-02-25T04:55:28","modified_gmt":"2023-02-25T04:55:28","slug":"what-is-dom","status":"publish","type":"post","link":"https:\/\/www.sololearn.com\/blog\/what-is-dom\/","title":{"rendered":"What is DOM?"},"content":{"rendered":"\n<p>In the early days of your web development career, you\u2019ll hear many technical terms. You may not understand most of them. For example, you may have heard about DOM. But do you know what DOM is?<\/p>\n\n\n\n<p>It is one of the most important concepts for web developers. Most importantly, it is the key structure that everything is based on. In this article, you can learn everything about DOM. So, without any further ado, let\u2019s dive in.&nbsp;<\/p>\n\n\n\n<h2 class=\"wp-block-heading\"><strong>What is DOM?<\/strong><\/h2>\n\n\n\n<p>DOM abbreviates Document Object Model. DOM is the thing that decides the internal representation of a web page. Also, it decides how elements like headings, paragraphs, etc relate to each other.&nbsp;<\/p>\n\n\n\n<p>Now, let\u2019s understand each word of the abbreviation.&nbsp;<\/p>\n\n\n\n<h3 class=\"wp-block-heading\"><strong>Document<\/strong><\/h3>\n\n\n\n<p>A simple document is a collection of structured information. For example articles, books, or insurance papers are all documents. However, for web developers, a web page is a document. And the DOM is a model that structures the web page.&nbsp;<\/p>\n\n\n\n<p><strong>Do you know? <\/strong>DOM considers all the stuff on a web page as objects.&nbsp;<\/p>\n\n\n\n<h3 class=\"wp-block-heading\"><strong>Object<\/strong><\/h3>\n\n\n\n<p>An object is anything that is displayed on the web page. But developers normally refer to objects as elements or nodes. So, don\u2019t get confused if you hear these terms.&nbsp;<\/p>\n\n\n\n<p>Some of the objects you may use on a web page are:<\/p>\n\n\n\n<h4 class=\"wp-block-heading\"><strong>Content&nbsp;<\/strong><\/h4>\n\n\n\n<p>Videos, images, or even words are part of content objects. And of course, you\u2019ll use at least one of them on your web page.&nbsp;<\/p>\n\n\n\n<h4 class=\"wp-block-heading\"><strong>Structural elements&nbsp;<\/strong><\/h4>\n\n\n\n<p>These objects are not displayed on the page. But they play a vital role in giving shape to your website. Some of the structural elements are divs, containers, and sections.&nbsp;<\/p>\n\n\n\n<h4 class=\"wp-block-heading\"><strong>Attributes&nbsp;<\/strong><\/h4>\n\n\n\n<p>Attributes are part of the DOM. But they\u2019re not treated like content and structural elements, because all elements have attributes like style or size.&nbsp;<\/p>\n\n\n\n<h2 class=\"wp-block-heading\"><strong>Model<\/strong><\/h2>\n\n\n\n<p>A model is a plan for the representation of something like a building or vehicle. It helps us understand how we\u2019ll put it together. You can find models for many things that are under planning. For example, blueprints, floor plans, and IKEA instructions are all models. They have enough details about the object that we\u2019re easily able to recreate them.<\/p>\n\n\n\n<p>The same goes for the model in the DOM, as it acts as a set of instructions for web browsers.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\"><strong>How Does the DOM Treat HTML?<\/strong><\/h2>\n\n\n\n<p>DOM sees any HTML document as a tree of nodes. Where node is an HTML element like a heading or paragraph.&nbsp;<\/p>\n\n\n\n<p>The main HTML file is called the root node which further contains a child node &lt;html&gt;. And within the &lt;html&gt; there are two more child nodes: &lt;head&gt; and &lt;body&gt;.&nbsp;<\/p>\n\n\n\n<p><strong>Keep in mind: <\/strong>The actual work begins in the head and body tag. But we must respect the general document structure to get perfect results.<\/p>\n\n\n\n<p>The head and body tags\/elements can contain their own multiple elements. And to access them from the website we can use JavaScript. Let\u2019s find out how you can do that.&nbsp;<\/p>\n\n\n\n<h2 class=\"wp-block-heading\"><strong>Selecting Elements in the DOM<\/strong><\/h2>\n\n\n\n<p>You can access elements from your HTML document by using the following methods:<\/p>\n\n\n\n<ul>\n<li>getElementById()<\/li>\n\n\n\n<li>querySelector()<\/li>\n\n\n\n<li>querySelectorAll()<\/li>\n<\/ul>\n\n\n\n<h3 class=\"wp-block-heading\"><strong>getElementById()&nbsp;<\/strong><\/h3>\n\n\n\n<p>Ids are unique identifiers for your HTML elements. This means that you cannot give the same id name to two different elements.<\/p>\n\n\n\n<p>For instance, you may have two paragraphs, but you want them to have two different colors. What will you do? You\u2019ll assign them two different id names. It will allow you to style both paragraphs differently.<\/p>\n\n\n\n<p>Let\u2019s understand id with code.&nbsp;<\/p>\n\n\n\n<p>This would be incorrect:<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">&lt;p id=\"para\">I\u2019m writing a paragraph.&lt;\/p>\n\n&lt;p id=\"para\">I\u2019m writing another paragraph.&lt;\/p><\/pre>\n\n\n\n<p>Here\u2019s your correct code:<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">&lt;p id=\"para1\">I\u2019m writing a paragraph.&lt;\/p>\n\n&lt;p id=\"para2\">I\u2019m writing another paragraph.&lt;\/p><\/pre>\n\n\n\n<p>Now, let\u2019s try to grab ids using JavaScript.&nbsp;<\/p>\n\n\n\n<p>To link JavaScript with an id, use the following code:<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">document.getElementById(\"id name goes here\")<\/pre>\n\n\n\n<p>This code tells the computer to get the &lt;p&gt; element with the id of para1 and print the element to the console.<\/p>\n\n\n\n<p>The following code will get the paragraph with the id \u201cpara1\u201d and print it to the console.&nbsp;<\/p>\n\n\n\n<p><strong>Note:<\/strong> A console is a tool in the browser that logs information like network requests and errors. You can find the console by pressing \u201c<em>ctrl+shift+I<\/em>\u201d.&nbsp;<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">const p1 = document.getElementById(\"para1\");\n\nconsole.log(p1);<\/pre>\n\n\n\n<p>This code will print the whole element. But if you just wish to see the text then you can use the textContent property in console.log().&nbsp;<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">const p1 = document.getElementById(\"para1\");\n\nconsole.log(p1.textContent);<\/pre>\n\n\n\n<p><strong>Fun fact:<\/strong> The console is like a playground for developers. They test and solve most of their problems using the console.&nbsp;&nbsp;<\/p>\n\n\n\n<h3 class=\"wp-block-heading\"><strong>querySelector()<\/strong><\/h3>\n\n\n\n<p>In the querySelector() you give the name of an HTML element or CSS property (class or id). According to the given name, it will store the value of the first matching element.<\/p>\n\n\n\n<p>In terms of ids, you\u2019re going to get only one answer, since we don\u2019t use multiple ids. But if you\u2019re using multiple &lt;p&gt; tags or the same class name, you\u2019ll get only the first answer using querySelector().&nbsp;<\/p>\n\n\n\n<p>Let me clear up any confusion with this example:&nbsp;<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">&lt;h1>Favorite TV shows&lt;\/h1>\n\n&lt;ul class=\"list\">\n\n\u00a0\u00a0&lt;li>Big Bang Theory&lt;\/li>\n\n\u00a0\u00a0&lt;li>Friends&lt;\/li>\n\n\u00a0\u00a0&lt;li>Mind your language&lt;\/li>\n\n\u00a0\u00a0&lt;li>The Crown&lt;\/li>\n\n&lt;\/ul><\/pre>\n\n\n\n<p>If you wish to find h1 from the above code you can just throw the tag name inside the querySelector. And you can also print it using the console.log() method.&nbsp;<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">const h1Element = document.querySelector(\"h1\");\n\nconsole.log(h1Element);<\/pre>\n\n\n\n<p>Even if you place multiple h1s in the code, you\u2019ll only get the first one.&nbsp;<\/p>\n\n\n\n<p><strong>Remember: <\/strong>You cannot use any HTML element names as variables.&nbsp;<\/p>\n\n\n\n<p>Now, again look at the HTML code. You\u2019ll see that I have declared a class=\u201dlist\u201d inside the &lt;ul&gt;. It means you can access it either using the class or the tag. You can practice the tag by yourself, but here we\u2019ll play with the class.&nbsp;<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">const list = document.querySelector(\".list\");\n\nconsole.log(list);<\/pre>\n\n\n\n<p>Your confusion is valid if you\u2019re thinking about my variable name. We cannot use HTML element names as variables. But if we\u2019re using something named by us like id or class then there is no issue using the same name for a variable.<\/p>\n\n\n\n<p>This technique will help you a lot when your code grows larger.&nbsp;<\/p>\n\n\n\n<h3 class=\"wp-block-heading\"><strong>querySelectorAll()<\/strong><\/h3>\n\n\n\n<p>querySelectorAll() is similar to querySelector(). The only difference is that querySelectorAll() shows all the matching answers.<\/p>\n\n\n\n<p>For example, let\u2019s try printing list items from the same example.&nbsp;&nbsp;<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">const myItems = document.querySelectorAll(\"ul > li\");\n\nconsole.log(myItems);<\/pre>\n\n\n\n<p>But there is a small problem here, the above code only displays ul as an object with a number of its elements. It doesn\u2019t display the list names.&nbsp;<\/p>\n\n\n\n<p>So, if you want to see the exact content of the list items then you can use the forEach loop. Here\u2019s how it works:<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">const myItems = document.querySelectorAll(\"ul > li\");\n\nmyItems.forEach((item) => {\n\n\u00a0\u00a0console.log(item);\n\n});<\/pre>\n\n\n\n<h2 class=\"wp-block-heading\"><strong>How to Add New Elements in DOM?<\/strong><\/h2>\n\n\n\n<p>So far we were just editing elements using JavaScript. But now we\u2019re going to create some new elements in the DOM using JS.&nbsp;&nbsp;<\/p>\n\n\n\n<p>For creating new elements you can use the document.createElement().<\/p>\n\n\n\n<p>Let\u2019s write some code to further understand the createElement().&nbsp;<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">&lt;h1>Web development is fun&lt;\/h1><\/pre>\n\n\n\n<p>This is the only line of my document right now. Now we will write some more HTML lines using JavaScript.&nbsp;<\/p>\n\n\n\n<p>Let\u2019s first create an unordered list and assign it to a variable.&nbsp;<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">let unorderedList = document.createElement(\"ul\");<\/pre>\n\n\n\n<p>The above line will not have any impact on the document. Unless you add the element in the document using the appendChild() method.&nbsp;<\/p>\n\n\n\n<p><strong>appendChild()<\/strong> is a method that will add a child node to a parent element.&nbsp;<\/p>\n\n\n\n<p>As the body is the parent element and unorder list is a child, our code will look like this:&nbsp;<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">document.body.appendChild(unorderedList);<\/pre>\n\n\n\n<p>The next step is to create a list of items, add text to items and add them to our document.<\/p>\n\n\n\n<p>Code for creating &lt;li&gt;:<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">let listItem1 = document.createElement(\"li\");\n\nlet listItem2 = document.createElement(\"li\");<\/pre>\n\n\n\n<p>Do you remember the textContent property that we used to get the text of an element? We can also use it to add text to the element. Here\u2019s how you can do that:<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">listItem1.textContent = \"It makes me crazy\";\n\nlistItem2.textContent = \"It\u2019s like an adventure\";<\/pre>\n\n\n\n<p>Now simply use the appendChild() method to add these list items in your &lt;ul&gt;.&nbsp;<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">unorderedList.appendChild(listItem1);\n\nunorderedList.appendChild(listItem2);<\/pre>\n\n\n\n<p>This is what the code looks like all together.<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">let unorderedList = document.createElement(\"ul\");\n\ndocument.body.appendChild(unorderedList);\n\nlet listItem1 = document.createElement(\"li\");\n\nlistItem1.textContent = \"It makes me crazy\";\n\nunorderedList.appendChild(listItem1);\n\nlet listItem2 = document.createElement(\"li\");\n\nlistItem2.textContent = \"It\u2019s like an adventure\";\n\nunorderedList.appendChild(listItem2);<\/pre>\n\n\n\n<h2 class=\"wp-block-heading\"><strong>How to Change the Style Property?&nbsp;<\/strong><\/h2>\n\n\n\n<p>The style property allows us to change the styling of HTML documents.&nbsp;<\/p>\n\n\n\n<p>To demonstrate an example, I\u2019m going to change the color of an h1 using the style property.<\/p>\n\n\n\n<p>Here\u2019s our HTML heading:<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">&lt;h1>Let\u2019s change my color&lt;\/h1><\/pre>\n\n\n\n<p>Use the querySelector() to grab the tag in JavaScript.&nbsp;<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">const heading1 = document.querySelector(\"h1\");<\/pre>\n\n\n\n<p>We then use heading1.style.color to change the text from black to green.<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">heading1.style.color = \"blue\";<\/pre>\n\n\n\n<p>You can use the style property to change more inline styles like background-color, border-style, or font-size.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\"><strong>How to Use addEventListener()?<\/strong><\/h2>\n\n\n\n<p>Editing the styles or elements is fun. But do you know what is more fun? Handling the events. An event can be anything that requires a reaction from your website. Like clicking a submit button.&nbsp;<\/p>\n\n\n\n<p>addEventListener() is a method that detects the event and responds accordingly. Let\u2019s see how it works.&nbsp;<\/p>\n\n\n\n<p>Here I have an HTML button with \u201cbtn\u201d as the id.&nbsp;<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">  &lt;button id=\"btn\">Click me&lt;\/button><\/pre>\n\n\n\n<p>Now we\u2019ll target this id by using the getElementById() method and assign it to a variable.&nbsp;<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">const button = document.getElementById(\"btn\");<\/pre>\n\n\n\n<p>The addEventListener() takes in an event type and a function. In our scenario, we\u2019re taking a click as the event and the function is an alert message.&nbsp;<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">button.addEventListener(\"click\", () => {\n\n\u00a0\u00a0alert(\"Thank you for clicking me\");\n\n});<\/pre>\n\n\n\n<p><strong>Final words&nbsp;<\/strong><\/p>\n\n\n\n<p>DOM is an independent interface. It allows us to create, change or delete elements from our HTML document. You can also add events using addEventListener() to make your page more dynamic.<\/p>\n\n\n\n<p>Keep in mind that for selecting elements we use methods like:<\/p>\n\n\n\n<ul>\n<li>getElementById()<\/li>\n\n\n\n<li>querySelector()<\/li>\n\n\n\n<li>querySelectorAll()<\/li>\n<\/ul>\n\n\n\n<p>And for adding new elements we use the createElement() method.&nbsp;<\/p>\n\n\n\n<p>Also, you can use the style property to edit inline CSS.&nbsp;<\/p>\n\n\n\n<p>Now that you are pretty much aware of how DOM works, and how to control different parts of the DOM, the next step is to practice. Practice as much as you can to become an expert web developer.&nbsp;<\/p>\n","protected":false},"excerpt":{"rendered":"<p>In the early days of your web development career, you\u2019ll hear many technical terms. You may not understand most of them. For example, you may have heard about DOM. But do you know what DOM is? It is one of the most important concepts for web developers. Most importantly, it is the key structure that <a href=\"https:\/\/www.sololearn.com\/blog\/what-is-dom\/\" class=\"more-link\">&#8230;<span class=\"screen-reader-text\">  What is DOM?<\/span><\/a><\/p>\n","protected":false},"author":7,"featured_media":2403,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[31],"tags":[],"_links":{"self":[{"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/posts\/2402"}],"collection":[{"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/users\/7"}],"replies":[{"embeddable":true,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/comments?post=2402"}],"version-history":[{"count":2,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/posts\/2402\/revisions"}],"predecessor-version":[{"id":2408,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/posts\/2402\/revisions\/2408"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/media\/2403"}],"wp:attachment":[{"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/media?parent=2402"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/categories?post=2402"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/tags?post=2402"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}