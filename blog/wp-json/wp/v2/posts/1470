{"id":1470,"date":"2022-11-03T09:17:20","date_gmt":"2022-11-03T09:17:20","guid":{"rendered":"https:\/\/blog-dev.sololearn.com\/2022\/11\/03\/how-do-you-write-your-own-programming-language\/"},"modified":"2023-03-07T15:41:57","modified_gmt":"2023-03-07T15:41:57","slug":"write-programming-language","status":"publish","type":"post","link":"https:\/\/www.sololearn.com\/blog\/write-programming-language\/","title":{"rendered":"How Do You Write Your Own Programming Language?"},"content":{"rendered":"<p><span style=\"font-weight: 400;\">Why would you ever write your own programming language? And <\/span><i><span style=\"font-weight: 400;\">how<\/span><\/i><span style=\"font-weight: 400;\"> do you write your own programming language?\u00a0<\/span><\/p>\n<p><span style=\"font-weight: 400;\">While it\u2019s not the easiest thing in the world to do, if you\u2019re an <a href=\"https:\/\/www.sololearn.com\/blog\/tips-for-being-successful-as-a-freelance-programmer\/\">aspiring programmer,<\/a> this might be something you might want to consider.\u00a0<\/span><\/p>\n<h2><b>Why Is There A Need To Write Your Own Programming Language?<\/b><\/h2>\n<p><span style=\"font-weight: 400;\">Making a new programming language&#8217;s interpreter is incredibly gratifying. It deepens your grasp of essential software concepts and how computers function. Although programming language interpreters might be confusing for new programmers, you can still write decent software without worrying about how the languages and the related rudimentary tools function.\u00a0<\/span><\/p>\n<p><span style=\"font-weight: 400;\">Writing a <a href=\"https:\/\/www.sololearn.com\/blog\/what-is-go\/\">programming language<\/a> requires knowledge of the entire computing stack.. It revolves around applications of:<\/span><\/p>\n<ul>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span style=\"font-weight: 400;\">Graph theory<\/span><\/li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span style=\"font-weight: 400;\">Category theory and type systems<\/span><\/li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span style=\"font-weight: 400;\">Complexity analysis<\/span><\/li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span style=\"font-weight: 400;\">More topics in computing mathematics\u00a0<\/span><\/li>\n<\/ul>\n<p><span style=\"font-weight: 400;\">Writing and studying programming languages can help you learn more about computers&#8217; mathematical and mechanical foundations. Writing your own programming language will make you a better developer, even if your daily work seldom involves language tools or compiler writing.<\/span><\/p>\n<p><span style=\"font-weight: 400;\">Even better, the language you create can grow as you\u2019re growing as a developer. Even after the first version is &#8220;finalized,&#8221; a programming language can be expanded, optimized, and enhanced. With careful initial implementation, you might gradually add additional keywords, features, optimizations, and tools to your language, interpreter, or compiler. It&#8217;s simple to transform a programming language into a long-term creative project.<\/span><\/p>\n<h2><b>How To Write A Programming Language?<\/b><\/h2>\n<p><span style=\"font-weight: 400;\">So, how do you create your own programming language? First, let\u2019s start with what you need to consider when creating your own language, from design considerations to implementation and extension.<\/span><\/p>\n<h3><b>Design Considerations<\/b><\/h3>\n<p><span style=\"font-weight: 400;\">Design a language first, then an interpreter or compiler. Meanwhile, the most significant thing you can do for yourself is study concepts from various programming languages. Don&#8217;t simply restrict yourself to modern languages such as Rust and Python; look back into computer history. Ideas from computing and mathematics may be recreated and integrated into novel ways.<\/span><\/p>\n<p><span style=\"font-weight: 400;\">This phase is spent defining syntax in most current OOP-like languages, including <\/span><a href=\"https:\/\/www.sololearn.com\/learn\/courses\/python-introduction\"><span style=\"font-weight: 400;\">Python<\/span><\/a><span style=\"font-weight: 400;\">, <\/span><a href=\"https:\/\/www.sololearn.com\/learning\/1081\"><span style=\"font-weight: 400;\">Ruby<\/span><\/a><span style=\"font-weight: 400;\">, and <\/span><a href=\"https:\/\/www.sololearn.com\/learning\/1075\"><span style=\"font-weight: 400;\">Swift<\/span><\/a><span style=\"font-weight: 400;\">. Making a programming language in <\/span><a href=\"https:\/\/www.sololearn.com\/blog\/what-is-c-plus-plus-used-for\/\"><span style=\"font-weight: 400;\">C++<\/span><\/a><span style=\"font-weight: 400;\"> is also included in the given list. But it would be best to keep in mind that it&#8217;s the designing of the language&#8217;s semantics that you need to focus on the most. It&#8217;s the stage where the &#8220;feel&#8221; of the language gets developed, and where you learn the most. Semantics are more complicated to modify than syntax.\u00a0<\/span><\/p>\n<p><span style=\"font-weight: 400;\">Here are some questions to consider while considering language semantics and ergonomics:<\/span><\/p>\n<ul>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span style=\"font-weight: 400;\">Which categories does your language belong to?\u00a0<\/span><\/li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span style=\"font-weight: 400;\">Is it verified when the program is compiled?\u00a0<\/span><\/li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span style=\"font-weight: 400;\">Does it do the necessary conversions between types on its own automatically?<\/span><\/li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span style=\"font-weight: 400;\">In your programming language, what is the highest-level organizing unit of programs?\u00a0<\/span><\/li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span style=\"font-weight: 400;\">Modules, packages, or libraries are familiar names for this in programming languages, but other languages, like Rust, have developed their unique terminology for this notion.<\/span><\/li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span style=\"font-weight: 400;\">How does the programming language handle unusual circumstances, such as when a file is missing, when there is a problem accessing the network, or when there is a divide-by-zero error?\u00a0<\/span><\/li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span style=\"font-weight: 400;\">Do you handle errors in the same manner as exceptions that propagate up the call stack, or do you see errors in the same way as values, as in C\/Go?<\/span><\/li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span style=\"font-weight: 400;\">Does the language you&#8217;re using do optimization for tail recursion? Or do you have built-in control-flow tools for looping, such as while loops and for loops?<\/span><\/li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span style=\"font-weight: 400;\">How much functionality do you want to embed directly into the language, unlike providing it via a standardized library?\u00a0<\/span><\/li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span style=\"font-weight: 400;\">Let us take an example of C, which does not have any knowledge of strings; instead, the C standard library is responsible for providing string semantics.\u00a0<\/span><\/li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span style=\"font-weight: 400;\">The majority of high-level languages have maps and lists as core components of the language, but the majority of low-level languages do not.<\/span><\/li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span style=\"font-weight: 400;\">What are the mental processes behind memory allocation in your language?\u00a0<\/span><\/li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span style=\"font-weight: 400;\">Memory is automatically allocated as required; is that correct?\u00a0<\/span><\/li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span style=\"font-weight: 400;\">Is the developer going to have to create code in order to do this?\u00a0<\/span><\/li>\n<li style=\"font-weight: 400;\" aria-level=\"1\"><span style=\"font-weight: 400;\">Is there a rubbish collection service?<\/span><\/li>\n<\/ul>\n<h3><b>Implementation Considerations<\/b><\/h3>\n<p><span style=\"font-weight: 400;\">The next step is to &#8220;test-drive&#8221; what you have designed for the operation and feel of a language. It determines how it will feel to use programs that have been created in that language.<\/span><\/p>\n<h4><span style=\"font-weight: 400;\">Test-Drive Phase<\/span><\/h4>\n<p><span style=\"font-weight: 400;\">During this step, you should save a text document in which you may experiment with the syntax of the new language by building tiny programs using that language. You may try to implement little algorithms and data structures such as recursive mathematical functions. Some of the functions are sorting algorithms and minor web servers by writing notes and questions for yourself in the comments section of the code. Don&#8217;t move on until most of the syntax and semantics queries have been answered.\u00a0<\/span><\/p>\n<p><span style=\"font-weight: 400;\">Now it&#8217;s time to test your hypothesis about the fundamental concepts behind the language design. You may produce some sample code to confirm that the ideas work well together during this step. Suppose you have built a programming language based on functional programming and asynchronous and event-driven concurrency. Then sample code will work for you. If you&#8217;re wrong, you should revise your assumptions or experiment with language design. It better reflects your knowledge.<\/span><\/p>\n<p><span style=\"font-weight: 400;\">This part of the design process is called the straw-man design phase. It&#8217;s a simple way to see if the language you&#8217;ve developed in your head will work for the applications you want to write.<\/span><\/p>\n<h4><span style=\"font-weight: 400;\">Interpreter\/Compiler Phase<\/span><\/h4>\n<p><span style=\"font-weight: 400;\">At their most fundamental level, interpreters and compilers are layers of minor modifications. They turn your source code, a string of text, into some form that your machine can execute. Building such a system requires picking practical intermediate formats for transformations to operate with. You may need to use similar formats for runtime data structures to encapsulate your language&#8217;s values and functions in an active program.<\/span><\/p>\n<p><span style=\"font-weight: 400;\">Honestly, every language might, in theory, be compiled or interpreted. However, in most cases, one of these two options makes more sense for a particular language than the other. Programmers with more experience will inform you that interpreting is typically the choice that provides greater flexibility, whereas compiling results in superior performance.<\/span><\/p>\n<h3><b>Extensions Of Your Project<\/b><\/h3>\n<p><span style=\"font-weight: 400;\">Even after a first rollout, you may add more complicated features, concepts, and optimizations using a toy <a href=\"https:\/\/www.sololearn.com\/blog\/best-programming-languages\/\">programming language<\/a>. If you want to expand your project, consider this:<\/span><\/p>\n<h4><span style=\"font-weight: 400;\">Type Systems With More Advanced Features<\/span><\/h4>\n<p><span style=\"font-weight: 400;\">Studying type systems may arouse interest in category theory and adaptations of beautiful data structures with sophisticated type systems in languages like Haskell or Elm. Swift, TypeScript, or Rust may be an excellent place to start if you come from Java, <\/span><a href=\"https:\/\/www.sololearn.com\/learn\/courses\/javascript-introduction\"><span style=\"font-weight: 400;\">JavaScript<\/span><\/a><span style=\"font-weight: 400;\">, or Python.<\/span><\/p>\n<h4><span style=\"font-weight: 400;\">Optimizations<\/span><\/h4>\n<p><span style=\"font-weight: 400;\">What are the best techniques for speeding up your interpreter or compiler? What exactly does it mean to be faster in parsing and compiling the code and producing faster code? There is no shortage of past knowledge and literature on compiler performance in the wild.<\/span><\/p>\n<h4><span style=\"font-weight: 400;\">Adding C Foreign Function Interface (FFI)<\/span><\/h4>\n<p><span style=\"font-weight: 400;\">Interoperability amongst your language and another, often C binaries, is provided via an FFI. C FFIs are a fantastic way to learn about low-level aspects of how programs are built into application programs and about the formats and code creation of executable files.<\/span><\/p>\n<h4><span style=\"font-weight: 400;\">Just-In-Time Compilation<\/span><\/h4>\n<p><span style=\"font-weight: 400;\">Just-in-time (JIT) compilers are a hybrid type of compiler that creates compiled machine code on the fly. E.g., some of the most popular and quickest language runtimes, such as Chrome&#8217;s V8 and LuaJIT for Lua, are neither vanilla interpreters nor complete compilers. JITs can often make better tradeoffs between efficiency and runtime dynamism in the language than simple compilers or interpreters. But this comes at the expense of increased complexity in the compiler.<\/span><\/p>\n<h3><b>External Tools For Writing Your Own Programming Language<\/b><\/h3>\n<p><span style=\"font-weight: 400;\">A renowned parsing library known as Bison is one example of the many out-of-the-box solutions for programmers developing their language. Other examples include LLVM, which refers to the collection of compiler tools. To determine which tools are most suited for the language you have selected, you need to research and check some developer forums.<\/span><\/p>\n<h2><b>Be Smart, Creative, and Work Gradually<\/b><\/h2>\n<p><span style=\"font-weight: 400;\">Does this sound like a lot of effort? Don\u2019t give up on writing your own programming language! Especially if what you like about programming the most is the opportunity for creative expression.\u00a0<\/span><\/p>\n<p><span style=\"font-weight: 400;\">Now, if you <\/span><i><span style=\"font-weight: 400;\">are<\/span><\/i><span style=\"font-weight: 400;\"> a beginner, the most effective way to learn grow as a developer is to pick up the fundamentals of one or more programming languages. After that, you can work your way up to creating your own.<\/span><\/p>\n<p><span style=\"font-weight: 400;\">A good place to start is with our course on C++ or Java. Or better yet, take a look at our list of free courses and see what you\u2019re most interested in!<\/span><\/p>\n","protected":false},"excerpt":{"rendered":"<p>Why would you ever write your own programming language? And how do you write your own programming language?\u00a0 While it\u2019s not the easiest thing in the world to do, if you\u2019re an aspiring programmer, this might be something you might want to consider.\u00a0 Why Is There A Need To Write Your Own Programming Language? Making <a href=\"https:\/\/www.sololearn.com\/blog\/write-programming-language\/\" class=\"more-link\">&#8230;<span class=\"screen-reader-text\">  How Do You Write Your Own Programming Language?<\/span><\/a><\/p>\n","protected":false},"author":3,"featured_media":2110,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[33],"tags":[20,50,49],"_links":{"self":[{"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/posts\/1470"}],"collection":[{"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/comments?post=1470"}],"version-history":[{"count":4,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/posts\/1470\/revisions"}],"predecessor-version":[{"id":2587,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/posts\/1470\/revisions\/2587"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/media\/2110"}],"wp:attachment":[{"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/media?parent=1470"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/categories?post=1470"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/tags?post=1470"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}