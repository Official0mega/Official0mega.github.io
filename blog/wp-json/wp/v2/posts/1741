{"id":1741,"date":"2022-11-17T13:16:50","date_gmt":"2022-11-17T13:16:50","guid":{"rendered":"https:\/\/blog-dev.sololearn.com\/?p=1741"},"modified":"2023-03-02T01:47:02","modified_gmt":"2023-03-02T01:47:02","slug":"css-media-queries","status":"publish","type":"post","link":"https:\/\/www.sololearn.com\/blog\/css-media-queries\/","title":{"rendered":"How To Improve User Experience With Responsive Web Pages (Using CSS Media Queries)"},"content":{"rendered":"\n<p>We use so many different devices to access the web that static websites are a thing of the past (like the technical version of dinosaurs and mammoths).<\/p>\n\n\n\n<p>These days, webpage content needs to fit on any device screen.&nbsp;<\/p>\n\n\n\n<p>With this CSS technique (media query), you can create <strong><a href=\"https:\/\/www.sololearn.com\/blog\/responsive-web-design\/\" data-type=\"post\" data-id=\"1725\">responsive web pages<\/a><\/strong> which will fit any screen, from mobile to desktop.\u00a0<\/p>\n\n\n\n<p>With <a href=\"https:\/\/www.sololearn.com\/blog\/what-is-css-used-for\/\" data-type=\"post\" data-id=\"1672\">CSS media queries<\/a>, you can check for the following:<\/p>\n\n\n\n<ul>\n<li>Width and height of viewport (i.e., the user&#8217;s visible area of the web page)&nbsp;<\/li>\n\n\n\n<li>Width and height of the device<\/li>\n\n\n\n<li>Device orientation (is the device in landscape or portrait mode)<\/li>\n\n\n\n<li>Resolution<\/li>\n<\/ul>\n\n\n\n<h2 class=\"wp-block-heading\">Media Query Syntax<\/h2>\n\n\n\n<p>The media query is declared using the<strong> @media<\/strong> rule, which informs the browser that we&#8217;ve specified a media query.&nbsp;<\/p>\n\n\n\n<p>The media query consists of a <strong>media type and media feature.&nbsp;<\/strong><\/p>\n\n\n\n<p>Media type allows you to specify the device you want to attach the media feature to. The media feature can be one or more expressions based on what you want to achieve.&nbsp;<\/p>\n\n\n\n<p>The media expression resolves to either true or false depending on the specified media type.&nbsp;<\/p>\n\n\n\n<p>If the specified media type doesn\u2019t match the type of the device the page is viewed on, that means the expression will resolve to false.&nbsp;<\/p>\n\n\n\n<p>If the media type matches the type of the device the page is viewed on:<\/p>\n\n\n\n<ol>\n<li>The results are true.<\/li>\n\n\n\n<li>All expressions in the media query are valid, and the corresponding codes are applied when the media query is true.<\/li>\n<\/ol>\n\n\n\n<h3 class=\"wp-block-heading\">Media Types<\/h3>\n\n\n\n<p>The <strong>media types <\/strong>define the class of devices for which the media query applies. It includes;<\/p>\n\n\n\n<ul>\n<li><strong>All<\/strong>: For all media type devices.<\/li>\n\n\n\n<li><strong>Print<\/strong>: For printers.<\/li>\n\n\n\n<li><strong>Screen: <\/strong>This is used to set the screen size of the media query, and the size of the screen can be adjusted using <strong>min \u2013 width<\/strong>, <strong>max \u2013 width, <\/strong>and <strong>orientation<\/strong>. It is used for computer screens, tablets, androids, i-phones, etc.<\/li>\n\n\n\n<li><strong>Speech: <\/strong>Screen readers that read pages out loud.<\/li>\n<\/ul>\n\n\n\n<h2 class=\"wp-block-heading\">Declaration of Media Query And Media Type&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<\/h2>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">\/* when you use @media without specifying all or any media type, it defaults to all. For instance, *\/\n\n@media and (features) {\n  HTML {\n    \/* you will write your style here *\/\n  }\n}\n\n\/* To specify media type use the code below *\/\n\n@media media type and (features) {\n  HTML {\n    \/* you will write your style here *\/\n  }\n}\n\n\/*for instance, if the media type is \"screen,\" you will use the code below*\/\n\n@media screen and (features) {\n  HTML {\n    \/* you will write your code here *\/\n  }\n}<\/pre>\n\n\n\n<h2 class=\"wp-block-heading\">Logical Operators In Media Queries&nbsp;<\/h2>\n\n\n\n<p>In media queries, you can use logical operators to bridge two or more conditions.&nbsp;<\/p>\n\n\n\n<p>Examples of some logical operators are:<\/p>\n\n\n\n<ul>\n<li><strong>And<\/strong><\/li>\n\n\n\n<li><strong>Not<\/strong><\/li>\n\n\n\n<li><strong>OR<\/strong><\/li>\n<\/ul>\n\n\n\n<h3 class=\"wp-block-heading\">The And Operator<\/h3>\n\n\n\n<p>The<strong> and-operator<\/strong> is used for joining two or more conditions to the media query declaration. It&#8217;s written as shown below:<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">\/* The first example will show how the and operator is used to combine a single feature with media query declaration. *\/\n\n@media media type and (feature) {\n  HTML {\n    \/* Your style here *\/\n  }\n}\n\n\/* The following example will show you how the \"and operator\" is used to combine multiple features with media query declaration. The media type and features we'll use in the example below are for the explanation. You'll need to specify your own media type and features to suit your needs.*\/\n\n@media screen and (min-width: 480px) and (orientation: landscape) {\n  HTML {\n    \/* Your style here *\/\n  }\n}<\/pre>\n\n\n\n<h3 class=\"wp-block-heading\">The Not Operator<\/h3>\n\n\n\n<p>The <strong>not<\/strong> operator nullifies media queries. The<strong> not <\/strong>operator is used for media types that do not support the result.<\/p>\n\n\n\n<p>That is, if the result is false, it returns true.<\/p>\n\n\n\n<p>For instance: if a printer can only show one color (monochromatic) and you want to remove the body&#8217;s background color.<strong>&nbsp;<\/strong><\/p>\n\n\n\n<p><strong>Here is the code illustration<\/strong><\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">@media print and (not (color)) {\n  Body {\n    background-color: none;\n  }\n}<\/pre>\n\n\n\n<p><strong>Note!<\/strong><\/p>\n\n\n\n<p>The <strong>Not <\/strong>operator negates everything after it in the media query. It will only nullify the media query applied if it is used in a comma-separated list.<\/p>\n\n\n\n<p>For instance:<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">@media not all and (max-width: 700px) {\n  HTML {\n    \/* Your style here *\/\n  }\n}\n\n\/* the query is analyzed as follows *\/\n\n@media not (all and (max-width: 700px));<\/pre>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">\/* In a comma-separated list *\/\n\n@media not screen and (color), print and (color) {\nHTML{\n\u00a0 \/* Your style here *\/\n\u00a0 }\n}\n\n\/* the query is analyzed as follows *\/\n@media (not (screen and(color))), print and (color)<\/pre>\n\n\n\n<h3 class=\"wp-block-heading\">The Or Operator<\/h3>\n\n\n\n<p>The <strong><em>Or <\/em><\/strong>operator is known as the <strong><em>comma-separated<\/em><\/strong>. You don&#8217;t write <strong><em>or<\/em><\/strong><strong> <\/strong>when you&#8217;re using this operator. Instead, you use a comma in between the features.<strong>&nbsp;<\/strong><\/p>\n\n\n\n<p>If any of the features separated by a comma is true, the style will be applied. That means each condition in the list will be treated separately.&nbsp;<\/p>\n\n\n\n<p>For instance<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">\/* if any of the features match the device, the style will be applied *\/\n\n@media (min-width: 500px), (max-width: 700px) {\n  HTML {\n    \/* your style *\/\n  }\n}<\/pre>\n\n\n\n<h2 class=\"wp-block-heading\">Min and Max Width<\/h2>\n\n\n\n<p>When creating media queries for various screen sizes, keep the<strong><em> max-width<\/em><\/strong> and <strong><em>min-width<\/em><\/strong> properties in mind.<\/p>\n\n\n\n<p>Specifying a <strong><em>max\u2013width <\/em><\/strong>value without specifying a <strong><em>min-width<\/em><\/strong><strong> <\/strong>value in a media query allows CSS to give the <strong><em>min-width<\/em><\/strong><strong> <\/strong>a value of <strong>0px.<\/strong><\/p>\n\n\n\n<p>All the styles written in the media query are applied to any device with a screen size ranging from <strong>0px <\/strong>to the <strong>max\u2013width <\/strong>specified.<\/p>\n\n\n\n<p>The value you&#8217;ve given to the<strong> min-width<\/strong> is applied to the styles within the media rule until it reaches the<strong> maximum width<\/strong>.<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">For Instance @media screen and (min-width: 576px) {\n  HTML {\n    \/* all styles written here will be applied from this minimum width of 567px *\/\n  }\n}<\/pre>\n\n\n\n<p>The styles in the media query above would only apply to devices with minimum specified width.&nbsp;<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">To Define Width Range<\/h2>\n\n\n\n<p>Setting the <strong><em>width range<\/em><\/strong> gives you some flexibility when creating responsive layouts covering all device widths.<\/p>\n\n\n\n<p>Setting a specific <strong>range<\/strong> is the same as using <strong><em>min and max width<\/em><\/strong>.&nbsp;<\/p>\n\n\n\n<p>The main difference from what we discussed earlier is that both <strong><em>the min and max values<\/em><\/strong> will be specified. For instance,<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">@media screen and (min-width: 300px) and (max-width: 700px) {\n  HTML {\n    \/* all styles written here will be applied from this width range of 300-700px *\/\n  }\n}<\/pre>\n\n\n\n<p>The media query above will only work for the device with the specified screen size.&nbsp;<\/p>\n\n\n\n<p>It uses<strong> the min-width: 300px<\/strong> provided&nbsp; as the start value and the <strong>max-width: 700px<\/strong> as the end value.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">The Media Breakpoints<\/h2>\n\n\n\n<p>A breakpoint is a limit defined by developers for determining when to change the layout and apply the new rules within the media queries. For instance<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">@media screen and (min-width: 300px) {\n  HTML {\n    \/* styles here *\/\n  }\n}\n\n@media screen and (max-width: 700px) {\n  HTML {\n    \/* styles here *\/\n  }\n}<\/pre>\n\n\n\n<p>In the above examples, the breakpoints are the points specified in the code. Which are, <strong>min-width: 300px<\/strong> and <strong>max-width: 700px&nbsp;<\/strong><\/p>\n\n\n\n<p>Setting <strong>media<\/strong> <strong>breakpoints <\/strong>prevents web content from falling out or moving out of position on different screen sizes.<\/p>\n\n\n\n<p>The responsive design media breakpoints can be specified based on<\/p>\n\n\n\n<ul>\n<li>Device&nbsp;<\/li>\n\n\n\n<li>Content<\/li>\n\n\n\n<li>Min \u2013 width and Max \u2013 width<\/li>\n<\/ul>\n\n\n\n<h2 class=\"wp-block-heading\">Is There a Common Breakpoint?<\/h2>\n\n\n\n<p>One of the most frequently asked questions is, &#8220;Can I use a specific breakpoint for all devices?&#8221;<\/p>\n\n\n\n<p>We cannot use fixed breakpoints for all devices because the screen sizes of all devices are different.&nbsp;<\/p>\n\n\n\n<p>You can also use the breakpoints of a <a href=\"https:\/\/www.sololearn.com\/blog\/add-css-to-html\/\" data-type=\"post\" data-id=\"1262\">CSS framework<\/a> (such as Bootstrap, Bulma, or others).<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Viewport VS Media Query: The Differences<\/h2>\n\n\n\n<p>You might think that the viewport and media query are interchangeable. NO! They are to be used together because they perform different functions.&nbsp;<\/p>\n\n\n\n<p>Here are some differences between the media query and the viewport, which also show why they must be used together.<\/p>\n\n\n\n<ul>\n<li>The <strong>media query <\/strong>allows you to specify the media type and create layouts for different device screen sizes. At the same time, <strong>the viewport <\/strong>tells the browser that the user&#8217;s visible area should be equal to the device width you are using.<\/li>\n<\/ul>\n\n\n\n<p>For example, suppose your device&#8217;s screen size is 400px. With media query, you can change the background color or even the navbar position at that size.<\/p>\n\n\n\n<p>The viewport allows text to be readable according to your device&#8217;s screen width.<\/p>\n\n\n\n<ul>\n<li><strong>Viewport <\/strong>syntax is written as follows in HTML and CSS.<\/li>\n<\/ul>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">\/* HTML *\/\n&lt;meta name = ''viewport'' content = \"width = device-width, initial-scale =1\">\n\n\/* CSS *\/\n@-ms-viewport {\n  width: device-width;\n}<\/pre>\n\n\n\n<h2 class=\"wp-block-heading\">Screen Vs. Only Screen: When To Use The Only Keyword<\/h2>\n\n\n\n<p>The<strong> screen <\/strong>is a media type used to set the screen size of a media query.<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">@media only screen and (min-width: 360px) and (max-width: 768px) {\n  HTML {\n    \/* Your style here *\/\n  }\n}<\/pre>\n\n\n\n<p>In the example written above, you will notice that the <strong>screen <\/strong>media type is written with the <strong>only<\/strong> keyword. This keyword prevents <strong>older browsers that don&#8217;t support media queries from applying the style<\/strong>.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Media Query Resolution<\/h2>\n\n\n\n<p>Resolution refers to the number of pixels that make up a screen. The <strong>resolution<\/strong> media query can test the output device&#8217;s pixel density.<\/p>\n\n\n\n<p>You can also set minimum and maximum values using the <strong>min &#8211; resolution<\/strong> and <strong>max &#8211; resolution <\/strong>keywords.<\/p>\n\n\n\n<p>Check out the illustrations below.&nbsp;<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">\/* minimum resolution *\/\n@media (min-resolution: 10dpi) {\n  P {\n    color: orange;\n  }\n}\n\n\/* maximum resolution *\/\n@media (max-resolution: 300dpi) {\n  Body {\n    background-color: green;\n  }\n}<\/pre>\n\n\n\n<p>From the illustration above style:<\/p>\n\n\n\n<p>If the min-resolution of the output device is 10dpi, the output paragraph is orange. Also, if the max-resolution is 300doi, the background color will be green.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Getting Started With Responsive Web Design<\/h2>\n\n\n\n<ul>\n<li>This lesson isn&#8217;t for beginners but for people with previous knowledge of CSS.<\/li>\n<\/ul>\n\n\n\n<ul>\n<li>If you are new to CSS, you can visit our <a href=\"https:\/\/www.sololearn.com\/learn\/courses\/css-introduction\">website<\/a> to take a very detailed lesson on the fundamentals of CSS.<\/li>\n<\/ul>\n\n\n\n<ul>\n<li>You can try your hands on different exercises, which you can find in the <a href=\"https:\/\/www.sololearn.com\/compiler-playground\/css\"><strong>code playground<\/strong><\/a><strong> <\/strong>on Sololearn&#8217;s website.\u00a0<\/li>\n<\/ul>\n\n\n\n<ul>\n<li>You can also join a <a href=\"https:\/\/www.sololearn.com\/Discuss\/\">community of developers<\/a> to interact with professionals and get answers to your questions.&nbsp;&nbsp;<\/li>\n<\/ul>\n\n\n\n<h2 class=\"wp-block-heading\">Conclusion<\/h2>\n\n\n\n<p>Learning CSS and responsive web design on your own can be tricky. But with well-planned courses on Sololearn, you can learn at your pace from the comfort of your bed.<\/p>\n\n\n\n<p>Do you want to learn more about responsive web design? Get access to <a href=\"https:\/\/www.sololearn.com\/learning\/1162\">Sololearn&#8217;s responsive web design<\/a> course.<\/p>\n\n\n\n<p><strong>References<\/strong><\/p>\n\n\n\n<ul>\n<li>(2022, May 20). How to use CSS Breakpoints and Media Breakpoints. What are CSS Breakpoints and Media Query Breakpoints. Retrieved August 1. 2022, from<\/li>\n<\/ul>\n\n\n\n<ul>\n<li>Webplatform. Height. height \u00b7 WebPlatform Docs. Retrieved August 1, 2022, from <a href=\"https:\/\/webplatform.github.io\/docs\/css\/media_queries\/height\/\" target=\"_blank\" rel=\"noopener\">https:\/\/webplatform.github.io\/docs\/css\/media_queries\/height\/<\/a><\/li>\n<\/ul>\n","protected":false},"excerpt":{"rendered":"<p>We use so many different devices to access the web that static websites are a thing of the past (like the technical version of dinosaurs and mammoths). These days, webpage content needs to fit on any device screen.&nbsp; With this CSS technique (media query), you can create responsive web pages which will fit any screen, <a href=\"https:\/\/www.sololearn.com\/blog\/css-media-queries\/\" class=\"more-link\">&#8230;<span class=\"screen-reader-text\">  How To Improve User Experience With Responsive Web Pages (Using CSS Media Queries)<\/span><\/a><\/p>\n","protected":false},"author":7,"featured_media":2032,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[33],"tags":[],"_links":{"self":[{"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/posts\/1741"}],"collection":[{"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/users\/7"}],"replies":[{"embeddable":true,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/comments?post=1741"}],"version-history":[{"count":3,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/posts\/1741\/revisions"}],"predecessor-version":[{"id":2440,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/posts\/1741\/revisions\/2440"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/media\/2032"}],"wp:attachment":[{"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/media?parent=1741"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/categories?post=1741"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/tags?post=1741"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}