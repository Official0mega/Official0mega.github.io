{"id":1653,"date":"2022-11-16T20:56:59","date_gmt":"2022-11-16T20:56:59","guid":{"rendered":"https:\/\/blog-dev.sololearn.com\/?p=1653"},"modified":"2023-03-04T02:53:11","modified_gmt":"2023-03-04T02:53:11","slug":"python-for-loop","status":"publish","type":"post","link":"https:\/\/www.sololearn.com\/blog\/python-for-loop\/","title":{"rendered":"Python For Loop"},"content":{"rendered":"\n<p>Many times, we need to repeat certain processes on a specific task. The repetition of these processes is called loops. They are very important in programming to execute tasks effectively.<\/p>\n\n\n\n<p>We ask the process to repeat the same operations on different values for a specific task to be solved.. In <a href=\"https:\/\/www.sololearn.com\/blog\/python-data-structures\/\" data-type=\"post\" data-id=\"1800\">python<\/a>, we can make use of \u201cfor\u201d loops when we want to repeat some operations on different values in a program.\u00a0 A python for loop accesses values from a data sequence (called iterables because they are the elements we work with). This sequence of data can be a string, tuple or list.\u00a0\u00a0<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Syntax Of a For Loop<\/h2>\n\n\n\n<p>We start with the \u201cfor\u201d keyword, then a &lt; variable_name&gt; that stores the values accessed by the loop, then the \u201cin\u201d keyword to access the actual data we are getting values from &lt;sequence_data(iterables)&gt; and end the statement with a colon \u201c:\u201d.<\/p>\n\n\n\n<p>After that, we pass in the \u201cstatements\u201d the instructions we want the loop to perform.<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">for\u00a0 &lt;variable_name>\u00a0 in &lt;sequence_data(iterables)> :\n\u00a0 \u00a0 statements<\/pre>\n\n\n\n<p><strong>Note:<\/strong> the indentation is important when writing statements in the code block . If you are making use of some code editors they may indent it automatically otherwise, you click on the \u201ctab\u201d key once from the start of the line.<\/p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img decoding=\"async\" loading=\"lazy\" width=\"718\" height=\"672\" src=\"https:\/\/blog-dev.sololearn.com\/wp-content\/uploads\/2022\/11\/flowchart-for-loop-python.png\" alt=\"\" class=\"wp-image-1654\" srcset=\"https:\/\/www.sololearn.com\/wp-content\/uploads\/2022\/11\/flowchart-for-loop-python.png 718w, https:\/\/www.sololearn.com\/wp-content\/uploads\/2022\/11\/flowchart-for-loop-python-300x281.png 300w\" sizes=\"(max-width: 718px) 100vw, 718px\" \/><\/figure>\n\n\n\n<ul>\n<li>The python \u201cfor\u201d loop is an iterator that goes through items in a data sequence, it picks an item and checks if that is the last or only item in the sequence.<\/li>\n\n\n\n<li>If it is not the only item in the data sequence, it repeats the same process till it gets to the last item in the data sequence and exits the loop.<\/li>\n<\/ul>\n\n\n\n<p>\u201cFor loops\u201d can loop over iterators like lists, tuples, string, range, and even generators. Now that we know the format of the \u201cfor\u201d loop, we look at some examples working with three data sequences; strings, lists and tuples.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">Example I &#8211; Looping through a string.<\/h3>\n\n\n\n<ul>\n<li>First, we have the variable that stores the string we want to loop through(iterables)<\/li>\n\n\n\n<li>Second, we type in the \u201cfor\u201d keyword, then assign a variable that will store the accessed values from the string<\/li>\n\n\n\n<li>Then type the \u201cin\u201d keyword and the name of the variable that stores the string, followed by a colon \u201c:\u201d<\/li>\n<\/ul>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">word = \"firsttry\"\nfor char in word:<\/pre>\n\n\n\n<p>In the above code block; &lt;char&gt; is the name of the variable that stores the assessed value from the loop, while &lt;word&gt; is the name of the variable that we want to loop through. The statement will be anything we pass on the next line, let\u2019s print the variable &lt;char&gt; to see the result.<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">word = \"firsttry\"\nfor char in word:\nprint(char)\n\u00a0 \u00a0\n# result\n# f\n# i\n# r\n# s\n# t\n# t\n# r\n# y<\/pre>\n\n\n\n<p>In the above code block, we printed &lt;char&gt; and all the values from the strings were printed out. Till all the letters in the string were printed, the loop did not stop. Now, let\u2019s try to add the letter \u201ca\u201d to each of the values from the string.<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">word = \"firsttry\"\nfor char in word:\nprint(char + \"a\")\n\u00a0 \u00a0\n# result\n# fa\n# ia\n# ra\n# sa\n# ta\n# ta\n# ra\n# ya<\/pre>\n\n\n\n<p>It ran pretty smooth and added \u201ca\u201d to each values<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">Example II &#8211; with List<\/h3>\n\n\n\n<ul>\n<li>First, we have the variable that stores the list we want to loop through(iterables)<\/li>\n\n\n\n<li>Second, we type in the \u201cfor\u201d keyword, then assign a variable that will store the assessed values from the list.<\/li>\n\n\n\n<li>Then type the \u201cin\u201d keyword and the name of the variable that stores the list, followed by a colon \u201c:\u201d<\/li>\n<\/ul>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">fruit_basket = [\"orange\", \"apple\", \"banana\",\"grapes\"]\nfor fruits in fruit_basket:\nprint(fruits)\n\u00a0 \u00a0\n# Result\n# orange\n# apple\n# banana\n# grapes<\/pre>\n\n\n\n<p>In the above code block; &lt;fruits&gt; is the name of the variable that stores the assessed value from the loop while &lt;fruit_basket&gt; is the name of the variable that we want to loop through. The statement will be anything we pass on the next line, and we can see the results printed.&nbsp;<\/p>\n\n\n\n<p>Let\u2019s say we want to print a statement that says \u201ci love &lt;fruits&gt;\u201d.<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">fruit_basket = [\"orange\", \"apple\", \"banana\",\"grapes\"]\nfor fruits in fruit_basket:\nprint(\"I love \" + fruits)\n\u00a0 \u00a0\n# Result\n# I love orange\n# I love apple\n# I love banana\n# I love grapes<\/pre>\n\n\n\n<p>In the above code, we can see the phrase \u201cI love\u201d is repeated the number of times the fruits exist in the fruit basket. No fruit was repeated twice.&nbsp;<\/p>\n\n\n\n<p>Lists containing numbers<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">list_of_numbers = [1, 4, 6, 8, 9]\nfor numbers in list_of_numbers:\nprint(numbers)\n\u00a0 \u00a0\n# Result\n# 1\n# 4\n# 6\n# 8\n# 9<\/pre>\n\n\n\n<p>Let\u2019s say we want each number to be multiplied by 2.<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">list_of_numbers = [1, 4, 6, 8, 9]\nfor numbers in list_of_numbers:\nprint(2 * numbers)\n\u00a0 \u00a0\n# Result\n# 2\n# 8\n# 12\n# 16\n# 18<\/pre>\n\n\n\n<p>We see the results have been multiplied by 2.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">Example III &#8211; with tuples<\/h3>\n\n\n\n<ul>\n<li>First, we have the variable that stores the tuple we want to loop through(iterables)<\/li>\n\n\n\n<li>Second, we type in the \u201cfor\u201d keyword, then assign a variable that will store the assessed values from the tuple.<\/li>\n\n\n\n<li>Then type the \u201cin\u201d keyword and the name of the variable that stores the tuple, followed by a colon \u201c:\u201d<\/li>\n<\/ul>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">color_box = (\"Red\", \"Yellow\", \"Blue\", \"Purple\")\nfor colors in color_box:\nprint(colors)\n\u00a0 \u00a0\n# Result\n# Red\n# Yellow\n# Blue\n# Purple<\/pre>\n\n\n\n<p>In the above code block; &lt;colors&gt; is the name of the variable that stores the assessed value from the loop while &lt;color_box&gt; is the name of the variable that we want to loop through. The statement will be anything we pass on the next line, and we can see the results printed.&nbsp;<\/p>\n\n\n\n<p>Let\u2019s say we want to print a statement that says \u201c&lt;colors&gt; is very pretty\u201d.<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">color_box = (\"Red\", \"Yellow\", \"Blue\", \"Purple\")\nfor colors in color_box:\nprint(colors + \" is very pretty \")\n\u00a0 \u00a0\n# Result\n# Red is very pretty\n# Yellow is very pretty\n# Blue is very pretty\n# Purple is very pretty<\/pre>\n\n\n\n<p>We can see in the above examples that all items are accessed in the loops and you can pass in any statement to modify its results.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\"><strong>The range() function<\/strong><\/h2>\n\n\n\n<p>The range() function is another method of looping through items in a data sequence. It returns a range of numbers using a starting value(optional)&nbsp; and a stopping value.&nbsp; A step value is optional, but the default is 1.&nbsp;<\/p>\n\n\n\n<p><strong>Format<\/strong><\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">&lt;range(stop)>\n&lt;range(start, stop)>\n&lt;range(start, stop, step)><\/pre>\n\n\n\n<ul>\n<li>start: specifies the number the range starts from.<\/li>\n\n\n\n<li>stop: specifies the end of the range. This value would not be included in the range.<\/li>\n\n\n\n<li>step: this value specifies the increment in the numbers.<\/li>\n<\/ul>\n\n\n\n<p>Example:<\/p>\n\n\n\n<p>We are to find a range of 5 numbers; we can do this in two ways;<\/p>\n\n\n\n<p>The first way is giving a start value of 0 and a stop value of 5. It becomes;<\/p>\n\n\n\n<p>range(0,5), the numbers are; 0, 1, 2, 3, 4.<\/p>\n\n\n\n<p>It stops at 4 because, in the range, the last number is not included, but when you count the numbers, they are 5 in total.&nbsp;&nbsp;<\/p>\n\n\n\n<p>The second way is passing in 5 in the range, the start value is assumed to be 0. It becomes;<\/p>\n\n\n\n<p>range(5), and the numbers are: 0, 1, 2, 3, 4<\/p>\n\n\n\n<p>If we are to increase each number by 2, that is the step value. It becomes;<\/p>\n\n\n\n<p>range(0,5,2), the numbers are 0, 2,4&nbsp;<\/p>\n\n\n\n<h3 class=\"wp-block-heading\"><strong>Implementing range in for loop<\/strong><\/h3>\n\n\n\n<p>\u201cFor\u201d loop and the range() function goes hand in hand. The process needs to be repeated to get the numbers from a specific range.<\/p>\n\n\n\n<h4 class=\"wp-block-heading\"><strong>Syntax<\/strong><\/h4>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"raw\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">for &lt;variable_name> in range(stop):\nstatement\n\nOr\n\nfor &lt;variable_name> in range(start,stop):\nstatement\n\nOr\n\nfor &lt;variable_name> in range(start, stop, step):\nstatement<\/pre>\n\n\n\n<h4 class=\"wp-block-heading\">Examples<\/h4>\n\n\n\n<p>Let\u2019s find the range of 5 numbers.<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">for num in range(5):\n    print(num)\n\u00a0 \u00a0\n# Result\n# 0\n# 1\n# 2\n# 3\n# 4<\/pre>\n\n\n\n<p>We can see that the numbers started from 0 and ended at 4.<\/p>\n\n\n\n<p>Let\u2019s add a starting range value&nbsp;<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">for num in range(1, 10):\n    print(num)\n\u00a0 \u00a0\n# Result\n# 1\n# 2\n# 3\n# 4\n# 5\n# 6\n# 7\n# 8\n# 9<\/pre>\n\n\n\n<p>We see in the above code, the start value is 1, the stop value is 10 but the last number is 9. The range of the values is 1 &#8211; 9<\/p>\n\n\n\n<p>Let\u2019s add a step value<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">for num in range(1, 10, 2):\n    print(num)\n\u00a0 \u00a0\n\n# Result# 1# 3# 5# 7# 9<\/pre>\n\n\n\n<p>In the above code block, the step value is 2, the numbers printed are increased by 2 every time.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\"><strong>Iterating By Sequence Index<\/strong><\/h2>\n\n\n\n<p>Apart from looping through lists and tuples, we can access elements using the indexing from the range() function.<\/p>\n\n\n\n<p>Indexing = variable_name[index_number]<\/p>\n\n\n\n<p>Example<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">fruit_basket = [\"orange\", \"apple\", \"banana\", \"grapes\"]\nprint(fruit_basket[0])  # orange\nprint(fruit_basket[1])  # apple\nprint(fruit_basket[2])  # banana\nprint(fruit_basket[3])  # grapes\n\ncolor_box = (\"Red\", \"Yellow\", \"Blue\", \"Purple\")\nprint(color_box[0])  # Red\nprint(color_box[1])  # Yellow\nprint(color_box[2])  # Blue\nprint(color_box[3])  # Purple<\/pre>\n\n\n\n<p>Instead of entering the numbers manually, we can set a range. Lists and tuples have an element at 0, which will be our start value, and our stop value will be the length of our list.<\/p>\n\n\n\n<p>Format<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">for variable_name in range(0, len(list)):<\/pre>\n\n\n\n<p>Or<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">for variable_name in range(len(list)):\n\n# recall that start value by default is 0 using this format<\/pre>\n\n\n\n<p>Let\u2019s print the length of the list to know the stop value<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">fruit_basket = [\"orange\", \"apple\", \"banana\",\"grapes\"]\nprint(len(fruit_basket)) # 4<\/pre>\n\n\n\n<p>The output is 4, therefore, our stop value is 4. When working with range, the last number is not added. The loop starts at 0 and ends at 3.<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">fruit_basket = [\"orange\", \"apple\", \"banana\", \"grapes\"]\ncount_of_fruits = len(fruit_basket)\nfor fruit_index in range(count_of_fruits):\n    print(fruit_index)\n\n# Result\n# 0\n# 1\n# 2\n# 3<\/pre>\n\n\n\n<p>In the above code block, the numbers are printed out. To access the elements, we make use of indexing &lt;actual_variable_container[variable_name_storing_numbers]&gt;. In this code sample, the format is;<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">&lt;fruit_basket[fruit_index]><\/pre>\n\n\n\n<p>We have;<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">fruit_basket = [\"orange\", \"apple\", \"banana\", \"grapes\"]\ncount_of_fruits = len(fruit_basket)\nfor fruit_index in range(count_of_fruits):\n    print(fruit_basket[fruit_index])\n\n# Result\n# orange\n# apple\n# banana\n# grapes<\/pre>\n\n\n\n<p>The same process applies to tuples,<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">color_box = (\"Red\", \"Yellow\", \"Blue\", \"Purple\")\ncount_of_colors = len(color_box)\nfor color_index in range(count_of_colors):\n    print(color_box[color_index])\n# Result\n# Red\n# Yellow\n# Blue\n# Purple<\/pre>\n\n\n\n<p>I can also&nbsp; set a start value for the list or tuple.<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">color_box = (\"Red\", \"Yellow\", \"Blue\", \"Purple\")\ncount_of_colors = len(color_box)\nfor color_index in range(1, count_of_colors):\n    print(color_box[color_index])\n# Result\n# Yellow\n# Blue\n# Purple<\/pre>\n\n\n\n<p>The start value starts from index 1 and ends at index 3.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\"><strong>Using conditional statements in For loop<\/strong><\/h2>\n\n\n\n<p>In for loops, we can have conditional statements in the code block.<\/p>\n\n\n\n<p>Format<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">for\u00a0 &lt;variable_name>\u00a0 in &lt;sequence_data(iterables)> :\u00a0\u00a0\u00a0\u00a0conditional statement:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print()<\/pre>\n\n\n\n<p>In the format above, we see that the conditional statement is indented under the for loop and ended with a colon \u201c:\u201d and the print statement is indented under the the conditional statement.&nbsp;<\/p>\n\n\n\n<p>The print has to be inside the code block of the conditional statement because if the condition is true , it returns the output, if it is not it does not return any output.<\/p>\n\n\n\n<p>What happens if you put the print() statement outside the indent of the conditional statement?<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">for\u00a0 &lt;variable_name>\u00a0 in &lt;sequence_data(iterables)> :\n\u00a0 \u00a0 conditional statement:\nprint()<\/pre>\n\n\n\n<p>Or&nbsp;<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">for\u00a0 &lt;variable_name>\u00a0 in &lt;sequence_data(iterables)> :\n\u00a0 \u00a0 conditional statement:\n\u00a0 \u00a0 print()<\/pre>\n\n\n\n<p>If the print() statement is put on the same indent as the for loop or same indent as the conditional statement, it throws an error saying there is an issue with the indentation.<\/p>\n\n\n\n<p>Examples<\/p>\n\n\n\n<p>Exercise I: in a list containing numbers print the numbers less than 5.<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">list_of_numbers = [1, 4, 6, 8, 9]\nfor numbers in list_of_numbers:\n\u00a0 \u00a0 if numbers > 5:\n\u00a0 \u00a0 \u00a0 \u00a0 print(numbers)\n\n# Result\n# 6\n# 8\n# 9<\/pre>\n\n\n\n<p>In the above code block, we see that the condition is to check if any number is greater than 5, after that we indented the print statement under the conditional statement \u201cif\u201d and the output is returned when the condition is true.<\/p>\n\n\n\n<p>If the print statement is brought outside the if statement( on the same indent as the if statement) or on the same indent as the for keyword, it throws an error.<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">list_of_numbers = [1, 4, 6, 8, 9]\nfor numbers in list_of_numbers:\n\u00a0 \u00a0 if numbers > 5:\n\u00a0 \u00a0 print(numbers)\n\n# Result\n# \u00a0 \u00a0 print(numbers)\n# \u00a0 \u00a0 ^\n# IndentationError: expected an indented block<\/pre>\n\n\n\n<p>Or&nbsp;<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">list_of_numbers = [1, 4, 6, 8, 9]\nfor numbers in list_of_numbers:\n\u00a0 \u00a0 if numbers > 5:\nprint(numbers)\n\n# Result\n# \u00a0 \u00a0 print(numbers)\n# \u00a0 \u00a0 ^\n# IndentationError: expected an indented block<\/pre>\n\n\n\n<p>II : print out fruits that have the letter \u201ce\u201d in their names.<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">fruit_basket = [\"orange\", \"apple\", \"banana\",\"grapes\"]\nfor fruits in fruit_basket:\n\u00a0 \u00a0 if \"e\" in fruits:\n\u00a0 \u00a0 \u00a0 \u00a0 print(fruits)\n\n# Result\n# orange\n# apple\n# grapes<\/pre>\n\n\n\n<p>In the fruit basket, we see 4 fruits but in the result, we see 3 fruits. The conditional statement checks if the letter \u201ce\u201d is in each name of the fruit. \u201cBanana\u201d is not printed because there is no letter \u201ce\u201d in the word.<\/p>\n\n\n\n<p>III: print out only numbers lesser&nbsp; than 6 in the range of 20 numbers.<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">for numbers in range(1,20):\n\u00a0 \u00a0 if numbers &lt; 6:\n\u00a0 \u00a0 \u00a0 \u00a0 print(numbers)\n# Result\n# 1\n# 2\n# 3\n# 4\n# 5<\/pre>\n\n\n\n<p>We see in the result above that the numbers returned are less than 6.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\"><strong>Break Statement<\/strong><\/h2>\n\n\n\n<p>Loops are repetitive and the process continues. When a break statement is introduced, the loop ends and the execution stops.<\/p>\n\n\n\n<p>Format<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">for\u00a0 &lt;variable_name>\u00a0 in &lt;sequence_data(iterables)> :\n\u00a0 \u00a0 conditional statement:\n\u00a0 \u00a0 break\n\u00a0 \u00a0 print()<\/pre>\n\n\n\n<p>The \u201cbreak\u201d statement is indented under the conditional statement and the print statement is on the same indent as the conditional statement. The \u201cbreak\u201d tells the loop to end the operation and the result printed are&nbsp; all the values before the break statement is used.<\/p>\n\n\n\n<p>Examples<\/p>\n\n\n\n<p>I&nbsp;<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">for numbers in range(1,20):\n\u00a0 \u00a0 if numbers == 6:\n\u00a0 \u00a0 \u00a0 \u00a0 break\n\u00a0 \u00a0 print(numbers)\n\n# Result\n# 1\n# 2\n# 3\n# 4\n# 5<\/pre>\n\n\n\n<p>In the above code block, the condition says when the variable &lt;numbers&gt; is equal \u201c==\u201d to \u201c6\u201d, end the loop \u201cbreak\u201d and the remaining numbers are printed. The double equals to sign \u201c==\u201d is used to compare values on the lefthand side and righthand side.&nbsp; The result shows 1 to 5, those numbers are not equal to 6 that is why they are printed.<\/p>\n\n\n\n<p>II&nbsp;<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">color_box = (\"Red\", \"Yellow\", \"Blue\", \"Purple\")\nfor color in color_box:\n\u00a0 \u00a0 if color == \"Blue\":\n\u00a0 \u00a0 \u00a0 \u00a0 break\n\u00a0 \u00a0 print(color)\n\u00a0 \u00a0\n# Result\n# Red\n# Yellow<\/pre>\n\n\n\n<p>In the above code block, the condition says when the variable &lt;color&gt; is equals to \u201cBlue\u201d at the end of&nbsp; the loop, the colors before \u201cBlue\u201d are printed.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\"><strong>Continue statement<\/strong><\/h2>\n\n\n\n<p>When the \u201cContinue\u201d statement is used in the for loop,&nbsp; the loop skips that iteration if the statement is true. The continue statement is placed after the conditional statement. The results printed are values after the conditional statement.<\/p>\n\n\n\n<p>Format<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">for\u00a0 &lt;variable_name>\u00a0 in &lt;sequence_data(iterables)> :\nconditional statement:\n\u00a0 \u00a0 \u00a0 continue\nprint()<\/pre>\n\n\n\n<p>Example<\/p>\n\n\n\n<p>I<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">for numbers in range(0,20):\n\u00a0 \u00a0 if numbers % 3 == 0:\n\u00a0 \u00a0 \u00a0 \u00a0 continue\n\u00a0 \u00a0 print(numbers)\n\n# Result\n# 1\n# 2\n# 4\n# 5\n# 7\n# 8\n# 10\n# 11\n# 13\n# 14\n# 16\n# 17\n# 19<\/pre>\n\n\n\n<p>In the above code block, the condition statement says when the variable &lt;numbers&gt; is divided by \u201c3\u201d and the remainder is 0 , the continue statement follows. Every time a number is divided by 3 and the remainder is 0, the number is skipped to the next.&nbsp;<\/p>\n\n\n\n<p>II<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">fruit_basket = [\"orange\", \"apple\", \"banana\",\"grapes\"]\nfor fruits in fruit_basket:\n\u00a0 \u00a0 if \"an\" in fruits:\n\u00a0 \u00a0 \u00a0 \u00a0 continue\n\u00a0 \u00a0 print(fruits)<\/pre>\n\n\n\n<p>We can see that any fruit that has \u201can\u201d in its spelling is skipped and the rest is printed.<\/p>\n\n\n\n<p><strong>Else in For Loop<\/strong><\/p>\n\n\n\n<p>e \u201celse\u201d statement es the exception in the loop. When the condition passed in the loop is false, the \u201celse\u201d statements handle it.<\/p>\n\n\n\n<p><br>Format<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">for\u00a0 &lt;variable_name>\u00a0 in &lt;sequence_data(iterables)> :\n\u00a0 \u00a0 conditional statement:\n\u00a0 \u00a0 \u00a0 \u00a0 print()\n\u00a0 \u00a0 else:\n\u00a0 \u00a0 \u00a0 \u00a0 print()<\/pre>\n\n\n\n<p>Example<\/p>\n\n\n\n<p>I<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">for numbers in range(1,10):\n\u00a0 \u00a0 if numbers % 3 == 0:\n\u00a0 \u00a0 \u00a0 \u00a0 print(numbers)\n\u00a0 \u00a0 else:\n\u00a0 \u00a0 \u00a0 \u00a0 print(\"Not divisible by 3\")\n\u00a0 \u00a0 \u00a0 \u00a0\n# Result\n# Not divisible by 3\n# Not divisible by 3\n# 3\n# Not divisible by 3\n# Not divisible by 3\n# 6\n# Not divisible by 3\n# Not divisible by 3\n# 9<\/pre>\n\n\n\n<p>In the code block above, the else statement tackles the result of the condition when it is false. Let\u2019s take the value \u201c1\u201d; when divided by 3, it does not give a reminder of 0; therefore the condition is false and the else statement is checked. For values that are not divisible by 3, print \u201cNot divisible by 3\u201d instead of the number. That is why the numbers not divisible by 3 have the phrase printed in the console.<\/p>\n\n\n\n<p>II<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">fruit_basket = [\"orange\", \"apple\", \"banana\",\"grapes\"]\nfor fruits in fruit_basket:\n\u00a0 \u00a0 if \"an\" in fruits:\n\u00a0 \u00a0 \u00a0 \u00a0 print(fruits)\n\u00a0 \u00a0 else:\n\u00a0 \u00a0 \u00a0 \u00a0 print(\"This is a fruit\")\n\u00a0 \u00a0 \u00a0 \u00a0\n# Result\n# orange\n# This is a fruit\n# banana\n# This is a fruit<\/pre>\n\n\n\n<p>In the code block, the condition says if the fruits have the letter \u201can\u201d in their spelling they should be printed; if not(for the else statement), the phrase \u201cThis is a fruit\u201d is printed instead.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\"><strong>Nested Loops<\/strong><\/h2>\n\n\n\n<p>A Nested loop consists of another \u201cfor\u201d loop to access elements in a data sequence.&nbsp;<\/p>\n\n\n\n<p>Format&nbsp;<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">for &lt;variable_name> in &lt;sequence_data(iterables)>:\nfor &lt;new_variable_name> in &lt;variable_name>:\nstatement<\/pre>\n\n\n\n<p>Example<\/p>\n\n\n\n<p>Result using one \u201cfor\u201d loop.<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">fruit_basket = [\"orange\", \"apple\"]\nfor fruits in fruit_basket:\n\u00a0 \u00a0 print(\"Fruit - \" + fruits)\n\u00a0 \u00a0\n# Result\n# Fruit - orange\n# Fruit - apple<\/pre>\n\n\n\n<p>Nested loop<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">fruit_basket = [\"orange\", \"apple\"]\nfor fruits in fruit_basket:\n\u00a0 \u00a0 for letters in fruits:\n\u00a0 \u00a0 \u00a0 \u00a0 print(\"Letter - \" + letters)\n# Result\n# Letter - o\n# Letter - r\n# Letter - a\n# Letter - n\n# Letter - g\n# Letter - e\n# Letter - a\n# Letter - p\n# Letter - p\n# Letter - l\n# Letter - e<\/pre>\n\n\n\n<p>In the code block, we see that the first time we looped through the items in the basket, the result was the fruit names. Now we loop through each fruit name with a new variable &lt;letters&gt; to get the new result.<\/p>\n\n\n\n<p><strong>Conclusion<\/strong><\/p>\n\n\n\n<p>Loops make the execution of tasks simpler and faster. You can play around with it to get familiar with it.&nbsp; Remember to practice to master the use of loops. To learn more about python for loops, check <a href=\"http:\/\/www.sololearn.com\/learn\/python\/introduction\">here<\/a>.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Many times, we need to repeat certain processes on a specific task. The repetition of these processes is called loops. They are very important in programming to execute tasks effectively. We ask the process to repeat the same operations on different values for a specific task to be solved.. In python, we can make use <a href=\"https:\/\/www.sololearn.com\/blog\/python-for-loop\/\" class=\"more-link\">&#8230;<span class=\"screen-reader-text\">  Python For Loop<\/span><\/a><\/p>\n","protected":false},"author":7,"featured_media":2121,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[31],"tags":[66,34,74],"_links":{"self":[{"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/posts\/1653"}],"collection":[{"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/users\/7"}],"replies":[{"embeddable":true,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/comments?post=1653"}],"version-history":[{"count":3,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/posts\/1653\/revisions"}],"predecessor-version":[{"id":2476,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/posts\/1653\/revisions\/2476"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/media\/2121"}],"wp:attachment":[{"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/media?parent=1653"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/categories?post=1653"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/tags?post=1653"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}