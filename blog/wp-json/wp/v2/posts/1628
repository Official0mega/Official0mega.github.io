{"id":1628,"date":"2022-11-16T20:19:25","date_gmt":"2022-11-16T20:19:25","guid":{"rendered":"https:\/\/blog-dev.sololearn.com\/?p=1628"},"modified":"2023-03-02T02:04:29","modified_gmt":"2023-03-02T02:04:29","slug":"css-flexbox","status":"publish","type":"post","link":"https:\/\/www.sololearn.com\/blog\/css-flexbox\/","title":{"rendered":"A Complete Guide To Flexbox"},"content":{"rendered":"\n<p>Flexibility in the human body allows better movement of the body and enhances the body&#8217;s performance physically. In web design, Flexbox brings much-needed flexibility when used to align items on the webpage and allows <a href=\"https:\/\/www.sololearn.com\/blog\/centering-in-css\/\" data-type=\"post\" data-id=\"1670\">better movements of the items<\/a>, which enhances web layout performance on different screen sizes.\u00a0<\/p>\n\n\n\n<p>Flexbox is a CSS module that is being hyped in the web design and development community. The reason for this hype is not wrong, as Flexbox has a lot of cool things under its belt.&nbsp;<\/p>\n\n\n\n<p>Before the flexbox, web developers used the <strong>float<\/strong> or <a href=\"https:\/\/www.sololearn.com\/blog\/html-tables\/\" data-type=\"post\" data-id=\"1723\"><strong>tables<\/strong> <\/a>property to align items in the CSS. Nowadays, flexbox allows you to create better, and\u00a0 more responsive layouts.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Main size and Cross size<\/h2>\n\n\n\n<p>When designing with CSS, you use <strong>Containers<\/strong> (<a href=\"https:\/\/www.sololearn.com\/learn\/languages\/html\">HTML tags<\/a>) to group items of similar properties.\u00a0<\/p>\n\n\n\n<p>You define a <strong>flex container<\/strong> in CSS by inserting <strong>display: flex;<\/strong> to your container or item tag on your style sheet.<\/p>\n\n\n\n<p>Flex Containers have various features such as the following. <\/p>\n\n\n\n<h3 class=\"wp-block-heading\">Main Axis<\/h3>\n\n\n\n<p>The main axis is the <strong>basic axis<\/strong> of the flexbox. It could be horizontal or vertical, depending on the <strong>flex-direction.&nbsp;<\/strong><\/p>\n\n\n\n<p><strong>For example:<\/strong><\/p>\n\n\n\n<p><strong>Let&#8217;s assume that the layout below is a flexbox layout.<\/strong><\/p>\n\n\n\n<p>The <strong><em>flex-direction <\/em><\/strong>of the layout below is set to <strong><em>row,<\/em><\/strong> the <strong><em>main axis <\/em><\/strong>will be from <strong><em>left to right <\/em><\/strong>(which means it is horizontal )<\/p>\n\n\n\n<p>&#8212;&#8212;&#8212;&#8212;&#8212;-&gt; <strong>main axis (from home to contact)<\/strong><\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td><strong>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; HOME&nbsp;<\/strong><\/td><td><strong>&nbsp; &nbsp; &nbsp; ABOUT<\/strong><\/td><td><strong>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; CONTACT<\/strong><\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p><strong>Example<\/strong>;&nbsp; Below is how it will look when the <strong><em>flex-direction<\/em><\/strong> is set to a column. The main axis will be vertical (top to bottom).&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td><br><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<\/strong><strong>HOME<\/strong><\/td><\/tr><tr><td><br><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<\/strong><strong>ABOUT<\/strong><\/td><\/tr><tr><td><br><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<\/strong><strong>CONTACT<\/strong><\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td><strong>Flex-direction<\/strong><\/td><td><strong>Main axis<\/strong><\/td><\/tr><tr><td><strong>Row<\/strong><\/td><td><strong>Horizontal ( text-direction)<\/strong><\/td><\/tr><tr><td><strong>Column<\/strong><\/td><td><strong>Vertical&nbsp; ( top to bottom)<\/strong><\/td><\/tr><tr><td><strong>Row-reverse<\/strong><\/td><td><strong>Horizontal (opposite to text direction )<\/strong><\/td><\/tr><tr><td><strong>column-reverse<\/strong><\/td><td><strong>Same as row reverse but vertical<\/strong><\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h3 class=\"wp-block-heading\">Main Size&nbsp;<\/h3>\n\n\n\n<p>The main size refers to the dimension of the main axis, which could be its height or width. The property specifies how tall or long your <strong>flexbox<\/strong> will be.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">Main Start or Main End<\/h3>\n\n\n\n<p>The main start and end are where the main axis of the flexbox starts and ends.&nbsp;<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">Cross Axis&nbsp;<\/h3>\n\n\n\n<p>The Flexbox secondary axis is the <strong>cross axis<\/strong>. It is the <strong>inverse<\/strong> of the main axis. This means that if the main axis is vertical, the cross axis will be horizontal, and vice versa.&nbsp;<\/p>\n\n\n\n<p>In other words, the <strong><em>cross axis is perpendicular to the main<\/em><\/strong> axis.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">Cross Size<\/h3>\n\n\n\n<p>The cross size is the <strong>dimension<\/strong> of the cross axis. It works together with the main size to determine the total size of your flexbox.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">Cross Start or Cross End&nbsp;<\/h3>\n\n\n\n<p>The cross start or end specifies where your flexbox\u2019s secondary axis begins and ends.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Flexbox properties<\/h2>\n\n\n\n<p>Flexbox properties are ways you can manipulate the <strong>containers and their items<\/strong> in a <strong>Flexbox layout<\/strong>.&nbsp;<\/p>\n\n\n\n<p>You can use values to apply the various properties to your flexbox layout. There are many flexbox properties grouped into the container and item properties.&nbsp;<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">Flexbox Container Properties<\/h3>\n\n\n\n<p>The flex container is the parent element of a <strong>flexbox layout<\/strong>. The value of the property is a reference to a flexbox container. We\u2019ve many <strong>container <\/strong>properties. They include:<\/p>\n\n\n\n<h4 class=\"wp-block-heading\">Display<\/h4>\n\n\n\n<p>This property must be declared using one of its two values to create a flex container.<\/p>\n\n\n\n<p>The property has two layouts, including.<\/p>\n\n\n\n<ul>\n<li><strong>Flex Layout&nbsp;<\/strong><\/li>\n<\/ul>\n\n\n\n<ul>\n<li><strong>in-Line Flex&nbsp;<\/strong><\/li>\n<\/ul>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">.container {\n  \/* to declare the flex display *\/\n  display: flex;\n}\n\n.container {\n  \/* to declare the inline-flex display *\/\n  display: inline-flex;\n}<\/pre>\n\n\n\n<h4 class=\"wp-block-heading\">Flex Direction&nbsp;<\/h4>\n\n\n\n<p>After declaring your <strong>flexbox container model,<\/strong> you will need to specify the direction of the flex items. You can use several <strong>values<\/strong> to specify the direction. The values are:<\/p>\n\n\n\n<ul>\n<li><strong>Row&nbsp;<\/strong><\/li>\n<\/ul>\n\n\n\n<p>It is the <strong>default<\/strong> value of the <a href=\"https:\/\/www.sololearn.com\/blog\/css-media-queries\/\" data-type=\"post\" data-id=\"1741\">CSS flex items<\/a>. This value displays the flex items in a row.<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">.container {\n  \/* to declare the row direction *\/\n  flex-direction: row;\n}<\/pre>\n\n\n\n<ul>\n<li><strong>Column<\/strong><\/li>\n<\/ul>\n\n\n\n<p>The column value displays flex items in a column.&nbsp;<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">.container {\n  \/* to declare the column direction *\/\n  flex-direction: column;\n}<\/pre>\n\n\n\n<ul>\n<li><strong>Row Reverse&nbsp;<\/strong><\/li>\n<\/ul>\n\n\n\n<p>The row reverse value inversely displays flex items in a row.&nbsp;<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">.container {\n  \/* to declare the row-reverse direction *\/\n  flex-direction: row-reverse;\n}<\/pre>\n\n\n\n<ul>\n<li><strong>Column Reverse&nbsp;<\/strong><\/li>\n<\/ul>\n\n\n\n<p>This value inversely displays the flex items in a column.<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">.container {\n  \/* to declare the column-reverse direction *\/\n  flex-direction: column-reverse;\n}<\/pre>\n\n\n\n<h4 class=\"wp-block-heading\">Flex wrap&nbsp;<\/h4>\n\n\n\n<p>The next property you need to add to your Flexbox to make it <a href=\"https:\/\/www.sololearn.com\/blog\/responsive-web-design\/\" data-type=\"post\" data-id=\"1725\"><strong>responsive<\/strong> <\/a>to different layouts is the Flex wrap.\u00a0<\/p>\n\n\n\n<p>Flex items will try to fit on one line, but with this property, you can change it and allow the items to wrap as desired. The values you can use are:<\/p>\n\n\n\n<ul>\n<li><strong>Nowrap<\/strong><\/li>\n<\/ul>\n\n\n\n<p>This value wraps your flex items into a single line. It is the <strong>default<\/strong> format and flex items will display in this format if you don\u2019t add the flex-wrap property.<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">.container {\n  \/* to declare flex-wrap value *\/\n  flex-wrap: nowrap;\n}<\/pre>\n\n\n\n<ul>\n<li><strong>Wrap<\/strong><\/li>\n<\/ul>\n\n\n\n<p>This value wraps your items into multiple lines. It is the preferred value for developers because it gives flexibility to items.&nbsp;<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">.container {\n  \/* to declare flex-wrap value *\/\n  flex-wrap: wrap;\n}<\/pre>\n\n\n\n<ul>\n<li><strong>Wrap-Reverse&nbsp;<\/strong><\/li>\n<\/ul>\n\n\n\n<p>This value inversely wraps your&nbsp; items into multiple lines.<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">.container {\n  \/* to declare flex-wrap value *\/\n  flex-wrap: wrap-reverse;\n}<\/pre>\n\n\n\n<p><strong>Flex-Flow<\/strong><\/p>\n\n\n\n<p>The flex-flow property is a combination of the flex-wrap and the flex-direction property. It allows you to declare the two properties in one line of code.<\/p>\n\n\n\n<p><strong>Example:<\/strong><\/p>\n\n\n\n<p>If you want your <strong>flex-directio<\/strong>n to be <strong>column <\/strong>and <strong>flex-wrap<\/strong> to be <strong>wrap<\/strong> you can use<strong> flex-flow to achieve that in one line of code.&nbsp;<\/strong><\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">.container {\n  \/* to declare flex-flow value *\/\n  flex-flow: column wrap;\n}<\/pre>\n\n\n\n<h4 class=\"wp-block-heading\">Justify-Content&nbsp;<\/h4>\n\n\n\n<p>You can align your items on the main axis using this property. It places your items at the end, center, and start of the axis.&nbsp;<\/p>\n\n\n\n<p>You can also space the items using this property. The values you can use are:<\/p>\n\n\n\n<ul>\n<li><strong>Flex-Start<\/strong><\/li>\n<\/ul>\n\n\n\n<p>Flex-start aligns your items at the<strong> start of the flex-direction<\/strong>.<\/p>\n\n\n\n<p>The value is the default value, and items will display in this format if you don\u2019t add the justify-content property.<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">.container {\n  \/* to declare Justify content value *\/\n  justify-content: flex-start;\n}<\/pre>\n\n\n\n<ul>\n<li><strong>Center<\/strong><\/li>\n<\/ul>\n\n\n\n<p>This value moves your items to the center of the main axis.<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">.container {\n  \/* to declare Justify content value *\/\n  justify-content: center;\n}<\/pre>\n\n\n\n<ul>\n<li><strong>Space Between&nbsp;<\/strong><\/li>\n<\/ul>\n\n\n\n<p>This value arranges items with spaces between them from the start to the end of the main axis.<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">Example: Let's Code\n.container {\n\/* to declare Justify content value *\/\n  justify-content: space-between;\n}<\/pre>\n\n\n\n<ul>\n<li><strong>Space Evenly<\/strong><\/li>\n<\/ul>\n\n\n\n<p>This value ensures that there are equal spaces between and around each item.<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">.container {\n  \/* to declare Justify content value *\/\n  justify-content: space-evenly;\n}<\/pre>\n\n\n\n<ul>\n<li><strong>Flex-End<\/strong><\/li>\n<\/ul>\n\n\n\n<p>You can use this value to align items to the end of the flex-direction.<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">.container {\n  \/* to declare Justify content value *\/\n  justify-content: flex-end;\n}<\/pre>\n\n\n\n<h4 class=\"wp-block-heading\">Align items<\/h4>\n\n\n\n<p>The Align items\u2019 property focuses on the cross axis. It moves items along the cross axis. The values you can use for this property are:<br><\/p>\n\n\n\n<ul>\n<li><strong>Stretch<\/strong><\/li>\n<\/ul>\n\n\n\n<p>This value is the default format. It spreads items to fill the container.<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">.container {\n  \/* to declare align-items value *\/\n  align-items: stretch;\n}<\/pre>\n\n\n\n<ul>\n<li><strong>Flex-Start<\/strong><\/li>\n<\/ul>\n\n\n\n<p>Like the justify-content property, these values also move items to the start of the flex-direction or the writing mode on the cross axis.<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">.container {\n  \/* to declare align-items value *\/\n  align-items: flex-start;\n}<\/pre>\n\n\n\n<ul>\n<li><strong>Center<\/strong><\/li>\n<\/ul>\n\n\n\n<p>The value moves items to the center of the cross axis.<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">.container {\n  \/* to declare align-items value *\/\n  align-items: center;\n}<\/pre>\n\n\n\n<ul>\n<li><strong>Baseline&nbsp;<\/strong><\/li>\n<\/ul>\n\n\n\n<p>The value specifies the alignment of items according to their content\u2019s baseline.<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">.container {\n  \/* to declare align-items value *\/\n  align-items: baseline;\n}<\/pre>\n\n\n\n<ul>\n<li><strong>Flex-End<\/strong><\/li>\n<\/ul>\n\n\n\n<p>These values move items to the end of the flex-direction or writing modes on the cross axis.<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">.container {\n  \/* to declare align-items value *\/\n  align-items: Flex-end;\n}<\/pre>\n\n\n\n<h4 class=\"wp-block-heading\">Align Content<\/h4>\n\n\n\n<p>This property aligns items around the extra spaces of the cross axis. It performs a similar function to the justify-content property.&nbsp;<\/p>\n\n\n\n<p>However, this property only works when:&nbsp;<\/p>\n\n\n\n<ul>\n<li>You have<strong> multi-line flexible boxes;<\/strong>&nbsp;<\/li>\n\n\n\n<li>And <strong>flex-wrap<\/strong> is not the default (it should either be in <strong><em>wrap <\/em><\/strong>or<strong> <\/strong><strong><em>wrap-reverse<\/em><\/strong>).<\/li>\n<\/ul>\n\n\n\n<p>The values you can use are:&nbsp;<\/p>\n\n\n\n<ul>\n<li>Flex-start<\/li>\n\n\n\n<li>Flex-end<\/li>\n\n\n\n<li>Center<\/li>\n\n\n\n<li>Space-between<\/li>\n\n\n\n<li>Space-around<\/li>\n\n\n\n<li>Space-evenly<\/li>\n\n\n\n<li>Stretch<\/li>\n<\/ul>\n\n\n\n<h3 class=\"wp-block-heading\">Flexbox Items Properties<\/h3>\n\n\n\n<p>The flexbox item property allows you to define the size and position of each item in a flexbox.&nbsp;&nbsp;<\/p>\n\n\n\n<h4 class=\"wp-block-heading\">Order<\/h4>\n\n\n\n<p>You can use this property to change <a href=\"https:\/\/www.sololearn.com\/blog\/css-absolute-fix-relative-positioning\/\" data-type=\"post\" data-id=\"1737\">your item\u2019s order or position<\/a>. To use this property, you simply add <em>order<\/em> to your item tag elements.\u00a0<\/p>\n\n\n\n<p>The item with the lowest number will be at the start while the item with the highest order will be moved to the end.<\/p>\n\n\n\n<p>The order property values are numerically positive numbers, such as 1, 2, 3, and 4. The property\u2019s default value is 0.<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">.item {\n  order: \/* specify the order number of the item here*\/ ;\n}<\/pre>\n\n\n\n<h4 class=\"wp-block-heading\">Flex grow<\/h4>\n\n\n\n<p>This property makes the flex item grow to a specified width or size as desired. It is used to specify how an item should grow to use the extra space on the webpage.<\/p>\n\n\n\n<p>The flex-grow values are also numerically positive numbers, such as 1, 2, 3, and 4. The property\u2019s default value is 0.<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">.item {\n  flex-grow: \/* specify the flex-grow number of the item here*\/ ;\n}<\/pre>\n\n\n\n<h4 class=\"wp-block-heading\">Flex shrink<\/h4>\n\n\n\n<p>When necessary, this property shrinks a flex item to a specific size. Its values, like the flex-grow, are positive numerical values.<\/p>\n\n\n\n<p>Its default value is 1.<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">.item {\n  flex-shrink: \/* specify the flex-shrink number of the item here*\/ ;\n}<\/pre>\n\n\n\n<h4 class=\"wp-block-heading\">Flex basis<\/h4>\n\n\n\n<p>The flex-basis specifies an item\u2019s default size.&nbsp;<\/p>\n\n\n\n<p>When you use flex-basis to define an item&#8217;s size and set a flex-shrink default value for the item. It prevents your item from overflowing and makes your item grow according to the container or viewport\u2019s size.<\/p>\n\n\n\n<p>If you want to use the item class size as your flex-basis size set flex-basis value to auto.<\/p>\n\n\n\n<p><strong>Note!<\/strong><\/p>\n\n\n\n<p>Flex-basis can be overridden by min and max-width values. So, you don\u2019t have to set min and max-width values because flex-basis provides a better responsive layout.&nbsp;<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">.item {\n  flex-basis: \/* specify the flex-basis here *\/ ;\n}<\/pre>\n\n\n\n<h4 class=\"wp-block-heading\">Flex<\/h4>\n\n\n\n<p>This is a combination of<strong><em> flex-grow<\/em><\/strong>, <strong><em>flex-shrinks<\/em><\/strong>, and <strong><em>flex-basis<\/em><\/strong>. When using the flex property, you can place the 3&nbsp; values in a single line.&nbsp;<\/p>\n\n\n\n<p>The first value is for the <strong><em>flex-grow<\/em><\/strong>, while the second and last value is for the <strong><em>flex-shrink<\/em><\/strong> and the<strong><em> flex-basis.<\/em><\/strong><\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">.item {\n  flex: ; \/* specify (flex-grow) (flex-shrink)\u00a0 (flex-basis) here*\/\n}<\/pre>\n\n\n\n<h4 class=\"wp-block-heading\">Align self<\/h4>\n\n\n\n<p>This property allows the alignment of a particular item without affecting other items in the container.&nbsp;<\/p>\n\n\n\n<p>The property uses the same values as the align-items property.<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">.item {\n  align-self: \/* specify your align-self value here *\/ ;\n}<\/pre>\n\n\n\n<h2 class=\"wp-block-heading\"><strong>Prefixing Flexbox<\/strong><\/h2>\n\n\n\n<p>Prefixing is a concept that has been around for a while. It allows web developers to add support for new <a href=\"https:\/\/www.sololearn.com\/blog\/html-forms\/\" data-type=\"post\" data-id=\"1728\">CSS features<\/a> before it adapts to different browsers.<\/p>\n\n\n\n<p>&nbsp;Below are some CSS browser prefixes.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td><strong>Browsers&nbsp;<\/strong><\/td><td><strong>Prefixes&nbsp;<\/strong><\/td><\/tr><tr><td>Android<br><\/td><td>-webkit-<\/td><\/tr><tr><td>Chrome<br><\/td><td>-webkit-<\/td><\/tr><tr><td>Firefox:<br><\/td><td>-moz-<\/td><\/tr><tr><td>Internet Explorer<br><\/td><td>-ms-<\/td><\/tr><tr><td>IOS<br><\/td><td>webkit-<\/td><\/tr><tr><td>Opera<br><\/td><td>-o-<\/td><\/tr><tr><td>Safari<br><\/td><td>-webkit-<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h3 class=\"wp-block-heading\"><strong>Introducing a Prefix<\/strong><\/h3>\n\n\n\n<p>Before adding a prefix to your browser, make sure that the feature supports prefixes. This is because most CSS features do not need prefixes.&nbsp;<\/p>\n\n\n\n<p>To prefix a flexbox, you\u2019ve to create the flexbox property and associate it with each CSS browser prefix.&nbsp;<\/p>\n\n\n\n<p><strong>Illustration:<\/strong><\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">\/* let's use align-items for this feature*\/\n.Feature {\n  -webkit-align-items: stretch;\n  -moz-align-items: stretch;\n  -ms-align-items: stretch;\n  align-items: stretch;\n}<\/pre>\n\n\n\n<h2 class=\"wp-block-heading\"><strong>Conclusion<\/strong><\/h2>\n\n\n\n<p>With Flexbox, you can align content according to your needs and requirements. Thus, making use of all available screen space the way you want on all devices.&nbsp;<\/p>\n\n\n\n<p>Do you want to learn more about Flexbox? consider taking a <a href=\"https:\/\/www.sololearn.com\/learn\/courses\/css-introduction\">CSS course<\/a> on Sololearn\u2019s website. Also, Sololearn offers courses on different programming languages that might interest you.<br><br><\/p>\n\n\n\n<p><strong>References<\/strong><\/p>\n\n\n\n<ul>\n<li>Kyrnin, J. (2020, November 22). How and why you would want to use CSS vendor prefixes in your website . ThoughtCo. Retrieved August 12, 2022, from <a href=\"https:\/\/www.thoughtco.com\/css-vendor-prefixes-3466867#:~:text=CSS%20vendor%20prefixes%2C%20also%20sometimes,fully%20supported%20in%20all%20browsers\" target=\"_blank\" rel=\"noopener\">https:\/\/www.thoughtco.com\/css-vendor-prefixes-3466867#:~:text=CSS%20vendor%20prefixes%2C%20also%20sometimes,fully%20supported%20in%20all%20browsers<\/a>.&nbsp;<\/li>\n<\/ul>\n\n\n\n<ul>\n<li>Damme, T. V., Merkenich, J., Coyier, C., Mejia, L., Seyedi, M., Gaebel, D., Khare, M., Graham, G., Rendle, R., El-Alfy, A., Matuzovic, M., &amp;amp; Holt, B. (2022, April 29). A complete guide to flexbox: CSS-tricks. CSS. Retrieved August 12, 2022, from <a href=\"https:\/\/css-tricks.com\/snippets\/css\/a-guide-to-flexbox\/\" target=\"_blank\" rel=\"noopener\">https:\/\/css-tricks.com\/snippets\/css\/a-guide-to-flexbox\/<\/a>&nbsp;<\/li>\n<\/ul>\n\n\n\n<ul>\n<li>Andrew, R., About The AuthorRachel Andrew is a web developer, &amp;amp; Author, A. T. (2018, August 2). What happens when you create a Flexbox flex container? Smashing Magazine. Retrieved August 12, 2022, from <a href=\"https:\/\/www.smashingmagazine.com\/2018\/08\/flexbox-display-flex-container\/\" target=\"_blank\" rel=\"noopener\">https:\/\/www.smashingmagazine.com\/2018\/08\/flexbox-display-flex-container\/<\/a>&nbsp;<\/li>\n<\/ul>\n","protected":false},"excerpt":{"rendered":"<p>Flexibility in the human body allows better movement of the body and enhances the body&#8217;s performance physically. In web design, Flexbox brings much-needed flexibility when used to align items on the webpage and allows better movements of the items, which enhances web layout performance on different screen sizes.\u00a0 Flexbox is a CSS module that is <a href=\"https:\/\/www.sololearn.com\/blog\/css-flexbox\/\" class=\"more-link\">&#8230;<span class=\"screen-reader-text\">  A Complete Guide To Flexbox<\/span><\/a><\/p>\n","protected":false},"author":7,"featured_media":2111,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[33],"tags":[40,78],"_links":{"self":[{"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/posts\/1628"}],"collection":[{"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/users\/7"}],"replies":[{"embeddable":true,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/comments?post=1628"}],"version-history":[{"count":5,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/posts\/1628\/revisions"}],"predecessor-version":[{"id":2446,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/posts\/1628\/revisions\/2446"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/media\/2111"}],"wp:attachment":[{"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/media?parent=1628"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/categories?post=1628"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/tags?post=1628"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}