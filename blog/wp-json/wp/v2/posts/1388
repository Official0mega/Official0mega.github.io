{"id":1388,"date":"2021-11-03T09:15:00","date_gmt":"2021-11-03T09:15:00","guid":{"rendered":"https:\/\/blog-dev.sololearn.com\/2022\/11\/03\/basic-and-intermediate-python-and-data-structures\/"},"modified":"2023-02-23T16:06:28","modified_gmt":"2023-02-23T16:06:28","slug":"basic-and-intermediate-python-and-data-structures","status":"publish","type":"post","link":"https:\/\/www.sololearn.com\/blog\/basic-and-intermediate-python-and-data-structures\/","title":{"rendered":"Basic and Intermediate Python, and Data Structures"},"content":{"rendered":"<p><span style=\"font-weight: 400;\">It\u2019s no surprise that many <\/span><a href=\"https:\/\/www.sololearn.com\/Courses\/\"><span style=\"font-weight: 400;\">beginning coders<\/span><\/a><span style=\"font-weight: 400;\"> choose to <\/span><a href=\"https:\/\/www.sololearn.com\/learning\/1073\"><span style=\"font-weight: 400;\">learn Python<\/span><\/a><span style=\"font-weight: 400;\">. For years now, Python has gained a reputation as one of the most versatile and easily learned programming languages out there. As Python continues to evolve to meet the growing needs of innovative new technology sectors like machine learning and data science, the rewards for becoming well-versed in Python for developers continue to grow also.<\/span><\/p>\n<p><span style=\"font-weight: 400;\">But there is a difference between knowing the basic structures of Python, and progressing to the more advanced concepts (such as data structures and data visualization) that more advanced software and machine learning applications require. Thus, it is important for <\/span><a href=\"https:\/\/www.sololearn.com\/learning\/1157\"><span style=\"font-weight: 400;\">beginning programmers<\/span><\/a><span style=\"font-weight: 400;\"> to know the difference between basic and <\/span><a href=\"https:\/\/www.sololearn.com\/learning\/1158\"><span style=\"font-weight: 400;\">intermediate Python<\/span><\/a><span style=\"font-weight: 400;\">, as well as the <\/span><a href=\"https:\/\/www.sololearn.com\/learning\/1159\"><span style=\"font-weight: 400;\">data structures<\/span><\/a><span style=\"font-weight: 400;\"> used by experienced Python programmers for more complex applications and programs.<\/span><\/p>\n<p><span style=\"font-weight: 400;\">This guide is meant for <\/span><a href=\"https:\/\/www.sololearn.com\/\"><span style=\"font-weight: 400;\">newer programmers<\/span><\/a><span style=\"font-weight: 400;\"> to learn those differences, and to understand the basic concepts at each level to help set learning goals and choose the right coding classes to advance as a Python developer. Let\u2019s take a deeper look at the Python language, and what you need to know to master the more advanced levels and help supercharge your own Python programming career and ambitions.<\/span><\/p>\n<p><img decoding=\"async\" src=\"https:\/\/api.sololearn.com\/Uploads\/Basic_and_Intermediate_Python__and_Data_Structures_blog_02.jpg\" alt=\"&quot;Basic\"><\/p>\n<h2><strong>Python Basics Every Developer Should Know&nbsp;<\/strong><\/h2>\n<p><span style=\"font-weight: 400;\">Experienced programmers often point to several key elements that form a basic understanding of the Python language for any developer. These key elements include variables, control flow\/conditions, looping, functions, and user input\/reading a file. Let\u2019s explore what these different terms mean, and what you need to learn to master them:<\/span><\/p>\n<h3><strong>Variables&nbsp;<\/strong><\/h3>\n<p><span style=\"font-weight: 400;\">The easiest way to understand variables is to think of them as a word that stores a value within it. In Python, you can simply define variables and assign values, which can help you create basic logic (for example, storing the number 1 within a variable called \u201cone\u201d). Beyond simply integers, there are other data types that can be created and stored, such as booleans (i.e. True\/False), strings, float, and others.<\/span><\/p>\n<h3><strong>Control Flow&nbsp;<\/strong><\/h3>\n<p><span style=\"font-weight: 400;\">An easy way to understand the control flow is to think of conditional statements (often thought of as \u201cIf\/Then\u201d statements, as in \u201cIf X action happens, then X result occurs\u201d). If uses an expression to evaluate to True or False, so if the result is True, the logic subsequently executes whatever command\/function is included within that statement. This could be as simple as writing the code as \u201cIf true: X happens\u201d or could be done with rules, such as \u201cIf 2&gt;1, then execute the print code\u201d.<\/span><\/p>\n<p><span style=\"font-weight: 400;\">Meanwhile, the \u201celse\u201d statement controls what happens if the \u201cif\u201d expression is False (i.e. if something doesn\u2019t meet the parameters to trigger the True logic). Else works as the alternative action. There are other control flow statements (such as an \u201celif\u201d statement) that can offer other logic options while coding in possible actions and results into a particular program or app.<\/span><\/p>\n<h3><strong>Looping&nbsp;<\/strong><\/h3>\n<p><span style=\"font-weight: 400;\">Looping is a method for handling iterations, or repetitive processes that would be frustrating and painful to code individually over and over again. If you hear the terms \u201cIterator\u201d or managing iterations, this is handled under the umbrella of looping. Here are a few specific examples of what looping can look like in Python:<\/span><\/p>\n<ul>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">\u201cWhile\u201d looping: In this case, \u201cwhile\u201d the statement is True, the code inside a particular block will be executed. The while loop requires a \u201cloop condition\u201d and if it remains True, it will simply continue iterating.<\/span><\/li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">\u201cFor\u201d looping: In this case, you pass the variable \u201cnum\u201d to the block and the \u201cfor\u201d statement will perform the iteration for you.&nbsp;<\/span><\/li>\n<\/ul>\n<h3><strong>Functions&nbsp;<\/strong><\/h3>\n<p><span style=\"font-weight: 400;\">Functions could be considered an Advanced Basic concept, since you need to be versed in the true basics above to use them effectively. Functions are pieces of code that perform specific operational tasks and can be used multiple times as needed. Functions combine different pieces of logic to return more complex results or queries to users interacting with the front-end of a Python-powered app or software program.<\/span><\/p>\n<h3><strong>User Input and Reading a File&nbsp;<\/strong><\/h3>\n<p><span style=\"font-weight: 400;\">Finally, knowing how to take inputs from the user or any file is key to actually designing an app or software program to respond quickly, efficiently, and most importantly, correctly. This includes knowing how to open, read, write, and close files while coding within Python.<\/span><\/p>\n<h2><strong>Intermediate Python Concepts&nbsp;<\/strong><\/h2>\n<p><span style=\"font-weight: 400;\">Once you have progressed past mastering the basic fundamentals above, you are ready to start learning some of the intermediate Python concepts. Similar to above, here is a short list of some of the most commonly understood \u201cIntermediate\u201d Python fundamentals:<\/span><\/p>\n<h3><strong>Object-Oriented Programming<\/strong><\/h3>\n<p><span style=\"font-weight: 400;\">Object-oriented programming (often referred to in shorthand as OOP) is a programming paradigm centered on the concept of &#8220;objects&#8221;, which can include both data and code. The data takes the form of fields (often referred to as attributes or properties), and code, in the form of procedures (or methods). In Python, there are some basic design patterns of OOP that intermediate programmers need to master, including how to define classes, objects, methods, and some other elements to code more complex processes into your app or software.<\/span><\/p>\n<p><span style=\"font-weight: 400;\">There are also some more advanced OOP concepts like polymorphism, data abstraction, Dunder methods, and encapsulation which offer further programming benefits, but could be considered Advanced Intermediate concepts that come after the ones noted above.<\/span><\/p>\n<h3><strong>List Comprehensions&nbsp;<\/strong><\/h3>\n<p><span style=\"font-weight: 400;\">This method allows programmers to slickly define and create lists based on existing lists in a program. This allows for more compact programming and faster operations, which can increase the speed (and thus, the user experience or UX) of a particular Python program.<\/span><\/p>\n<h3><strong>Lambda Functions&nbsp;<\/strong><\/h3>\n<p><span style=\"font-weight: 400;\">Lambda functions are quite simply small anonymous functions that you can use along with the map method to help clean up your code and keep it simple. This is essential especially if you are working as part of a programming team, where developers may need to swap spots and work on each other\u2019s code (and thus, cleaner code reduces the time needed for explanations or detailed coding comments\/notes as you write).<\/span><\/p>\n<h3><strong>Inheritance&nbsp;<\/strong><\/h3>\n<p><span style=\"font-weight: 400;\">Inheritance allows programmers to define a particular class that inherits all the methods and properties of another class (essentially, allowing you to \u201ccopy and paste\u201d the structural elements of another class to avoid repetitive and time-consuming coding). For an easy example, if you\u2019re creating different animal classes and require a dog class, you could simply inherit all methods and properties of a generic \u2018Animal\u2019 class into the new \u2018Dog\u2019 class. Since \u201cDog\u201d will use the same set of properties, this lets you quickly add new classes that are similar.<\/span><\/p>\n<h3><strong>Modules, Libraries, and PIP&nbsp;<\/strong><\/h3>\n<p><span style=\"font-weight: 400;\">Like any open-sourced language, one of the biggest benefits of Python is the ever-expanding list of user-created libraries and modules that can be installed to perform advanced functions (and thus, save you tons of time coding the same things from scratch). PIP (PIP Installs Packages) and libraries generally exist to solve problems that previous Python developers discovered, and can perform advanced functionality to power portions of your app or software. Some of the most widely used include Requests (for sending HTTP requests), Pillow (for image processing), Selenium (for automating browsers), MoviePy (for video editing), and BeautifulSoup (for web scraping).<\/span><\/p>\n<h2><strong>Data Structures<\/strong><\/h2>\n<p><span style=\"font-weight: 400;\">Understanding Python data structures is another essential piece to truly mastering and realizing the benefits of the language at a more advanced level. To put it simply, data structures are the fundamental constructs around which you build your programs. Each data structure provides a particular way of organizing data so it can be accessed efficiently, depending on your use case. Python ships with an extensive set of data structures included in its <\/span><a href=\"https:\/\/docs.python.org\/3\/library\/index.html\" target=\"_blank\" rel=\"noopener\"><span style=\"font-weight: 400;\">standard library<\/span><\/a><span style=\"font-weight: 400;\">.<\/span><\/p>\n<p><span style=\"font-weight: 400;\">Here are some of the most important data structures for you to learn:<\/span><\/p>\n<h3><strong>Dictionaries, Maps, and Hash Tables&nbsp;<\/strong><\/h3>\n<p><span style=\"font-weight: 400;\">In Python, dictionaries (or dicts for short) are a central data structure which store an arbitrary number of objects, with each object identified by a unique dictionary key. Dictionaries are also often called maps, hashmaps, lookup tables, or associative arrays. No matter which name you use, these tools allow for the efficient lookup, insertion, and deletion of any object associated with a given key. Dictionaries are used by almost every major programming language, and are one of the most essential data structures to learn no matter what you plan to build or work on.<\/span><\/p>\n<p><span style=\"font-weight: 400;\">For an easier analogy for understanding dictionaries, think of a phone book. Phone books allow you to quickly retrieve the information (phone number) associated with a given key (a person\u2019s name). Instead of having to read a phone book front to back to find someone\u2019s number, you can jump more or less directly to a name and look up the associated information.<\/span><\/p>\n<h3><strong>Arrays&nbsp;<\/strong><\/h3>\n<p><span style=\"font-weight: 400;\">Like dictionaries, arrays are also fundamental data structures that appear in almost every major programming language, and can be used along with a wide variety of algorithms. Arrays are composed of fixed-size data records that allow every element to be efficiently and quickly located based on its particular index. Because arrays store information in adjoining memory blocks, they are known as contiguous data structures (unlike linked data structures such as a linked list).<\/span><\/p>\n<p><span style=\"font-weight: 400;\">What do arrays do for programmers? They make it much easier and quicker to look up any element contained within an array, based on the element\u2019s index. Python includes several array-like data structures in its standard library (and there are a variety of other user-generated ones available throughout the web).<\/span><\/p>\n<h3><strong>Records, Structs, and Data Transfer Objects&nbsp;<\/strong><\/h3>\n<p><span style=\"font-weight: 400;\">In contrast to arrays, record data structures provide a fixed number of fields, each of which can be assigned a unique name and also may have a different type. Just like the other areas, Python offers programmers several data types to choose from, which can be used to implement records, structures, and data transfer objects depending on your particular programming need or software use case. Knowing the difference between them and which is most useful for a particular programming situation is another method to master to advance as a Python developer.<\/span><\/p>\n<h3><strong>Sets and Multisets&nbsp;<\/strong><\/h3>\n<p><span style=\"font-weight: 400;\">A set refers to an unordered collection of objects that doesn\u2019t allow duplicate elements. Sets are commonly used to quickly test a value for membership in the set, to insert or delete new values from a set, as well as to compute the union or intersection of two sets. In a proper set implementation, membership tests are expected to run in fast O(1) time. Union, intersection, difference, and subset operations should take O(n) time on average. The set implementations included in Python\u2019s standard library follow these performance characteristics. Similar to dictionaries, sets have been created and designed specifically in Python with an eye toward making them easy to create for programmers.&nbsp;<\/span><\/p>\n","protected":false},"excerpt":{"rendered":"<p>It\u2019s no surprise that many beginning coders choose to learn Python. For years now, Python has gained a reputation as one of the most versatile and easily learned programming languages out there. As Python continues to evolve to meet the growing needs of innovative new technology sectors like machine learning and data science, the rewards <a href=\"https:\/\/www.sololearn.com\/blog\/basic-and-intermediate-python-and-data-structures\/\" class=\"more-link\">&#8230;<span class=\"screen-reader-text\">  Basic and Intermediate Python, and Data Structures<\/span><\/a><\/p>\n","protected":false},"author":7,"featured_media":1387,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[31],"tags":[23],"_links":{"self":[{"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/posts\/1388"}],"collection":[{"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/users\/7"}],"replies":[{"embeddable":true,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/comments?post=1388"}],"version-history":[{"count":2,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/posts\/1388\/revisions"}],"predecessor-version":[{"id":2332,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/posts\/1388\/revisions\/2332"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/media\/1387"}],"wp:attachment":[{"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/media?parent=1388"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/categories?post=1388"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/tags?post=1388"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}