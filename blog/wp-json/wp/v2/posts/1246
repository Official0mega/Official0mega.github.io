{"id":1246,"date":"2021-11-03T09:11:00","date_gmt":"2021-11-03T09:11:00","guid":{"rendered":"https:\/\/blog-dev.sololearn.com\/2022\/11\/03\/an-overview-of-typescript-angular-and-nest-js\/"},"modified":"2023-02-23T16:21:38","modified_gmt":"2023-02-23T16:21:38","slug":"an-overview-of-typescript-angular-and-nest-js","status":"publish","type":"post","link":"https:\/\/www.sololearn.com\/blog\/an-overview-of-typescript-angular-and-nest-js\/","title":{"rendered":"An Overview Of Typescript, Angular And Nest JS"},"content":{"rendered":"<h1><strong>An Overview of TypeScript, Angular, and Nest JS<\/strong><\/h1>\n<p><span style=\"font-weight: 400;\">If you are a developer <\/span><a href=\"https:\/\/www.sololearn.com\/Course\/JavaScript\/\"><span style=\"font-weight: 400;\">familiar with JavaScript<\/span><\/a><span style=\"font-weight: 400;\">, you know that the language offers an ever-growing set of use cases and applications. But getting the most out of <\/span><a href=\"https:\/\/www.sololearn.com\/Blog\/42\/what-is-javascript-used-for-here-is-everything-you-need-to-know\/\"><span style=\"font-weight: 400;\">JavaScript<\/span><\/a><span style=\"font-weight: 400;\"> isn\u2019t just about the language itself &#8212; using subsets and frameworks specifically designed for certain uses can make programming easier and more efficient and help you actualize some of your creative ideas.<\/span><\/p>\n<p><span style=\"font-weight: 400;\">Experienced JavaScript programmers are aware of some of the inherent downsides of the basic version of the language. Most notably, these include:<\/span><\/p>\n<ul>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Inconsistent browser support &#8211; because the browser interprets JavaScript differently in different browsers, the code needs to be run on various platforms being published, which can be frustrating and time-consuming.<\/span><\/li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Limited debugging &#8211; while some editors do support debugging, they are not nearly as efficient as C\/C++ editors, for example.<\/span><\/li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">No multiple inheritance support, which may be required by some programs<\/span><\/li>\n<\/ul>\n<p><span style=\"font-weight: 400;\">These are just a few of the well-known issues with JavaScript, but fortunately like any commonly used language, a suite of solutions and enhanced tools have been created to help solve or minimize some of these problems.&nbsp;<\/span><\/p>\n<p><span style=\"font-weight: 400;\">That\u2019s where this guide comes in &#8211; first, we will introduce you to <\/span><a href=\"https:\/\/www.typescriptlang.org\/\" target=\"_blank\" rel=\"noopener\"><span style=\"font-weight: 400;\">TypeScript<\/span><\/a><span style=\"font-weight: 400;\">, an \u201cenhanced JavaScript\u201d language that is becoming increasingly popular among JavaScript developers for offering a suite of upgrades that help address some of the base language\u2019s limitations. Then, we will explore two of the most popular frameworks for working with TypeScript to build applications &#8211; <\/span><a href=\"https:\/\/angularjs.org\/\" target=\"_blank\" rel=\"noopener\"><span style=\"font-weight: 400;\">AngularJS<\/span><\/a><span style=\"font-weight: 400;\"> and <\/span><a href=\"https:\/\/nestjs.com\/\" target=\"_blank\" rel=\"noopener\"><span style=\"font-weight: 400;\">NestJS<\/span><\/a><span style=\"font-weight: 400;\">.<\/span><\/p>\n<h2><strong>TypeScript Guide<\/strong><\/h2>\n<h3>&nbsp;<\/h3>\n<h3><strong>What is TypeScript?<\/strong><\/h3>\n<p><span style=\"font-weight: 400;\">While technically a superset of JavaScript, the easiest way for a novice to understand TypeScript is to think of it simply as JavaScript with added features. Or put another way, TypeScript is essentially JavaScript specifically employed for application development. At its essence, TypeScript is a strongly typed, object oriented, compiled language. It was originally created by Anders Hejlsberg (the same person responsible for creating <\/span><a href=\"https:\/\/www.sololearn.com\/Course\/CSharp\/\"><span style=\"font-weight: 400;\">C#<\/span><\/a><span style=\"font-weight: 400;\">) at Microsoft. However, TypeScript is more than just a language; it is also a set of tools.&nbsp;<\/span><\/p>\n<p><span style=\"font-weight: 400;\">But why was it needed? As experienced JavaScript developers know, as JavaScript code grows, it has a tendency to become messy, making it a struggle to maintain and reuse existing code. Additionally, the language\u2019s failure to embrace key features of Object Orientation, strong type checking and compile-time error checks restricts JavaScript from operating at the enterprise level for use as a full-fledged server-side technology. Because of these issues, TypeScript was designed to bridge this gap.<\/span><\/p>\n<p><span style=\"font-weight: 400;\">Structurally, TypeScript has the following three central components:<\/span><\/p>\n<ul>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">The language itself \u2212 this includes syntax, keywords, and type annotations.<\/span><\/li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">The compiler \u2212 this feature converts instructions written in TypeScript to the JavaScript equivalent.<\/span><\/li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">The TypeScript Language Service or TLS \u2212 This feature exposes an additional layer around the core compiler pipeline that serves as editing applications. The language service supports traditional editor operations like statement completions, signature help, code formatting and outlining, colorization, and more.<\/span><\/li>\n<\/ul>\n<h3><strong>So what can you use TypeScript for?<\/strong><\/h3>\n<p><span style=\"font-weight: 400;\">As an enhanced version of JavaScript, TypeScript was designed to offer some specific benefits and use cases for programmers. Some of the most notable include:<\/span><\/p>\n<ul>\n<li style=\"font-weight: 400;\"><strong>Compilation<\/strong><span style=\"font-weight: 400;\"> \u2212 Since JavaScript is an interpreted language, validity can only be proven by running the code to test it. This process leads to hours of checking for bugs after creating code, a tedious and frustrating process. TypeScript solves this through an error-checking feature, which can compile the code and generate errors from the compilation. This means errors are highlighted before the script is run, saving valuable time.<\/span><\/li>\n<li style=\"font-weight: 400;\"><strong>Strong Static Typing<\/strong><span style=\"font-weight: 400;\"> \u2212 TypeScript includes an optional static typing and type inference system through TypeScript Language Service, or TLS. Variable type may be inferred by the TypeScript Language Service based on its value.<\/span><\/li>\n<li style=\"font-weight: 400;\"><strong>Supports<\/strong><span style=\"font-weight: 400;\"> &#8211; TypeScript supports type definitions for existing JavaScript libraries. The TypeScript Definition file (with .d.ts extension) provides definition for external JavaScript libraries, which meansTypeScript code can contain these libraries. Additionally, TypeScript supports Object Oriented Programming concepts like classes, interfaces, inheritance, and others.<\/span><\/li>\n<li style=\"font-weight: 400;\"><strong>Flexibility<\/strong><span style=\"font-weight: 400;\"> &#8211; while not necessarily specific to TypeScript, one of the biggest reasons for its growing popularity are the rapidly growing needs of web applications, which are outpacing the base JavaScript language\u2019s functionality. TypeScript offers the additional tools and features to meet the demand of modern, dynamic web applications in a superior way to the base language.<\/span><\/li>\n<\/ul>\n<p><img decoding=\"async\" src=\"https:\/\/api.sololearn.com\/Uploads\/An_Overview_of_TypeScript__Angular__and_Nest_JS_2.jpg\" alt=\"An Overview Of Typescript Angular And Nest JS by SoloLearn\"><\/p>\n<h2><strong>Angular Guide<\/strong><\/h2>\n<h3>&nbsp;<\/h3>\n<h3><strong>What is Angular?<\/strong><\/h3>\n<p><span style=\"font-weight: 400;\">While TypeScript could be considered an \u201cenhanced language\u201d, AngularJS is a structural framework used to create dynamic web apps. It lets you employ HTML as your template language, as well as extend the HTML syntax to express application components concisely.&nbsp;<\/span><\/p>\n<p><span style=\"font-weight: 400;\">AngularJS also offers data binding and dependency injection features, which can help eliminate much of the code you would otherwise have to time-consumingly write. Because all of this also takes place within the browser, AngularJS works well alongside server technology.<\/span><\/p>\n<p><span style=\"font-weight: 400;\">Additionally, AngularJS can simplify application development by offering a greater level of abstraction to any developer. While this limits flexibility, which may annoy some programmers, AngularJS was built following the <\/span><a href=\"https:\/\/www.sololearn.com\/Blog\/49\/what-is-crud\/\"><span style=\"font-weight: 400;\">principles of CRUD<\/span><\/a><span style=\"font-weight: 400;\"> in mind. Since CRUD applications represent the majority of web applications being built these days, this loss of flexibility is offset by the many use cases of the Angular framework.<\/span><\/p>\n<h3><strong>What can you use Angular for?<\/strong><\/h3>\n<p><span style=\"font-weight: 400;\">So how does Angular enhance your JavaScript projects? What additional benefits does this framework add to your toolkit? Here are some of the biggest benefits of using AngularJS:<\/span><\/p>\n<ul>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Angular offers not only tools, but additionally design patterns that help with project layout and readability. Well-designed Angular applications allow you to avoid a hodgepodge of classes and methods that are hard to both test and modify.<\/span><\/li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Angular offers a variety of tools to start designing and building the application without having to do much creation of your own. For example:<\/span><\/li>\n<ul>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">There are directives to provide dynamic behavior to HTML elements&nbsp;<\/span><\/li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">FormControl can help you create forms and introduce various validation rules depending on your needs.&nbsp;<\/span><\/li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">You can send asynchronous HTTP requests&nbsp;<\/span><\/li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Routing is very easy to set up<\/span><\/li>\n<\/ul>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Components are decoupled<\/span><\/li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Testing is a central focus of Angular, which supports both unit and end-to-end testing<\/span><\/li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Angular is mobile and desktop-ready, meaning a single framework for multiple platforms, essential for any modern application<\/span><\/li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Better user interfaces (UIs) &#8211; because a UI with AngularJS is fully structured, manipulation and understanding of the components is significantly easier for a developer. Markups are also significantly easier for designers to understand, allowing for easier collaboration between designers and developers and a more efficient team experience<\/span><\/li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Like JavaScript as a whole, Angular has a thriving community for support and active maintenance of the framework, giving novice Angular uses plenty of resources for support.<\/span><\/li>\n<\/ul>\n<h2><strong>NestJS Guide<\/strong><\/h2>\n<h3>&nbsp;<\/h3>\n<h3><strong>What is NestJS?<\/strong><\/h3>\n<p><span style=\"font-weight: 400;\">Similar to AngularJS, NestJS is another framework that works alongside the main JavaScript language. It is often employed for building efficient, scalable NodeJS server-side applications. It is also built with and fully supports TypeScript.<\/span><\/p>\n<p><span style=\"font-weight: 400;\">NestJS both provides a level of abstraction above more common NodeJS frameworks like Express or Fastify, and exposes their APIs directly to programmers. This allows programmers freedom to use the wide variety of third-party modules which are available for the underlying platform.<\/span><\/p>\n<p><span style=\"font-weight: 400;\">NestJS was developed by Kamil Mysliwiec and designed specifically as a framework to rapidly build server-side applications. Mysliwiec drew heavily on the benefits provided by Angular, and the structure of Nest applications reflect the influence of the Angular framework. For example, the use of controllers, providers, modules, and pipes all hearken to Angular.&nbsp;<\/span><\/p>\n<h3><strong>What can you use NestJS for?<\/strong><\/h3>\n<p><span style=\"font-weight: 400;\">Like Angular, NestJS offers some specific user benefits that make it an attractive tool for JavaScript developers:<\/span><\/p>\n<ul>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Since NestJS is very annotation-centric, many unsightly elements of NodeJS and JavaScript are hidden beneath the annotations. The result is a cleaner, more clear look that makes development efficient and improves readability<\/span><\/li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Similar to Angular, the folder structure of NestJS offers minimal downtime. Specifically, components all get their own folders, with an application module and main file residing in the root along with extra configuration files. This is another touch of simplicity that programmers will appreciate, especially for complex projects.<\/span><\/li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">Because NestJS is built to support TypeScript, you gain all of the benefits of that super set listed above. This also makes it easier to switch between Angular code and Nest code, and significantly easier than trying to do the same with basic JavaScript.<\/span><\/li>\n<li style=\"font-weight: 400;\"><span style=\"font-weight: 400;\">NestJS also offers a command line tool that can make it easier to scaffold a project, generate architecture components, and display project details and information.<\/span><\/li>\n<\/ul>\n<h2><strong>What\u2019s the best way to learn how to use TypeScript, Angular, and NestJS?<\/strong><\/h2>\n<p><span style=\"font-weight: 400;\">Convinced that TypeScript, Angular, and NestJS are something you want to add to your coding arsenal? Then look no further than the <\/span><a href=\"https:\/\/www.sololearn.com\/\"><span style=\"font-weight: 400;\">SoloLearn<\/span><\/a><span style=\"font-weight: 400;\"> mobile app, where you can take a <\/span><a href=\"https:\/\/www.sololearn.com\/Course\/fullstack\/\"><span style=\"font-weight: 400;\">full-stack course<\/span><\/a><span style=\"font-weight: 400;\"> that covers everything you need to know about all of these great tools. With a variety of tutorials around key elements of the language, as well as quizzes and coding challenges to test your knowledge, this is a great option for familiarizing yourself with the base language.<\/span><\/p>\n<p><span style=\"font-weight: 400;\">After completing the course, there are also numerous resources for <\/span><a href=\"https:\/\/www.typescriptlang.org\/v2\/community\" target=\"_blank\" rel=\"noopener\"><span style=\"font-weight: 400;\">TypeScript<\/span><\/a><span style=\"font-weight: 400;\">, <\/span><a href=\"https:\/\/angular.io\/resources\" target=\"_blank\" rel=\"noopener\"><span style=\"font-weight: 400;\">Angular<\/span><\/a><span style=\"font-weight: 400;\">, and <\/span><a href=\"https:\/\/github.com\/nestjs-community\" target=\"_blank\" rel=\"noopener\"><span style=\"font-weight: 400;\">NestJS<\/span><\/a><span style=\"font-weight: 400;\"> available for free throughout the web. Try creating some small, simple applications (or even aspects of applications) and make use of the thriving developer communities for each of these tools if you need extra help. Happy coding!<\/span><\/p>\n","protected":false},"excerpt":{"rendered":"<p>An Overview of TypeScript, Angular, and Nest JS If you are a developer familiar with JavaScript, you know that the language offers an ever-growing set of use cases and applications. But getting the most out of JavaScript isn\u2019t just about the language itself &#8212; using subsets and frameworks specifically designed for certain uses can make <a href=\"https:\/\/www.sololearn.com\/blog\/an-overview-of-typescript-angular-and-nest-js\/\" class=\"more-link\">&#8230;<span class=\"screen-reader-text\">  An Overview Of Typescript, Angular And Nest JS<\/span><\/a><\/p>\n","protected":false},"author":7,"featured_media":1245,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[33],"tags":[24],"_links":{"self":[{"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/posts\/1246"}],"collection":[{"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/users\/7"}],"replies":[{"embeddable":true,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/comments?post=1246"}],"version-history":[{"count":2,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/posts\/1246\/revisions"}],"predecessor-version":[{"id":2356,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/posts\/1246\/revisions\/2356"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/media\/1245"}],"wp:attachment":[{"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/media?parent=1246"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/categories?post=1246"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/tags?post=1246"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}