{"id":1753,"date":"2022-11-21T12:04:19","date_gmt":"2022-11-21T12:04:19","guid":{"rendered":"https:\/\/blog-dev.sololearn.com\/?p=1753"},"modified":"2023-03-23T23:27:05","modified_gmt":"2023-03-23T23:27:05","slug":"sql-join","status":"publish","type":"post","link":"https:\/\/www.sololearn.com\/blog\/sql-join\/","title":{"rendered":"SQL Joins: What They are, How They Work, and How Many Types Exist"},"content":{"rendered":"\n<p>Did you ever need to <strong>Join two tables<\/strong>? An <strong>SQL Join <\/strong>statement lets you access data from multiple sources &#8211; tables in SQL.&nbsp;&nbsp;<\/p>\n\n\n\n<p>You might ask, <strong><em>&#8220;<a href=\"https:\/\/www.sololearn.com\/blog\/what-is-sql\/\" data-type=\"post\" data-id=\"1755\">What is SQL<\/a>?&#8221;<\/em><\/strong> or\/and <strong><em>&#8220;What are SQL joins?&#8221; <\/em><\/strong>depending on how far down you are on the SQL path, And we&#8217;d say that&#8217;s a fair question. While it&#8217;s a very well-known acronym, it is an important part of <a href=\"https:\/\/www.sololearn.com\/blog\/what-is-database\/\" data-type=\"post\" data-id=\"2637\">database management systems (DBMS)<\/a>. SQL manages everything from giant corporate databases to small local databases.\u00a0<\/p>\n\n\n\n<p>Think of it like this; if we have to write code and programs for each type of data because there aren&#8217;t any specialized tools to help us do this, we will drown in data clutter. If you&#8217;re creating web pages or sending emails and there are millions of different options available, you want something that will make all that information easier to read and work with \u2014 not harder! That&#8217;s what SQL does for you.&nbsp;<\/p>\n\n\n\n<p>SQL (Structured Query Language) manages data in relational database management systems (RDBMS). A developer who knows SQL can write code to create, modify, and retrieve data stored in a database.<\/p>\n\n\n\n<p>SQL is the most widely used database language in the world. It&#8217;s an essential skill for anyone working with websites or applications that use databases to store information.<\/p>\n\n\n\n<p>In addition to using SQL commands directly, most database applications allow you to enter SQL statements through graphical user interfaces or wizards.<\/p>\n\n\n\n<p>In this blog post, we&#8217;ll discuss <strong>SQL joins<\/strong> with examples to show how you can use this technique to improve your queries.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\"><strong>Types of SQL Joins<\/strong><\/h2>\n\n\n\n<p>SQL selects the data <strong>Join from two tables<\/strong> (or more) based on the same key data points&nbsp; between them; the top 4 types of<strong> SQL join statements<\/strong> are as follows:&nbsp;<\/p>\n\n\n\n<ol>\n<li><strong>Cross Join<\/strong><\/li>\n<\/ol>\n\n\n\n<p>A cross-join is a Cartesian product of two or more tables. A cross-join can combine data from multiple tables into a single result set. For example, if you have a table named Employees that contains employee names and phone numbers, you can cross-join with another table named Phones to get each employee&#8217;s phone numbers.<\/p>\n\n\n\n<p>The syntax for a cross-join is as follows:<\/p>\n\n\n\n<p><strong>SELECT * FROM [table name 1] CROSS JOIN [table name 2]<\/strong><\/p>\n\n\n\n<p>Take a look at the <strong>clear cross-join<\/strong> example below.<\/p>\n\n\n\n<p><strong>Table 1: Car_model<\/strong><\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td><\/td><td><strong>Car_model<\/strong><\/td><\/tr><tr><td><strong>1<\/strong><\/td><td>Corolla<\/td><\/tr><tr><td><strong>2<\/strong><\/td><td>Cultus<\/td><\/tr><tr><td><strong>3<\/strong><\/td><td>Camry<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p><strong>Table 2: Color_name<\/strong><\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td><\/td><td><strong>Color_name<\/strong><\/td><\/tr><tr><td><strong>1<\/strong><\/td><td>Black<\/td><\/tr><tr><td><strong>2<\/strong><\/td><td>Silver<\/td><\/tr><tr><td><strong>3<\/strong><\/td><td>Red<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>To get all possible combinations of cars and colors, you need to execute the following piece of code:<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td>SELECT<br>c.Car_model<br>,c1.Color_name<br>FROM Cars c<br>CROSS JOIN Colors c1<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>This will generate a Cartesian product of all possible values of above 2 tables.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td><\/td><td><strong>Car_model<\/strong><\/td><td><strong>Color_name<\/strong><\/td><\/tr><tr><td>1<\/td><td>Corolla<\/td><td>Black<\/td><\/tr><tr><td>2<\/td><td>Cultus<\/td><td>Black<\/td><\/tr><tr><td>3<\/td><td>Camry<\/td><td>Black<\/td><\/tr><tr><td>4<\/td><td>Corolla<\/td><td>Silver<\/td><\/tr><tr><td>5<\/td><td>Cultus<\/td><td>Silver<\/td><\/tr><tr><td>6<\/td><td>Camry<\/td><td>Silver<\/td><\/tr><tr><td>7<\/td><td>Corolla<\/td><td>Grey<\/td><\/tr><tr><td>8<\/td><td>Cultus<\/td><td>Grey<\/td><\/tr><tr><td>9<\/td><td>Camry<\/td><td>Grey<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<ol start=\"2\">\n<li><strong>Inner Join<\/strong><\/li>\n<\/ol>\n\n\n\n<p>An inner join is a type of join that joins two tables based on the matching values in their columns. The result of the inner join contains all rows from both tables, with matching rows from both tables linked together.<\/p>\n\n\n\n<p>To use an inner join in SQL, you use the following syntax:<\/p>\n\n\n\n<p><strong>SELECT * FROM table1 INNER JOIN table2&nbsp;<\/strong><\/p>\n\n\n\n<p><strong>ON table1.column_name = table2.column_name;&nbsp;<\/strong><\/p>\n\n\n\n<p>Here&#8217;s how this code works:<\/p>\n\n\n\n<p><strong>Table 1: Foods<\/strong><\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td><strong>ITEM_ID&nbsp;<\/strong><\/td><td><strong>ITEM_NAME<\/strong><\/td><td><strong>ITEM_UNIT<\/strong><\/td><td><strong>COMPANY_ID<\/strong><\/td><\/tr><tr><td>1<\/td><td>Cheeze Mix<\/td><td>Pcs<\/td><td>16<\/td><\/tr><tr><td>6<\/td><td>Cheeze It<\/td><td>Pcs<\/td><td>15<\/td><\/tr><tr><td>2<\/td><td>Biscuits<\/td><td>Pcs<\/td><td>15<\/td><\/tr><tr><td>3<\/td><td>Munch<\/td><td>Pcs<\/td><td>17<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p><strong>Table 2: Company<\/strong><\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td><strong>COMPANY_ID<\/strong><\/td><td><strong>COMPANY_NAME<\/strong><\/td><td><strong>COMPANY_CITY<\/strong><\/td><\/tr><tr><td>18<\/td><td>Nestle<\/td><td>London<\/td><\/tr><tr><td>15<\/td><td>Jack Foods<\/td><td>Boston<\/td><\/tr><tr><td>16<\/td><td>Foodies<\/td><td>America<\/td><\/tr><tr><td>17<\/td><td>Akas Food<\/td><td>Australia<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>You need to execute following piece of code to get the desired outcome with Inner join:<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td>SELECT foods.item_name,foods.item_unit, company.company_name,company.company_city FROM foods INNER JOIN company ON foods.company_id =company.company_id;<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>You\u2019ll get the following output:<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td><strong>ITEM_NAME<\/strong><\/td><td><strong>ITEM_UNIT<\/strong><\/td><td><strong>COMPANY_NAME<\/strong><\/td><td><strong>COMPANY_CITY<\/strong><\/td><\/tr><tr><td>Cheeze Mix<\/td><td>Pcs<\/td><td>Nestle<\/td><td>London<\/td><\/tr><tr><td>Cheeze It<\/td><td>Pcs<\/td><td>Jack Foods<\/td><td>Boston<\/td><\/tr><tr><td>Biscuits<\/td><td>Pcs<\/td><td>Foodies<\/td><td>America<\/td><\/tr><tr><td>Munch<\/td><td>Pcs<\/td><td>Akas Food<\/td><td>Australia<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<ol start=\"3\">\n<li><strong>Self Join<\/strong><\/li>\n<\/ol>\n\n\n\n<p>Self-join enables the joining of a table to itself. To employ a self join, the table must contain a column (let&#8217;s call it X) that serves as the primary key and another column (let&#8217;s call it Y) that includes values that can be matched up with the values in Column X.&nbsp;<\/p>\n\n\n\n<p>Columns X and Y do not need to have identical values for any given row, and Column Y can even be null.<\/p>\n\n\n\n<p>Here is an illustration of the members and their administration. Let&#8217;s examine the membership table:<\/p>\n\n\n\n<p>Each member has a unique identifier, which we refer to as &#8220;Column X.&#8221; The Teamlead Id column contains the member or <strong>teamleader&#8217;s Id<\/strong>; this is our &#8220;Column Y.&#8221; If these columns are utilized to monitor the <strong>member-teamleader<\/strong> relationships in this table:<\/p>\n\n\n\n<p><strong>Table: Customers<\/strong><\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td><strong>Id<\/strong><\/td><td><strong>&nbsp;FullName<\/strong><\/td><td><strong>Salary<\/strong><\/td><td><strong>TeamleadId<\/strong><\/td><\/tr><tr><td>1<\/td><td>Chirs Hemsworth<\/td><td>200000<\/td><td>5<\/td><\/tr><tr><td>2<\/td><td>Tom Holland<\/td><td>250000<\/td><td>5<\/td><\/tr><tr><td>3<\/td><td>Ben Affleck<\/td><td>120000<\/td><td>1<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>You need to execute following piece of code:<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td>SELECT<br>&nbsp; &nbsp; member. Id,<br>&nbsp; &nbsp; &nbsp; &nbsp; member.FullName,<br>&nbsp; &nbsp; &nbsp; &nbsp; member.teamleadId,<br>&nbsp; &nbsp; &nbsp; &nbsp; teamlead.FullName as teamleadName<br>FROM members member<br>JOIN members teamlead<br>ON member.teamleadId = teamlead.Id<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>This will show you the following output:<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td><strong>Id<\/strong><\/td><td><strong>FullName<\/strong><\/td><td><strong>Teamlead Id<\/strong><\/td><td><strong>Teamlead Name<\/strong><\/td><\/tr><tr><td>1<\/td><td>Chirs Hemsworth<\/td><td>5<\/td><td>Gal Galdot<\/td><\/tr><tr><td>2<\/td><td>Tom Holland<\/td><td>5<\/td><td>Gal Galdot<\/td><\/tr><tr><td>3<\/td><td>Ben Affleck<\/td><td>1<\/td><td>Chirs Hemsworth<\/td><\/tr><tr><td>5<\/td><td>Gal Galdot<\/td><td>4<\/td><td>Christian Bale<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<ol start=\"4\">\n<li><strong>Outer Join<\/strong><\/li>\n<\/ol>\n\n\n\n<p>An outer join returns matching and non-matching values from one or both tables.<\/p>\n\n\n\n<p>Outer joins subdivide additionally into three subcategories:<\/p>\n\n\n\n<ol>\n<li>Left outer join<\/li>\n\n\n\n<li>Right outer join<\/li>\n\n\n\n<li>Full outer join&nbsp;<\/li>\n<\/ol>\n\n\n\n<p>These categories depend on the table&#8217;s rows included: left, right, and both. Assume an example of Pets table and Owner table for all these Outer join types.<\/p>\n\n\n\n<p><strong>Table 1: Pets<\/strong><\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td><strong>ID<\/strong><\/td><td><strong>Pet.Name<\/strong><\/td><td><strong>Owner.ID<\/strong><\/td><\/tr><tr><td>1<\/td><td>Neiger<\/td><td>1<\/td><\/tr><tr><td>2<\/td><td>Bella<\/td><td>2<\/td><\/tr><tr><td>3<\/td><td>Snowie<\/td><td>2<\/td><\/tr><tr><td>4<\/td><td>Tiger<\/td><td>3<\/td><\/tr><tr><td>5<\/td><td>Swiky<\/td><td>0<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p><strong>Table 2: Owers<\/strong><\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td><strong>ID<\/strong><\/td><td><strong>Owner.Name<\/strong><\/td><\/tr><tr><td>1<\/td><td>Stephan<\/td><\/tr><tr><td>2<\/td><td>Jonny<\/td><\/tr><tr><td>3<\/td><td>Charlie<\/td><\/tr><tr><td>4<\/td><td>Vicky<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<ul>\n<li><strong>Left Outer Join<\/strong><\/li>\n<\/ul>\n\n\n\n<p>A left outer join is a way to join two tables together. Only rows from the table named before the <em>LEFT OUTER JOIN<\/em> clause that was not found in the target table are included in the output.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td>SELECT pets.name AS pet_name, owners.name AS owner<br>FROM pets<br>LEFT JOIN owners<br>ON pets.owner_id = owners.id;<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>You\u2019ll get it as:<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td><strong>Pet.name<\/strong><\/td><td><strong>Owner<\/strong><\/td><\/tr><tr><td>Neiger<\/td><td>Stephan<\/td><\/tr><tr><td>Bella<\/td><td>Jonny<\/td><\/tr><tr><td>Snowie<\/td><td>Jonny<\/td><\/tr><tr><td>Tiger<\/td><td>Charlie<\/td><\/tr><tr><td>Swiky<\/td><td>NULL<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<ul>\n<li><strong>Right Outer Join<\/strong><\/li>\n<\/ul>\n\n\n\n<p>A right join (or outer join) is like the left outer join, except with the reversed table treatment.&nbsp;<\/p>\n\n\n\n<p>Let\u2019s do the same query with right join:<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td>SELECT pets.name AS pet_name, owners.name AS owner<br>FROM pets<br>RIGHT JOIN owners<br>ON pets.owner_id = owners.id;<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>In this case, we retain all relevant rows from the owner&#8217;s table, and if any columns from pets require values but don&#8217;t have any, we substitute NULL.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td><strong>Pet.name<\/strong><\/td><td><strong>Owner<\/strong><\/td><\/tr><tr><td>Neiger<\/td><td>Stephan<\/td><\/tr><tr><td>Bella<\/td><td>Jonny<\/td><\/tr><tr><td>Snowie<\/td><td>Jonny<\/td><\/tr><tr><td>Tiger<\/td><td>Charlie<\/td><\/tr><tr><td>Null<\/td><td>Vicky<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<ul>\n<li><strong>Full Outer Join<\/strong><\/li>\n<\/ul>\n\n\n\n<p>This category (full outer join) combines the applying effect of both left and right (outer joins).&nbsp;<\/p>\n\n\n\n<p>There is no match in the full outer joined table rows; it appears that it will consider the result set to have NULL values for every table&#8217;s column that lacks a matching row.&nbsp;<\/p>\n\n\n\n<p>A single row will produce the result for those (rows) that have some matching possibilities.<\/p>\n\n\n\n<p>Here\u2019s the query for this:<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td>SELECT pets.name AS pet_name, owners.name AS owner<br>FROM pets<br>FULL JOIN owners<br>ON pets.owner_id = owners.id;<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h2 class=\"wp-block-heading\">It will produce the following results:<\/h2>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td><strong>Pet.name<\/strong><\/td><td><strong>Owner<\/strong><\/td><\/tr><tr><td>Neiger<\/td><td>Stephan<\/td><\/tr><tr><td>Bella<\/td><td>Jonny<\/td><\/tr><tr><td>Snowie<\/td><td>Jonny<\/td><\/tr><tr><td>Tiger<\/td><td>Charlie<\/td><\/tr><tr><td>Swiky<\/td><td>Null<\/td><\/tr><tr><td>Null<\/td><td>Vicky<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h2 class=\"wp-block-heading\"><strong>How to Select Data from Multiple Tables Using SQL Joins?<\/strong><\/h2>\n\n\n\n<p>You can get information from as many tables as you want, specify the <a href=\"https:\/\/www.sololearn.com\/blog\/what-is-sql-used-for\/\" data-type=\"post\" data-id=\"1250\">conditions based on any data in the tables,<\/a> and display the results in any order you choose if your database is properly designed and linked.<\/p>\n\n\n\n<p>Let&#8217;s have an example:<\/p>\n\n\n\n<p><strong>Table 1: Product<\/strong><\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td><strong>ID<\/strong><\/td><td><strong>Name<\/strong><\/td><td><strong>Price<\/strong><\/td><td><strong>Category_ID<\/strong><\/td><\/tr><tr><td>1<\/td><td>Table<\/td><td>200<\/td><td>2<\/td><\/tr><tr><td>2<\/td><td>Chair<\/td><td>120<\/td><td>3<\/td><\/tr><tr><td>3<\/td><td>Bricks<\/td><td>150<\/td><td>2<\/td><\/tr><tr><td>4<\/td><td>Sofa<\/td><td>50<\/td><td>1<\/td><\/tr><tr><td>5<\/td><td>Sand<\/td><td>20<\/td><td>1<\/td><\/tr><tr><td>6<\/td><td>Toy Car<\/td><td>100<\/td><td>2<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p><strong>Table 2: Category<\/strong><\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td><strong>ID<\/strong><\/td><td><strong>Category<\/strong><\/td><\/tr><tr><td>1<\/td><td>Material<\/td><\/tr><tr><td>2<\/td><td>Furniture<\/td><\/tr><tr><td>3<\/td><td>Toys<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>You need following code to get the desired outcome:<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td>SELECT<br>&nbsp; product.name AS product_name,<br>&nbsp; category.name AS category_name<br>FROM product<br>JOIN category ON product.category_id=category.id;<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>After execution, you\u2019ll get following output:<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td><strong>Product_name<\/strong><\/td><td><strong>Category<\/strong><\/td><\/tr><tr><td>Table<\/td><td>Furniture<\/td><\/tr><tr><td>Chair<\/td><td>Furniture<\/td><\/tr><tr><td>Bricks<\/td><td>Material<\/td><\/tr><tr><td>Sofa<\/td><td>Furniture<\/td><\/tr><tr><td>Sand<\/td><td>Material<\/td><\/tr><tr><td>Toy Car<\/td><td>Toys<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h2 class=\"wp-block-heading\"><strong>Use Cases for SQL Joins<\/strong><\/h2>\n\n\n\n<p>The basic application of SQL Joins is to select data from many tables, as shown above. But, it can be applied to address different tasks. Some of the most occurring usage scenarios for SQL joins are:<\/p>\n\n\n\n<ul>\n<li><strong>Relationship Hierarchy:<\/strong> Joins are used if a multi-tiered relationship exists among tables, e.g., grandfather, father, son relationship or user, city, and state relationship.<\/li>\n\n\n\n<li><strong>Many-to-many Connections:<\/strong> This scenario occurs when many items in one table have a relationship with many items in the second table. For example, students are enrolled in multiple courses, and courses are assigned to multiple students. Same as customers subscribe to different products while products are shared by customers.<\/li>\n\n\n\n<li><strong>SQL Joins for Data Analysis:<\/strong> From a business intelligence (BI) perspective, SQL joins analyze data for making charts and building dashboards.<\/li>\n\n\n\n<li><strong>Database Normalization:<\/strong> In normalization, larger tables are organized into smaller tables to drop any data redundancy and anomalies. Then relevant data is fetched from these smaller tables using SQL joins.&nbsp;<\/li>\n<\/ul>\n\n\n\n<h2 class=\"wp-block-heading\"><strong>Learn SQL Joins with Sololearn<\/strong><\/h2>\n\n\n\n<p>AS a declarative language, SQL needs joins statements to extract relevant data from highly structured databases.&nbsp; . They can be confusing, especially if you&#8217;re new to SQL, but they are worth learning. We have given you different commands to help you write queries and recreate them around your databases. So, to learn more SQL join or relational databases, you must start with a basic beginner program.&nbsp;<\/p>\n\n\n\n<p>All three-course levels (<a href=\"https:\/\/www.sololearn.com\/learn\/courses\/sql-introduction\">beginners<\/a>, <a href=\"https:\/\/www.sololearn.com\/learn\/courses\/sql-intermediate\">intermediate<\/a>, and compiler) at Sololearn will provide you with the complete coverage of SQL joins, their importance, and easy ways to imply them daily.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Did you ever need to Join two tables? An SQL Join statement lets you access data from multiple sources &#8211; tables in SQL.&nbsp;&nbsp; You might ask, &#8220;What is SQL?&#8221; or\/and &#8220;What are SQL joins?&#8221; depending on how far down you are on the SQL path, And we&#8217;d say that&#8217;s a fair question. While it&#8217;s a <a href=\"https:\/\/www.sololearn.com\/blog\/sql-join\/\" class=\"more-link\">&#8230;<span class=\"screen-reader-text\">  SQL Joins: What They are, How They Work, and How Many Types Exist<\/span><\/a><\/p>\n","protected":false},"author":7,"featured_media":2030,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[33],"tags":[],"_links":{"self":[{"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/posts\/1753"}],"collection":[{"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/users\/7"}],"replies":[{"embeddable":true,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/comments?post=1753"}],"version-history":[{"count":3,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/posts\/1753\/revisions"}],"predecessor-version":[{"id":2644,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/posts\/1753\/revisions\/2644"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/media\/2030"}],"wp:attachment":[{"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/media?parent=1753"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/categories?post=1753"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/tags?post=1753"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}