{"id":1713,"date":"2022-11-17T08:41:30","date_gmt":"2022-11-17T08:41:30","guid":{"rendered":"https:\/\/blog-dev.sololearn.com\/?p=1713"},"modified":"2023-03-07T23:20:30","modified_gmt":"2023-03-07T23:20:30","slug":"python-data-types","status":"publish","type":"post","link":"https:\/\/www.sololearn.com\/blog\/python-data-types\/","title":{"rendered":"In-depth Guide to Python Data Types"},"content":{"rendered":"\n<p><strong>Introduction<\/strong><\/p>\n\n\n\n<p>A python variable is a container that stores data whose value can be retrieved or manipulated when needed. The data stored can be of different types. Those types can be letters, numbers, symbols and so on. Python data types are the forms data can be stored in a variable. The main data types are:<\/p>\n\n\n\n<ul>\n<li>Numbers<\/li>\n\n\n\n<li>Strings<\/li>\n\n\n\n<li>Boolean<\/li>\n\n\n\n<li>Lists<\/li>\n\n\n\n<li>Tuples<\/li>\n\n\n\n<li>Sets<\/li>\n\n\n\n<li>Dictionaries<\/li>\n<\/ul>\n\n\n\n<p><strong>Numbers:<\/strong> these are numeric entries. They can be integers, floating numbers, and complex numbers. Integers are whole numbers with no decimal values; <a href=\"https:\/\/www.sololearn.com\/blog\/python-float\/\" data-type=\"post\" data-id=\"1645\">floating numbers<\/a> are numbers with decimal points \u201c.\u201d Complex numbers are numbers with two parts; real and imaginary numbers.<\/p>\n\n\n\n<p><strong>Examples<\/strong><\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">sam_age = 15  # Integer\nprint(sam_age)  # >> 15\n# stores a whole number \"15\" let's say the age of Sam; the result is 15\n# ===================================================================\naverage_score = 15.68  # Floating number\nprint(average_score)  # >> 15.68\n#  stores a decimal number \"15.68\". The result is 15.68.\n# ===================================================================\nnumber = 4 + 3j  # complex number\nprint(number)  # >> (4+3j)\n# stores a complex number. The result is 4 + 3j.<\/pre>\n\n\n\n<p><strong>Type notation<\/strong><\/p>\n\n\n\n<p>We use the <strong>type<\/strong> function to check if a number is an<em> integer<\/em> or a <em>float<\/em>.<\/p>\n\n\n\n<p><strong>Examples<\/strong><\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">sam_age = 15\nprint(type(sam_age))  # >> &lt;class 'int'><\/pre>\n\n\n\n<ul>\n<li>In the above code, I put the variable name \u201csam_age\u201d in the <strong>type <\/strong>method, <strong>type(sam_age)<\/strong> and printed the result.<\/li>\n\n\n\n<li>&lt;int&gt; means <em>integer<\/em>, the value stored in the variable name \u201csam_age\u201d is a whole number.<\/li>\n<\/ul>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">average_score = 15.68\nprint(type(average_score))  # >> &lt;class 'float'>\n<\/pre>\n\n\n\n<ul>\n<li>In the above code, I put the variable name \u201caverage_score\u201d in the <strong>type <\/strong>method, <strong>type(average_score)<\/strong> and printed the result.<\/li>\n\n\n\n<li>&lt;float&gt; means floating number; the value stored in the variable name \u201caverage_score\u201d is a decimal number.<\/li>\n<\/ul>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">number = 4 + 3j\nprint(type(number))  # >> &lt;class 'complex'><\/pre>\n\n\n\n<ul>\n<li>In the above code, I put the variable name \u201cnumber\u201d in the <strong>type <\/strong>method, <strong>type(number)<\/strong> and printed the result.<\/li>\n\n\n\n<li>&lt;complex&gt; means complex number; the value stored in the variable name \u201cnumber\u201d is a complex number. It has two parts: the whole number and the number with \u201cj\u201d.<\/li>\n<\/ul>\n\n\n\n<p><strong>Things to note<\/strong><\/p>\n\n\n\n<ul>\n<li>A floating number has a decimal point [.]<\/li>\n\n\n\n<li>When an integer(a whole number) is divided by another integer(a whole number), the result is a floating number.<\/li>\n<\/ul>\n\n\n\n<p><strong>Example<\/strong><\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">total_eggs = 12\nnum_of_people_toshare = 6\nnum_one_person_gets = total_eggs \/ num_of_people_toshare\nprint(num_one_person_gets)  # >> 2.0<\/pre>\n\n\n\n<ul>\n<li>In the above code, I created three variable names, the first <strong>\u201ctotal_eggs<\/strong>\u201d stores the number of eggs, the second <strong>\u201cnum_of_people_toshare\u201d<\/strong> stores the number of people to share the eggs and the last \u201c<strong>num_one_person_gets<\/strong>\u201d stores the amount each person gets.<\/li>\n\n\n\n<li>The result is &lt;2.0&gt;, a floating number has a decimal point, and the value is a floating number. We can also check the &lt;type&gt; to see if it is an <em>integer<\/em> or<em> float<\/em>.<\/li>\n<\/ul>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">print(type(num_one_person_gets))  # >> &lt;class 'float'><\/pre>\n\n\n\n<p>The type is &lt;float&gt;<\/p>\n\n\n\n<p><strong>Strings:<\/strong> are values wrapped in quotation marks. They begin with a quotation mark(\u201c) and end with a quotation mark (\u201c). The quotation marks can be single(\u2018 \u2018), double(\u201c \u201c) or triple(\u2018\u2019\u2019 \u2018\u201d)The values can be numbers(\u201c28\u201d), letters(\u201cbcfh\u201d), symbols(\u201c@#${}[]\u201d) or everything together(\u201c234hdfijfi*&amp;&amp;&amp;$][\\\u201d).&nbsp;<\/p>\n\n\n\n<p><strong>Examples<\/strong><\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\"># Create a variable name, then put the text in single or double quotes; 'text' or \"text\", then print out the variable name\nname = \"Sofia\"  # a word\nprint(name)  # >> Sofia\n# =======================================================================\nsentence = \"I love programming a lot\"  # a sentence\nprint(sentence)  # >> I love programming a lot\n# =======================================================================\nage = \"14\"  # integer\nprint(age) >> 14\nrating = 10.00  # floating number\nprint(rating)  # >> 10.00\n# =======================================================================\nspecial_symbols = \"!@#$%^&amp;*()_+}{[]\"  # symbols\nprint(special_symbols)  # >> !@#$%^&amp;*()_+}{[]\n# =======================================================================\n# number and symbol\nprint(\"1 + 1\")  # >> 1 + 1\nprint(\"2 * 3\")  # >> 2 * 3\nprint(\"8 = 4\")  # >> 8 = 4<\/pre>\n\n\n\n<p>The numbers are not added together or multiplied in the above code because the expression starts and ends with a quotation mark. Exactly how the values are in the quotation marks is how it is printed in the console.<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">email_address = \"johndoe23456@gmail.com\"  # all characters together\nprint(email_address)  # >> johndoe23456@gmail.com\nprint(\"]um@]i i8 @\\\/\\\/es0\/\\\/\\e\")  # >> ]um@]i i8 @\\\/\\\/es0\/\\\/\\e<\/pre>\n\n\n\n<p>We can join <em>strings<\/em> and words to form a sentence using the addition sign (+); this process is known as concatenation.&nbsp;<\/p>\n\n\n\n<p>Example:<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">name = \"Sofia\"\nage = \"14\"\nprint(name + \" is \" + age + \" years old\")  # >> Sofia is 14 years old<\/pre>\n\n\n\n<ul>\n<li>In the above code, the number has quotation marks around it; therefore, it is a <em>string<\/em>. We only add <em>strings<\/em>.&nbsp;<\/li>\n<\/ul>\n\n\n\n<p>Let\u2019s try with an <em>integer<\/em> and see the result.<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">name = \"Sofia\"\nage = 14\nprint(name + \" is \" + age + \" years old\")\n# >> print(name + \" is \" + age + \" years old\")\n# TypeError: can only concatenate str (not \"int\") to str<\/pre>\n\n\n\n<p>&nbsp;The above result shows that strings cannot be added to integers(whole numbers).<\/p>\n\n\n\n<p><strong>Type notation<\/strong><\/p>\n\n\n\n<p>We can check what <strong>type<\/strong> a variable or a statement is; any item wrapped in quotation marks has the <em>type<\/em> &lt;str&gt; meaning<em> string<\/em>.<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">name = \"Sofia\"\nprint(type(name))  # >> &lt;class 'str'>\nage = \"14\"\nprint(type(age))  # >> &lt;class 'str'><\/pre>\n\n\n\n<p><strong><a href=\"https:\/\/www.sololearn.com\/blog\/boolean-logic\/\" data-type=\"post\" data-id=\"2399\">Boolean<\/a>:<\/strong> expressions with the keyword \u201cTrue\u201d or \u201cFalse\u201d. It is used to check if a statement is right or wrong.<\/p>\n\n\n\n<p><strong>Examples<\/strong><\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">num_boys_greater_num_girls = False\nprint(num_boys_greater_num_girls)  # >> False\ndogs_are_friendly = True\nprint(dogs_are_friendly)  # >> True\nodd_number = 3\neven_number = 2\nprint(odd_number > even_number)  # >> True\ntotal_score = 100\nstudent_score = 20 * 3\nprint(total_score &lt; student_score)  # >> False<\/pre>\n\n\n\n<p><strong>Type Notation<\/strong><\/p>\n\n\n\n<p>A boolean has a type notation of &lt;bool&gt;, it has statements with either (True) or (False). The format is : type(variable_name) or type(statement).<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">num_boys_greater_num_girls = False\nprint(type(num_boys_greater_num_girls))  # >> &lt;class 'bool'>\n# In the above code block, a variable stores the value (False) and using the type method, it is &lt;bool> meaning boolean.\n# =======================================================================\ntotal_score = 100\nstudent_score = 20 * 3\nprint(total_score &lt; student_score)  # >> False\nprint(type(total_score &lt; student_score))  # >> &lt;class 'bool'>\n# 100 is greater than 60, so the above statement shows that it is (False), checking the type; it is &lt;bool> meaning boolean.<\/pre>\n\n\n\n<p><strong>Lists:<\/strong> consists of elements(they can be strings, numbers, boolean, list) in a square bracket and are separated by commas. A list starts with a square bracket \u201c[\u201c and ends with a square bracket \u201c]\u201d.<\/p>\n\n\n\n<p><strong>Format<\/strong><\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">variable_name = [string1, string2, string3]\nvariable_name = [number1, number2, number3]\nvariable_name = [boolean1, boolean2, boolean3]\nvariable_name = [string1, number1, string2, number2, boolean1, boolean2]\nvariable_name = [[number1, string1], [number2, string2]]<\/pre>\n\n\n\n<p><strong>Examples<\/strong><\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">student_names = [\"Jenny\", \"Bless\", \"Gab\"]  # with strings\nprint(student_names)  # >> ['Jenny', 'Bless', 'Gab']\n# =======================================================================\nstudent_ages = [15, 17, 13]  # with integers\nprint(student_ages)  # >> [15, 17, 13]\n# =======================================================================\nstudent_scores = [10.40, 20.00, 16.04]  # with floating numbers\nprint(student_scores)  # >> [10.4, 20.0, 16.04]\n# =======================================================================\nstudent_responses = [True, False, False]  # with boolean\nprint(student_responses)  # >> [True, False, False]\n# =======================================================================\nnumber_of_colors_present = [\"Red\", 4, \"Yellow\", 3, \"Green\", 5]\nprint(number_of_colors_present)  # >> ['Red', 4 , 'Yellow', 3, 'Green', 5]\n\nstudent_result = [\n    [\"Maths\", 10.40],\n    [\"English\", 20.00],\n    [\"Physics\", 16.04],\n]  # with lists\nprint(student_result)  # >> ['Maths', 10.4], ['English', 20.0], ['Physics', 16.04]]<\/pre>\n\n\n\n<p><strong>Type Notation<\/strong><\/p>\n\n\n\n<p>A list has a type notation of &lt;list&gt;, it has statements with square brackets \u201c[]\u201d. The format is : type(variable_name) or type(statement).<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\"># type(statement)\nprint(type([\"Bingo\", \"14 years\", \"1.54meters\", \"Orange fur\"]))\n# >> &lt;class 'list'>\n# type(variable_name)\nlate_comers = [[\"Shane\", 10.40], [\"Fab\", 10.30]]\nprint(type(late_comers))  # >> &lt;class 'list'><\/pre>\n\n\n\n<p><strong>Tuples:<\/strong> consist of elements(like strings and numbers, boolean ) stored in brackets and separated by commas. They start with a bracket &#8220;(&#8221; and end with a closing bracket &#8220;)&#8221;.<\/p>\n\n\n\n<p><strong>Format<\/strong><\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">variable_name = (string1, string2, string3)\nvariable_name = (number1, number2, number3)\nvariable_name = (boolean1, boolean2, boolean3)\nvariable_name = (number1, string1, number2, string2, boolean1)\nvariable_name = ((number1, string1), (number2, string2), (boolean1, string3))<\/pre>\n\n\n\n<p><strong>Examples<\/strong><\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">student_names = (\"Jenny\", \"Bless\", \"Gab\")  # with strings\nprint(student_names)  # >> ('Jenny', 'Bless', 'Gab')\n# =======================================================================\nstudent_ages = (15, 17, 13)  # with integers\nprint(student_ages)  # >> (15, 17, 13)\n# =======================================================================\nstudent_scores = (10.40, 20.00, 16.04)  # with floating numbers\nprint(student_scores)  # >> (10.4, 20.0, 16.04)\n# =======================================================================\ntuts = ((12, 12), (13, 14), (14, 14))\nprint(tuts)  # ((12, 12), (13, 14), (14, 14))\n\nstudent_info = (\"Jane\", 13, \"Blue eyes\", \"Brown pet\", 1.83, True, 2, 14.8)\n# with strings, integers, floating numbers and boolean\nprint(student_info)  # >> ('Jane', 13, 'Blue eyes', 'Brown pet', 1.83, True,2, 14.8)<\/pre>\n\n\n\n<p><strong>Type Notation<\/strong><\/p>\n\n\n\n<p>Tuples have the type notation &lt;tuple&gt;, and their statements are wrapped in brackets \u201c()\u201d.<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">student_info = (\"Jane\", 13, \"Blue eyes\", \"Brown pet\", 1.83, True, 2, 14.8)\nprint(type(student_info))  # >> &lt;class 'tuple'>\nprint(type((10, 20, 14.50, 20.10, 15)))  # >> &lt;class 'tuple'><\/pre>\n\n\n\n<p><strong>Sets: <\/strong>consist of elements(such as numbers, strings, tuples, booleans,lists) stored in curly braces \u2018{}\u201d and separated by commas. They start with a curly brace \u201c{\u201c and end with the other \u201c}\u201d.&nbsp;<\/p>\n\n\n\n<p><strong>Format<\/strong><\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">variable_name = {string1, string2, string3}\nvariable_name = {number1, number2, number3}\nvariable_name = {string1, number1, boolean1, tuple1, string2, number2, list1, boolean2}\n<\/pre>\n\n\n\n<p><strong>Examples<\/strong><\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">colors = {\"red\", \"green\", \"yellow\"}\nprint(colors)  # >> {'red', 'yellow', 'green'}\ntemperature_in_celsius = {27, 30.6, 19}\nprint(temperature_in_celsius)  # >> {27, 19, 30.6}\nany_data = {\"Peter Parker\", (\"Black spiderman\", \"Red spiderman\"), False, 30.01, 15}\nprint(\n    any_data\n)  # >> {False, 'Peter Parker', ('Black spiderman', 'Red spiderman'), 30.01, 15}<\/pre>\n\n\n\n<ul>\n<li>When sets are printed out, the result does not show the items in order they are stored in the variable<\/li>\n<\/ul>\n\n\n\n<p><strong>Type Notation<\/strong><\/p>\n\n\n\n<p>Sets have the type notation &lt;sett&gt;, and their statements are wrapped in curly braces \u201c{}\u201d.<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">any_data = {\"Peter Parker\", (\"Black spiderman\", \"Red spiderman\"), False, 30.01, 15}\nprint(type(any_data))  # >> &lt;class 'set'><\/pre>\n\n\n\n<p><strong>Dictionaries:<\/strong> a collection of items wrapped around by curly braces \u201c{}\u201d. Those items are referred to as key and value pairs. These key-value pairs can also be strings, numbers, lists, boolean, tuples and dictionaries.<\/p>\n\n\n\n<p><strong>Format<\/strong><\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">variable _name = {string1: string2,\n       string3: string4}\nvariable_name = {string1: number1,\n\t\t     string2: number2 }\nvariable_name = {string1: boolean1,\n\t\t     string2: number1,\n\t\t     string3: list1,\n\t\t     string4: tuple1,\n\t\t     string5: dictionary1}<\/pre>\n\n\n\n<p><strong>Examples<\/strong><\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">student_data = {\"001\": \"Singh\", \"002\": \"Alice\"}  # with strings\nprint(student_data)  # >> {'001': 'Singh', '002': 'Alice'}\n# =======================================================================\nstudent_age = {\"Bob\": 12, \"Jack\": 14, \"Milly\": 16}  # with strings and integers\nprint(student_age)  # >> {'Bob': 12, 'Jack': 14, 'Milly': 16}\n# =======================================================================\nfavorite_book = {\n    \"Title\": \"Storm and Silence\",\n    \"Completed\": True,\n    \"Number of Pages\": 466,\n    \"Favorite Characters\": [\"Lily Lilton\", \"Captain Jack\", \"Rikkard Ambrose\"],\n    \"Rating\": 5.0,\n    \"Sequels\": 3,\n    \"Years of each sequel\": (2016, 2017, 2019),\n}\nprint(favorite_book)\n# >> {'Title': 'Storm and Silence', 'Completed': True, 'Number of Pages': 466, 'Favorite Characters': ['Lily Lilton', 'Captain Jack', 'Rikkard Ambrose'], 'Rating': 5.0, 'Sequels': 3, 'Years of each sequel': (2016, 2017, 2019)}<\/pre>\n\n\n\n<p><strong>Type Notation<\/strong><\/p>\n\n\n\n<p>Dictionaries have the type notation &lt;dict&gt;, and their statements have key-value pairs wrapped in curly braces \u201c{}\u201d.<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">student_age = {\"Bob\": 12, \"Jack\": 14, \"Milly\": 16}\nprint(type(student_age))  # >> &lt;class 'dict'><\/pre>\n\n\n\n<p><strong>Data type comparison<\/strong><\/p>\n\n\n\n<p><strong>Strings and Numbers<\/strong><\/p>\n\n\n\n<p>When numbers are wrapped in quotation marks, they are referred to as strings and cannot perform mathematical operations because they function like text in the console.<\/p>\n\n\n\n<p><strong>Example<\/strong><\/p>\n\n\n\n<p>I &#8211; Addition&nbsp;<\/p>\n\n\n\n<p>Strings<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">print(\"1\" + \"1\")  # >> 11\nprint(\"John\" + \"Wick\")  # >> JohnWick<\/pre>\n\n\n\n<p>When an addition sign (+) is in between two strings or more, they are brought together.<\/p>\n\n\n\n<p>Numbers<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">print(1 + 1)  # >> 2\nprint(5.06 + 4.98)  # >> 10.04<\/pre>\n\n\n\n<ul>\n<li>Adding up numbers gives us the sum.<\/li>\n<\/ul>\n\n\n\n<p>II &#8211; Multiplication<\/p>\n\n\n\n<ul>\n<li>When strings are multiplied by a number, the output will be the string appearing as many times as the number multiplied by. In the code below, the string \u2018abcd\u2019 is multiplied by 5, and the result is \u2018abcd\u2019 appearing five times.<\/li>\n<\/ul>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">print(\"abcd\" * 5)  # >> abcdabcdabcdabcdabcd<\/pre>\n\n\n\n<p>The number &lt;10&gt; is wrapped in quotation marks, making it a string; the result is the value \u201c10\u201d appearing five times.<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">print(\"10\" * 5)  # >> 1010101010<\/pre>\n\n\n\n<p>In the code block below, &lt;10&gt; multiplies by 5, and the result is 50; the &lt;10&gt; is not wrapped in quotation marks; therefore, it is a number.<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">print(10 * 5)  # >> 50\nprint(5.05 * 5)  # >> 25.25<\/pre>\n\n\n\n<p>Strings cannot be subtracted or divided, but numbers perform those two operations.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\"><strong>Strings and Boolean<\/strong><\/h3>\n\n\n\n<p>Statements that are wrapped in quotation marks (\u201c\u201d) are known as strings, while boolean has two statements; &lt;True&gt; or &lt;False&gt;.<\/p>\n\n\n\n<p>\u201cTrue\u201d or \u201cFalse\u201d is not the same thing as True or False;<\/p>\n\n\n\n<p>\u201cTrue\u201d or \u201cFalse\u201d&nbsp; is wrapped in quotation marks, which means it is a string, while &lt;True&gt; or &lt;False&gt; is not wrapped in quotation marks, meaning it is boolean.<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">response_one = \"True\"\nprint(type(response_one))  # >> &lt;class 'str'>\nresponse_two = True\nprint(type(response_two))  # >> &lt;class 'bool'><\/pre>\n\n\n\n<p><strong>Lists and tuples<\/strong><\/p>\n\n\n\n<p>Lists are denoted by square brackets \u201c[]\u201d and tuples are denoted by brackets \u201c()\u201d. They can both store strings,numbers and booleans.<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">t = (\"Hello\", 1, \"love\", \"food\", True, 12.3, \"calories\")\nl = [\"Hello\", 1, \"love\", \"food\", True, 12.3, \"calories\"]\nprint(t)\nprint(l)<\/pre>\n\n\n\n<p><strong>Dictionaries and Sets<\/strong><\/p>\n\n\n\n<p>Dictionaries and sets have their elements wrapped in curly braces. The main difference is that&nbsp; in dictionaries there are keys and values while in sets justs the statements. Also sets do not store lists.<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\"># sets\nanydata_one = {\"red\", 1.2, False, 40, (\"Joker\", \"Hailey\")}\nprint(anydata_one)  # >> False, 1.2, 40, ('Joker', 'Hailey'), 'red'}\n# =========================================================================================\n# dictionaries\nanydata_two = {\n    \"sky_color\": [\"blue,white,grey\"],\n    \"weather\": (\"stormy\", \"sunny\", \"rainy\"),\n    \"Number of seasons\": 4,\n    \"Snows all the time\": False,\n}\nprint(\n    anydata_two\n)  # >> {'sky_color': ['blue,white,grey'], 'weather': ('stormy', 'sunny', 'rainy'), 'Number of seasons': 4, 'Snows all the time': False}<\/pre>\n\n\n\n<h3 class=\"wp-block-heading\"><strong>Conclusion<\/strong><\/h3>\n\n\n\n<p>This was a lot to take in but getting to the bottom shows you made efforts to learn about the topic. Remember to take it one at a time and celebrate little wins. To know more about python data types, check <a href=\"https:\/\/www.sololearn.com\/learn\/courses\/python-introduction\">here<\/a>.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Introduction A python variable is a container that stores data whose value can be retrieved or manipulated when needed. The data stored can be of different types. Those types can be letters, numbers, symbols and so on. Python data types are the forms data can be stored in a variable. The main data types are: <a href=\"https:\/\/www.sololearn.com\/blog\/python-data-types\/\" class=\"more-link\">&#8230;<span class=\"screen-reader-text\">  In-depth Guide to Python Data Types<\/span><\/a><\/p>\n","protected":false},"author":3,"featured_media":2058,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[35],"tags":[82,79,34,80],"_links":{"self":[{"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/posts\/1713"}],"collection":[{"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/comments?post=1713"}],"version-history":[{"count":4,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/posts\/1713\/revisions"}],"predecessor-version":[{"id":2547,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/posts\/1713\/revisions\/2547"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/media\/2058"}],"wp:attachment":[{"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/media?parent=1713"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/categories?post=1713"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/tags?post=1713"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}