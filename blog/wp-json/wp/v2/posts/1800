{"id":1800,"date":"2022-12-02T10:11:00","date_gmt":"2022-12-02T10:11:00","guid":{"rendered":"https:\/\/blog-dev.sololearn.com\/?p=1800"},"modified":"2023-03-08T00:12:53","modified_gmt":"2023-03-08T00:12:53","slug":"python-data-structures","status":"publish","type":"post","link":"https:\/\/www.sololearn.com\/blog\/python-data-structures\/","title":{"rendered":"Ultimate Guide to Python Data Structures"},"content":{"rendered":"\n<p>Python is a popular, open-source, and free high-level programming language. It was created by&nbsp; <a href=\"https:\/\/en.wikipedia.org\/wiki\/Guido_van_Rossum\" target=\"_blank\" rel=\"noopener\">Guido van Rossum<\/a> and first released in 1991. This article aims to discuss user-defined and built-in data structures in Python. So without further ado, let&#8217;s begin.<\/p>\n\n\n\n<p>According to a Statista survey conducted in the year 2021, <a href=\"https:\/\/www.statista.com\/statistics\/793628\/worldwide-developer-survey-most-used-languages\/\" target=\"_blank\" rel=\"noopener\">Python was the third most used programming language<\/a> among developers worldwide. The popularity of the Programming Language (PYPL) index ranks <a href=\"https:\/\/pypl.github.io\/PYPL.html\" target=\"_blank\" rel=\"noopener\">Python as the most popular programming language<\/a> as of Mar 2022.&nbsp;<\/p>\n\n\n\n<p>Developers around the world use this language in <a href=\"https:\/\/www.sololearn.com\/blog\/sololearns-new-course-web-development-fundamentals\/\" data-type=\"post\" data-id=\"1994\">web development<\/a>, data science, artificial intelligence, software development, and prototyping.\u00a0<\/p>\n\n\n\n<p>Python support built-in as well as user-defined data structures. In this article, we will discuss different types of Python data structures.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Why do we use Data Structures?<\/h2>\n\n\n\n<p>Data structures are specific ways to organize and store data for efficient access and processing.<\/p>\n\n\n\n<p>All data structures contain data values, the relation between the stored values, and in some cases, functions applicable to the data.&nbsp;<\/p>\n\n\n\n<p>The following rationale highlights the importance of using data structures.<\/p>\n\n\n\n<ul>\n<li>Data structures are the building blocks of software programs and applications.<\/li>\n\n\n\n<li>Many efficient algorithms are based on data structures. They enable the handling and managing of vast amounts of data, such as integrated database collections.<\/li>\n\n\n\n<li>Data structures are also the determining factor of your code&#8217;s responsiveness and runtime.<\/li>\n<\/ul>\n\n\n\n<p>Some of the use cases of data structures are listed below;<\/p>\n\n\n\n<ol>\n<li>Data storage<\/li>\n\n\n\n<li>Resource and service management<\/li>\n\n\n\n<li>Data exchange<\/li>\n\n\n\n<li>Data sorting<\/li>\n\n\n\n<li>Data indexing<\/li>\n\n\n\n<li>Data search<\/li>\n\n\n\n<li>Data scalability<\/li>\n<\/ol>\n\n\n\n<h2 class=\"wp-block-heading\">Types of Data Structures in Python<\/h2>\n\n\n\n<h3 class=\"wp-block-heading\">Built-in Data Structures&nbsp;<\/h3>\n\n\n\n<p>These data structures are integrated within the <a href=\"https:\/\/www.sololearn.com\/blog\/python-data-types\/\" data-type=\"post\" data-id=\"1713\">Python language<\/a>, offering ease and speed to programmers in finding solutions.\u00a0<\/p>\n\n\n\n<ul>\n<li><strong>List<\/strong><\/li>\n<\/ul>\n\n\n\n<p>Lists are built-in Python data structures that can store heterogenous data sequentially.&nbsp; Every element in the list can be accessed by an address called index.&nbsp;<\/p>\n\n\n\n<p>Python lists allow data access in forward (positive indexing) and reverse direction&nbsp;<\/p>\n\n\n\n<p>(Negative indexing). Positive indexing fetches data from the start till the end, and negative indexing fetches data from last to first. Lists can be modified by adding new elements, updating, and deleting existing elements.&nbsp;<\/p>\n\n\n\n<p>The following code snippet creates a heterogeneous Python list with integer and string data elements.<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">myList = [1000, 30, \"apple\", \"oranges\"]\nprint(myList)<\/pre>\n\n\n\n<p><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">[1000, 30, apple, oranges]<\/pre>\n\n\n\n<p>clear(), copy(), extend(), index(), pop(), reverse() and sort() are some of the list functions available in Python.<\/p>\n\n\n\n<ul>\n<li><strong>Tuple<\/strong><\/li>\n<\/ul>\n\n\n\n<p>Tuples are immutable python data structures similar to lists except for the feature that the elements in the tuple cannot change in any way. Tuples do not offer the extensive functionality that a list class provides; thus are used in scenarios where data does not need alterations.<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">myTuple = (\"January\", \"February\", \"March\", \"April\", \"May\", \"June\")\nprunt(myTuple)\n<\/pre>\n\n\n\n<p><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">'January', 'February', 'March', 'April', 'May', 'June'<\/pre>\n\n\n\n<ul>\n<li><strong>Dictionary&nbsp;<\/strong><\/li>\n<\/ul>\n\n\n\n<p>Dictionary stores data in key-value pairs. Best suited in cases where data is continuously mutating. Keys are the names logically denoting the elements they are associated with, called values. Keys are immutable, but the values can be either mutable or immutable. Key-value pairs in a dictionary are not organized in any specific manner. Data is accessed based on unique keys.<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">myDictionary1 = {1: \"Java\", 2: \"PHP\", 3: \"Python\", 4: \"SQL\"}\nmyDictionary2 = {\"First\": \"Java\", \"Second\": \"PHP\", \"Third\": \"Python\", \"Fourth\": \"SQL\"}\nprint(myDictionary1)\nprint(myDictionary2)<\/pre>\n\n\n\n<p><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">{1: \"Java\", 2: \"PHP\", 3: \"Python\", 4: \"SQL\"}\n{\"First\": \"Java\", \"Second\": \"PHP\", \"Third\": \"Python\", \"Fourth\": \"SQL\"}<\/pre>\n\n\n\n<ul>\n<li><strong>Set<\/strong><\/li>\n<\/ul>\n\n\n\n<p>Sets are a collection of unique unordered elements. Elements are not indexed in sets; either an element is present in the set or not. Sets in Python data structures are similar to arithmetic sets with the same operations. An element is added only once in the set, even if it repeats. Sets are used in scenarios where uniqueness is preferred to repetition.<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">mySet = {\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Monday\"}\nprint(mySet)\n<\/pre>\n\n\n\n<p><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">{'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Monday'}<\/pre>\n\n\n\n<p>clear(), pop(), copy(), difference(), discard(), intersection(), issubset(), issuperset() are some of the set functions.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">User-defined Data Structures<\/h3>\n\n\n\n<p>Programmers can create their own data structures in Python, known as user-defined data structures. User-defined data structures are supported by Python to reflect the same functionality as that of structures not supported by Python. Following are widely implemented types of user-defined Python data structures.<\/p>\n\n\n\n<ul>\n<li><strong>Stack<\/strong><\/li>\n<\/ul>\n\n\n\n<p>Stacks are the linear data structures based on LIFO (Last In First Out) or FILO (First In Last Out). Data entered last would be accessed first in the case of LIFO, whereby in FILO, data entered first would be accessed last.<\/p>\n\n\n\n<p>Stacks are based on array structures. Elements are added and removed from a single point in the stacks. You can access the elements from one point called the Top. It is also an indicator of the current position of the stack.&nbsp;<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">myStack = [\"blue\", \"black\", \"orange\"]\nprint(myStack)<\/pre>\n\n\n\n<p><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">[blue, black, orange]<\/pre>\n\n\n\n<p>append(), pop(),&nbsp; empty(), size(), and top() are some of the operations performed on stacks.&nbsp;<\/p>\n\n\n\n<p>Stacks are most often used in applications like recursive programming, reversing words, and undo mechanisms in word editors.<\/p>\n\n\n\n<ul>\n<li><strong>Queue<\/strong><\/li>\n<\/ul>\n\n\n\n<p>A queue is another linear data structure operating on FIFO (First In First Out). Data entered first in the queue is accessed first. Just like a queue of passengers at an airport. Operations are performed from both ends of the queue, known as front-back or head-tail. Queues are built using array structures. Adding (En-queue), deleting (De-queue), and accessing elements are some of the functions you can perform on queues.&nbsp;&nbsp;<\/p>\n\n\n\n<p>Queues are used as network buffers to manage and control traffic congestion on an app. Additionally, it\u2019s also utilized in running operating systems to schedule processes.&nbsp;<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">myQueue = [\"winter\", \"summer\", \"autumn\", \"spring\"]\nprint(myQueue)<\/pre>\n\n\n\n<p><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">['winter', 'summer', 'autumn', 'spring']<\/pre>\n\n\n\n<ul>\n<li><strong>Linked List<\/strong><\/li>\n<\/ul>\n\n\n\n<p>Linked lists are linear data structures with an ordered collection of elements in the form of nodes. Linked lists use pointers to connect their elements. Nodes have two fields called Data and Next. Data contains the stored value and Next is the reference pointer to the next node in the list.<\/p>\n\n\n\n<p>The first node of the list is called the head. Any iteration through a linked list begins from the head node. Tail is the last node having its pointer referencing Null. Image viewing, music player applications, and similar media programs employ these data structures.<\/p>\n\n\n\n<ul>\n<li><strong>Tree<\/strong><\/li>\n<\/ul>\n\n\n\n<p>A tree is a nonlinear data structure storing data with a hierarchy. It usually starts from the top to the branches at the bottom. Several levels in the tree structure denote the depth of data.&nbsp;<\/p>\n\n\n\n<p>All data originates from the top node, called root. The nodes at the bottom are called leaf nodes. A node that precedes is known as the parent, and the node that follows is called the child for obvious reasons. Trees are used to store data connected non-linearly but have a hierarchy such as HTML pages that use trees to differentiate which tag comes under which block.<\/p>\n\n\n\n<ul>\n<li><strong>Hashmap<\/strong><\/li>\n<\/ul>\n\n\n\n<p>Hashmaps are indexed nonlinear data structures operating on the hash function to generate keys and match with their value. The hash function evaluates the index and links the key to its value in the bucket. Keys are unique and immutable. Hash mapping allows quick access to elements, and its efficiency depends on the hashing function.<\/p>\n\n\n\n<ul>\n<li><strong>Graph<\/strong><\/li>\n<\/ul>\n\n\n\n<p>Another nonlinear user-defined data structure is graph storing data as a collection of nodes. Graphs use a pair of vertices (data points) and edges (links). Each edge connects a pair of vertices. Graphs represent networks and are synonymous with real-world maps; therefore, find applications in Google Maps, Uber, telephone, and social networks providing solutions to real-life problems.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Python Data Structure Operation<\/h2>\n\n\n\n<p>Following is the list of operations performed on Python data structures to manipulate data.<\/p>\n\n\n\n<ul>\n<li><strong>Insertion<\/strong><\/li>\n<\/ul>\n\n\n\n<p>Insertion is the operation to add elements to a data structure. Insertion can be unsuccessful in cases when the data structure is full, leaving no space for further addition. This condition is known as Overflow.&nbsp;<\/p>\n\n\n\n<p>This operation applies to all data structures and increases the size of the data structure. The addition of an element in the queue is done with the enQueue() function, and in the stack, it is done via push() functions. Linked lists and arrays allow the addition of an element at any location, while stacks and queues only insert elements at a specific end. Elements in the graph and tree can be added randomly.<\/p>\n\n\n\n<ul>\n<li><strong>Deletion<\/strong><\/li>\n<\/ul>\n\n\n\n<p>The deletion operation removes an existing element from the given data structure and applies to all data structures. Underflow is the condition where deletion operation is implemented on a data structure with no elements. This operation reduced the size of the data structure it is implemented in.<\/p>\n\n\n\n<p>In queues, it is implemented with deQueue() function and in stacks pop() function performs this operation. Linked lists and arrays allow deletion of an element at any location, while stacks and queues only insert elements at a specific end. Elements in the graph and tree can be deleted randomly.<\/p>\n\n\n\n<ul>\n<li><strong>Searching<\/strong><\/li>\n<\/ul>\n\n\n\n<p>As the name suggests, this operation is used to find a particular element stored in the data structure. It gives the location of a data element in the data structure. A key value is needed to implement the search operation. This key value is used to match the stored values, and upon successful matching, the location of the value is returned. Otherwise, the null location is received.<\/p>\n\n\n\n<ul>\n<li><strong>Sorting<\/strong><\/li>\n<\/ul>\n\n\n\n<p>This operation arranges the elements of data structure either in ascending or descending order in the case of numerical data and alphabetically.&nbsp;<\/p>\n\n\n\n<ul>\n<li><strong>Merging<\/strong><\/li>\n<\/ul>\n\n\n\n<p>Merging combines the data elements of two data structures into a single data structure. It appends the elements of one data structure after the elements of another data structure with the same structure. The resulting data structure may be sorted or not. Merge operation can also combine the elements of two data structures with different structures.<\/p>\n\n\n\n<ul>\n<li><strong>Traversing<\/strong><\/li>\n<\/ul>\n\n\n\n<p>Applicable to all data structures, traversing is the operation of going through all the elements available in a data structure once. This operation is implemented by a pointer that indicates the current element in a data structure.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Wrapping Up Python Data Structures Guide<\/h2>\n\n\n\n<p>Now that you have a comprehensive background of the data structures usability and details, you can hop aboard our course &#8220;<a href=\"https:\/\/www.sololearn.com\/learn\/courses\/python-introduction\">Python for Beginners<\/a>&#8220;. Here, you can start building your skills set in Python language by solving real-life problems. The best part? You don\u2019t need to\u00a0 have prior experience with programming languages.\u00a0<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Python is a popular, open-source, and free high-level programming language. It was created by&nbsp; Guido van Rossum and first released in 1991. This article aims to discuss user-defined and built-in data structures in Python. So without further ado, let&#8217;s begin. According to a Statista survey conducted in the year 2021, Python was the third most <a href=\"https:\/\/www.sololearn.com\/blog\/python-data-structures\/\" class=\"more-link\">&#8230;<span class=\"screen-reader-text\">  Ultimate Guide to Python Data Structures<\/span><\/a><\/p>\n","protected":false},"author":7,"featured_media":2028,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[33,31],"tags":[87,34],"_links":{"self":[{"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/posts\/1800"}],"collection":[{"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/users\/7"}],"replies":[{"embeddable":true,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/comments?post=1800"}],"version-history":[{"count":7,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/posts\/1800\/revisions"}],"predecessor-version":[{"id":2561,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/posts\/1800\/revisions\/2561"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/media\/2028"}],"wp:attachment":[{"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/media?parent=1800"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/categories?post=1800"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/tags?post=1800"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}