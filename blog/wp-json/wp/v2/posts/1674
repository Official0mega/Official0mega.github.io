{"id":1674,"date":"2022-11-16T21:44:30","date_gmt":"2022-11-16T21:44:30","guid":{"rendered":"https:\/\/blog-dev.sololearn.com\/?p=1674"},"modified":"2023-03-07T22:18:50","modified_gmt":"2023-03-07T22:18:50","slug":"javascript-loop","status":"publish","type":"post","link":"https:\/\/www.sololearn.com\/blog\/javascript-loop\/","title":{"rendered":"How to use JavaScript Loops?"},"content":{"rendered":"\n<p>Programming is like <strong>creating a manual<\/strong> for computers and digital devices. In turn, the manual is like the software that computers will run.<\/p>\n\n\n\n<p>When creating a manual, you write out instructions in a step-by-step manner. Let\u2019s say you are creating a manual on how to change a light bulb. The manual instructions could look like the following:<\/p>\n\n\n\n<ul>\n<li>Place the screw-like end of the light bulb on the receiving hole.<\/li>\n\n\n\n<li>Rotate the bulb 180 degrees clockwise to screw it inwards.<\/li>\n\n\n\n<li>Keep rotating the bulb <strong>until<\/strong> it is entirely fastened and screwed into its hole.<\/li>\n<\/ul>\n\n\n\n<p>The above instructions include a loop.&nbsp;<\/p>\n\n\n\n<p>In the case of our example manual, our target condition was to have the light bulb fastened to the wall. The instruction in the loop was to rotate the bulb.<\/p>\n\n\n\n<p>Loops involve repeating an instruction over and over until a given condition is met. To loop is another name for repeating something. Loops usually have a target condition and when that happens, they end.<\/p>\n\n\n\n<p>In this article, you will learn different types of JavaScript loops, and when and how to use them. You will also see practical use-cases of JavaScript loops.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\"><strong>Types of JavaScript Loops<\/strong><\/h2>\n\n\n\n<p>JavaScript is a programming language that browsers can understand. With <a href=\"https:\/\/www.sololearn.com\/blog\/what-is-javascript-used-for\/\" data-type=\"post\" data-id=\"1791\">JavaScript<\/a>, you can tell the browser what to do on a given website.<\/p>\n\n\n\n<p>When programming in JavaScript, you will identify some steps that need to repeat till some condition is met. Once you identify such repeating steps, use a JavaScript loop.<\/p>\n\n\n\n<p>JavaScript loops continuously run a given block of code until some terminating condition happens. This condition is usually a comparison check that returns either true or false.<\/p>\n\n\n\n<p>In this article, we cover these types of JavaScript loops:<\/p>\n\n\n\n<ol>\n<li>while loop<\/li>\n\n\n\n<li>for loop<\/li>\n\n\n\n<li>for in loop<\/li>\n<\/ol>\n\n\n\n<h3 class=\"wp-block-heading\"><strong> 1.JavaScript while loop<\/strong><\/h3>\n\n\n\n<p>Use a \u201cwhile loop\u201d to keep running a block of code <em>while<\/em> a condition is true. The moment a condition becomes false, the JavaScript while loop will stop executing.<\/p>\n\n\n\n<p>This type of loop starts with a while statement followed by the condition in brackets. After the brackets, you place the repeating statements inside braces.<\/p>\n\n\n\n<p>For a simple example, let\u2019s try to write a JavaScript program for fastening the light bulb\u2019s switch. We would have something like the following:<\/p>\n\n\n\n<p>For a simple example, let\u2019s try to write a JavaScript program for screwing a light bulb. We would have something like the following:<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">while (bulbIsNotFastened) {\n\trotateBulbClockwise();\n}<\/pre>\n\n\n\n<p>It\u2019s that simple.<\/p>\n\n\n\n<p>If you can\u2019t tell the exact number of times a repetition would take place, use \u201cwhile loops\u201d. While loops are commonly used in games. Games have some continuous activity that users have to do <strong>until<\/strong> something happens.<\/p>\n\n\n\n<p>For example, in shooter games, players are free to move and can be shot. However, the game ends when the player\u2019s life finishes. Let\u2019s say you are building a shooter game. You can use a \u201cwhile loop\u201d to stop the game when the player\u2019s life finishes. You could use the following:<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">while (playerStillHasLives) {\n\tplayGame();\n}<\/pre>\n\n\n\n<p>The moment the player no longer has any lives \u2014 and playerStillHasLives becomes false \u2014 the game will stop.<\/p>\n\n\n\n<p>You can have something similar in games where players take turns. For a dealing card game like Crazy Eights, you can have a JavaScript while loop that will keep checking if all players\u2019 hands are not empty.&nbsp;<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">\/\/ in Crazy Eights\n\nwhile (noPlayersHandIsEmpty) {\n\tpermitNextPlayerToTakeTurn();\n}<\/pre>\n\n\n\n<p>For chess, you can have a JavaScript while loop that will keep checking if a checkmate happens. Checkmate is when one player wins the game. You want to stop the chess game once checkmate happens (or when checkmate is true). So you can have a <em>while<\/em> loop that will permit the next player\u2019s turn if the game is not in checkmate.<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">\/\/ in Chess\n\nwhile (!isCheckmate) {\n\tpermitNextPlayerToTakeTurn();\n}<\/pre>\n\n\n\n<p><strong>Note:<\/strong> Placing an exclamation mark (!) in front of a boolean (true or false) value, negates that value. So if the value is true, placing ! in front of it will make it false, and vice versa. This is why we used !isCheckmate for the while loop in chess.&nbsp; We only want to permit game play, <em>while checkmate is not true<\/em>.&nbsp;<\/p>\n\n\n\n<h3 class=\"wp-block-heading\"><strong>do-while loops<\/strong><\/h3>\n\n\n\n<p>JavaScript while loops have another version that rather starts with the <em>do<\/em> keyword. This variant requires you to place the braces \u2014 with the repeating statements inside \u2014 before the while keyword.<\/p>\n\n\n\n<p>Use do-while loops when you first need to run the repeating statement before continuously checking for the terminating condition.<\/p>\n\n\n\n<p>For example, when a shooter game starts,&nbsp; the player should have all their lives. So we can\u2019t start playing the game before checking if the playerStillHasLives with the do-while loop. Something like the following:<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">do {\n\tplayGame();\n} while (playerStillHasLives)<\/pre>\n\n\n\n<p>This loop behaves just like the previous ones. The difference is that the first terminating condition check is done after the repeating statement(s) has run once.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">2.<strong>JavaScript for loop<\/strong><\/h3>\n\n\n\n<p><em>for loops<\/em> start with the for keyword.<\/p>\n\n\n\n<p>The similarity between <em>for<\/em> and <em>while<\/em> loops is that they both will stop when some target condition takes place. On the other hand, there are two differences between <em>for<\/em> and <em>while<\/em> loops.<\/p>\n\n\n\n<p>The first difference is that you use a <em>while <\/em>loop when you can\u2019t tell the number of times the repetitions will take place. However, you use <em>for <\/em>loops when you know the number of repetitions ahead of time.&nbsp;<\/p>\n\n\n\n<p>The second difference between them is with contents of their brackets. The brackets of <em>while<\/em> loops contain <strong>only<\/strong> the target condition. In contrast, the brackets of <em>for<\/em> loops contain 3 items as follows:<\/p>\n\n\n\n<ol>\n<li>an initializer,<\/li>\n\n\n\n<li>the target condition itself,<\/li>\n\n\n\n<li>and an after-iteration.<\/li>\n<\/ol>\n\n\n\n<p>When writing a <em>for<\/em> loop, use semi-colons (;) to separate these three items inside the brackets. Something like the following:<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">for (initializer; condition; after - iteration) {\n\t\/\/ repeating statements\n}<\/pre>\n\n\n\n<p>The initializer is code that will be run just once, at the beginning of the loop. The after-iteration is a special code that the for loop will run <strong>after<\/strong> running the repeating statements (or after looping). This after-iteration is run before the next condition check.<\/p>\n\n\n\n<p>Altogether, the initializer, condition, and after-iteration of <em>for<\/em> loops use a <strong>loop variable<\/strong>. They use this loop variable to configure the loop\u2019s current repetition. This is why you use <em>for<\/em> loops when you know the number of loop repetitions ahead of time.<\/p>\n\n\n\n<p>Bearing the loop variable in mind, the structure of <em>for<\/em> loops is usually as follows:<\/p>\n\n\n\n<ol>\n<li>The initializer will be setting a loop variable to an initial value. E.g. let i = 3 (creates a new variable for the loop and sets its value to 3).<\/li>\n\n\n\n<li>The condition is usually checking the loop variable against a particular value. E.g. i &gt; 0 (checks if the i variable is greater than 0)<\/li>\n\n\n\n<li>The after-iteration will change the loop variable (i) to a different value to prepare for the next iteration. E.g. i&#8211; (setting i to its current value minus 1)<\/li>\n<\/ol>\n\n\n\n<p>A good example is when building a countdown. Let\u2019s say we have a website for showing congratulations. And that we want to countdown from 3 to 2, to 1, before popping \u201cCongratulations\u201d. We can use the following JavaScript for loop to achieve that:<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">for (let i = 3; i > 0; i--) {\n\tconsole.log(i);\n}\nconsole.log('Congratulations');\n\n\/\/ 3\n\/\/ 2\n\/\/ 1\n\/\/ Congratulations<\/pre>\n\n\n\n<h3 class=\"wp-block-heading\"><strong>for of loops<\/strong><\/h3>\n\n\n\n<p>The <em>for of<\/em> loop is a variant of the <em>for<\/em> loop with simpler brackets\u2019 contents.&nbsp;<\/p>\n\n\n\n<p>The difference between <em>for<\/em> and <em>for of<\/em> loops is that <em>for<\/em> loops have 3 different parts whereas <em>for of<\/em> loops have <strong>only<\/strong> one. Also, <em>for of<\/em> loops have the of keyword and you use <em>for of <\/em>loops with arrays.&nbsp;<\/p>\n\n\n\n<p>In JavaScript, an array is a list of items. An array is a collection of different elements. To create an array, place its members inside square brackets and separate them with commas. Something like the following:<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">const countdownSeconds = [3, 2, 1];<\/pre>\n\n\n\n<p>That was a simple array containing the countdown seconds: 3, 2, and 1. Now we can use this coundownSeconds array in a <em>for of<\/em> loop. The <em>for of<\/em> loop will loop through each member of the array and apply any instructions to each member.<\/p>\n\n\n\n<p>Rebuilding the countdown loop with a for-of loop, we could have the following:<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">const countdownSeconds = [3, 2, 1];\n\nfor (let i of countdownSeconds) {\n\tconsole.log(i);\n}\nconsole.log('Congratulations');\n\n\/\/ 3\n\/\/ 2\n\/\/ 1\n\/\/ Congratulations<\/pre>\n\n\n\n<p>This <em>for of<\/em> variant is more elegant than the plain <em>for<\/em> loop. You don\u2019t need to worry about the loop variable. You simply use an array having in mind that the loop will use each array member.<\/p>\n\n\n\n<p><em>for of<\/em> loops are useful with unsorted arrays or a custom list of items. With such custom lists, you are not worried about the order of items \u2014 as with the case of the countdown. You rather want all the members of this custom list to be used up.<\/p>\n\n\n\n<p>An example will be to use or list out members of an array. Let\u2019s use the 3 mentioned types of JavaScript loops.<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">const javaScriptLoops = ['while', 'for', 'for in'];\n\nfor (let type of javaScriptLoops) {\n\tconsole.log(type);\n}\n\n\/\/ while\n\/\/ for\n\/\/ for in<\/pre>\n\n\n\n<h3 class=\"wp-block-heading\"><strong>3. JavaScript for in loops<\/strong><\/h3>\n\n\n\n<p><em>for in <\/em>loops are special. You use them just as with <em>for of <\/em>loops but they have two differences.<\/p>\n\n\n\n<p>The first obvious difference is in the keyword. You will have to use in instead of of. Something like:<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">for (let i in array) {\n\t\/\/ use i\n}<\/pre>\n\n\n\n<p>instead of&nbsp;<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">for (let i of array) {\n\t\/\/ use i\n}<\/pre>\n\n\n\n<p>The second difference is with what the loop \u201cloops\u201d through. <em>for of<\/em> loops loop through the members of the array while <em>for in<\/em> loops loop through the<strong> positions<\/strong> of those members.<\/p>\n\n\n\n<p>The position of an array member is called its <strong>index<\/strong>. The index of an array member tells its current position in the array. The index starts counting from <strong>zero, <\/strong>i.e. The first member of an array has <strong>index 0<\/strong> and not 1.<\/p>\n\n\n\n<p>So anytime you want positions or indices (plural for index) of array members, use <em>for in<\/em> loop. For example, to output the index of each array member, you can use the following:<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">const javaScriptLoops = ['while', 'for', 'for in'];\n\nfor (let i in javaScriptLoops) {\n\tconsole.log(i);\n}\n\n\/\/ 0\n\/\/ 1\n\/\/ 2<\/pre>\n\n\n\n<p>Now you have the index of a given array member, how do you obtain that member from that index? Use the <strong>square brackets notation<\/strong>. The square brackets notation is a technique for obtaining an array member through 2 steps:<\/p>\n\n\n\n<ol>\n<li>Place the index of that member inside square brackets.<\/li>\n\n\n\n<li>Place the square brackets after the array name.<\/li>\n<\/ol>\n\n\n\n<p>The following code outputs the second member of the array (with index 1).<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">const javaScriptLoops = ['while', 'for', 'for in'];\nconsole.log(javaScriptLoops[1]);\n\n\/\/ for<\/pre>\n\n\n\n<p>Now you have the index and the array member, why would use them together? Sometimes, you might want to list out the array members with numbers attached to them. So instead of attaching the numbers to the array members, you use their <strong>indices<\/strong> to obtain their positions.Inside a <em>for in<\/em> loop, use the square brackets notation to access a given array member with its index. Something like the following:<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">const javaScriptLoops = ['while', 'for', 'for in'];\n\nfor (let i in javaScriptLoops) {\n\tconsole.log(i + '. ' + javaScriptLoops[i]);\n}\n\n\/\/ 0. while\n\/\/ 1. for\n\/\/ 2. for in<\/pre>\n\n\n\n<p>But the index of arrays start counting from 0 and not 1. What do you do if you want to start the list from 1? Display the sum of i and 1. Something like the following:<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">const javaScriptLoops = ['while', 'for', 'for in'];\n\nfor (let i in javaScriptLoops) {\n\tconsole.log(++1 + '. ' + javaScriptLoops[i]);\n}\n\n\/\/ 1. while\n\/\/ 2. for\n\/\/ 3. for in<\/pre>\n\n\n\n<p><strong>Note:<\/strong> Placing double addition sign (++) in front of a variable is the same as adding 1 to its value.<\/p>\n\n\n\n<p><strong>Summary<\/strong><\/p>\n\n\n\n<ul>\n<li>Looping is repeating an instruction over and over until a given condition is met.<\/li>\n\n\n\n<li>Use loops once you identify repeating code and a terminating condition.<\/li>\n\n\n\n<li>JavaScript loops include\n<ul>\n<li>JavaScript while<\/li>\n\n\n\n<li>JavaScript for<\/li>\n\n\n\n<li>JavaScript for-in loops.<\/li>\n<\/ul>\n<\/li>\n\n\n\n<li><em>JavaScript while loops<\/em> for when the number of iterations is not known ahead of time.<\/li>\n\n\n\n<li><em>JavaScript for loops<\/em> for when you know how many times the repetitions should take place.<\/li>\n\n\n\n<li><em>JavaScript for in loops<\/em> for when you want to iterate over the keys of a JavaScript object.<\/li>\n<\/ul>\n\n\n\n<h4 class=\"wp-block-heading\"><strong>Conclusion<\/strong><\/h4>\n\n\n\n<p>Loops are a great part of JavaScript, but the language also has other important parts like conditionals, functions, operators, etc. Learning is fun when you can learn and play with others. On Sololearn, you do just that.<a href=\"https:\/\/www.sololearn.com\/learn\/courses\/javascript-introduction\"> Learn JavaScript for FREE on Sololearn here<\/a>.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Programming is like creating a manual for computers and digital devices. In turn, the manual is like the software that computers will run. When creating a manual, you write out instructions in a step-by-step manner. Let\u2019s say you are creating a manual on how to change a light bulb. The manual instructions could look like <a href=\"https:\/\/www.sololearn.com\/blog\/javascript-loop\/\" class=\"more-link\">&#8230;<span class=\"screen-reader-text\">  How to use JavaScript Loops?<\/span><\/a><\/p>\n","protected":false},"author":3,"featured_media":2059,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[35],"tags":[41,66],"_links":{"self":[{"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/posts\/1674"}],"collection":[{"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/comments?post=1674"}],"version-history":[{"count":4,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/posts\/1674\/revisions"}],"predecessor-version":[{"id":2529,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/posts\/1674\/revisions\/2529"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/media\/2059"}],"wp:attachment":[{"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/media?parent=1674"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/categories?post=1674"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/tags?post=1674"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}