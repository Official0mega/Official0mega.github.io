{"id":1788,"date":"2022-12-02T08:37:15","date_gmt":"2022-12-02T08:37:15","guid":{"rendered":"https:\/\/blog-dev.sololearn.com\/?p=1788"},"modified":"2023-03-30T17:24:10","modified_gmt":"2023-03-30T17:24:10","slug":"write-more-efficient-code","status":"publish","type":"post","link":"https:\/\/www.sololearn.com\/blog\/write-more-efficient-code\/","title":{"rendered":"Write more efficient code"},"content":{"rendered":"\n<p>You may be a student, freelancer, software engineering professional, or simply an individual interested in coding. Yet, have you ever thought about how writing efficient code can be important for your software product? So let&#8217;s discuss some tips and concepts on how to make code more efficient.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Advantages of writing more efficient code<\/h2>\n\n\n\n<p>Suppose you are in a leading software company, and your manager asks you to have a look into an ongoing production incident.&nbsp;<\/p>\n\n\n\n<p>In such a case, first, you need to understand the issue and execute some debugging rounds to identify where the code is breaking. Then you need to understand the code and find a fix for the issue. However, it isn&#8217;t easy to understand the codebase and provide an ETA to deliver a fix if the codebase has,<\/p>\n\n\n\n<ul>\n<li><strong>Repeated the same function in multiple places<\/strong><\/li>\n\n\n\n<li><strong>Unstructured folder structure and architecture<\/strong><\/li>\n\n\n\n<li><strong>unnecessary loop executions<\/strong><\/li>\n\n\n\n<li><strong>tightly coupled components<\/strong><\/li>\n\n\n\n<li><strong>Unnecessary variable declarations<\/strong><\/li>\n<\/ul>\n\n\n\n<p>Hence the code should be clean and implemented using efficient coding techniques, best practices, and algorithms.<\/p>\n\n\n\n<p>If so, that code can be reused (saving the efforts of rewriting the whole program from scratch) and modularized. Moreover, it will be easy to add new features to the existing codebase and easy to debug\/ maintain with clear readability of the codebase.<\/p>\n\n\n\n<p>Application performance is another significant benefit gained through efficient and optimized code. Suppose you have a shopping cart application with the following performance concerns.<\/p>\n\n\n\n<ul>\n<li><strong>Less page loading times and fast search results (i.e., Home page, item search results)<\/strong><\/li>\n\n\n\n<li><strong>Less time to complete online transactions without unusual waitings or timeouts.<\/strong><\/li>\n<\/ul>\n\n\n\n<p>You need to have an efficient and optimized code to achieve the above performance benefits. It will definitely lead to<strong> more user interactions<\/strong> and help <strong>generate more revenue<\/strong>.<\/p>\n\n\n\n<p>I believe now you have a clear idea of <strong>the importance of making code more efficient <\/strong>in your application. So let\u2019s discuss some<strong> concepts and tips<\/strong> which you can follow to make code more efficient.&nbsp;<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Use appropriate design patterns and frameworks.<\/h2>\n\n\n\n<p>Utilizing a <a href=\"https:\/\/www.tutorialspoint.com\/design_pattern\/design_pattern_overview.htm\" target=\"_blank\" rel=\"noopener\">design pattern<\/a> is a general solution for having a great software design against commonly occurring problems. In other words, design patterns provide solutions for previously occurred problems. A design pattern is not a complete design that can be directly transformed into code. Instead, it describes a proven template for a problem that occurred in the past. There are twenty-three design patterns that bring different solutions. Some most popular design patterns are Creational\/Singleton, Decorator, Command Design Pattern, Factory Design Pattern, and the Observer Pattern.<\/p>\n\n\n\n<p>After selecting the appropriate tech stack to implement your application, it is better to spend some time and conduct some POCs (Proof of Control) to find suitable design patterns and frameworks. Initially, you may find it time-consuming. However, it is really easy to manage all the SDLC phases after starting implementation with a strong design pattern. Besides, using a solid design pattern\/ framework in your codebase provides numerous benefits, such as the following.<\/p>\n\n\n\n<ul>\n<li>apply better &amp; robust design and structure for the application<\/li>\n\n\n\n<li>easy to apply new design solutions to an existing application<\/li>\n\n\n\n<li>Speed up the development phase<\/li>\n\n\n\n<li>Improved maintainability, and reusability of components<\/li>\n\n\n\n<li>loosely coupled components, and high cohesiveness<\/li>\n\n\n\n<li>reduced time, cost, and human efforts by reusing proven solutions and modules.<\/li>\n<\/ul>\n\n\n\n<p>This way, you can write efficient code using a good design pattern. It is also highly recommended by experts and organizations in the industry. Most leading software organizations maintain their own customized frameworks and project structures for developing their products.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Use meaningful variable names and avoid declaring unnecessary variables<\/h2>\n\n\n\n<p>Always try to declare meaningful variable names when coding as it improves code readability. Even if the code is written by yourself and you refer to it after 1 or 2 months, you can forget the purpose of a variable or what kind of value is stored in it. Hence it can take additional time to carry out some debugging rounds to identify the purpose of the variable.&nbsp;<\/p>\n\n\n\n<p>So can you imagine how difficult it would be if someone else tried to understand or read that code? Hence, always declare meaningful variable names and try not to declare abbreviated variable names.<\/p>\n\n\n\n<p>Another essential thing is to avoid declaring unnecessary variables. If you want to return a certain value instead of storing it in a separate variable, you can directly return the value. It will a<a href=\"https:\/\/www.sololearn.com\/blog\/what-is-ram\/\" data-type=\"post\" data-id=\"2649\">void declaring memory allocations in RAM.<\/a> Thus it will improve the efficiency of the code as well as the application performance.<\/p>\n\n\n\n<p>See the below example that includes meaningless &amp; unnecessary variables.<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">getNetSalary = () => {\n\tdouble bsal = 10000;\n\tdouble ex = 2500;\n\tdouble netsal = bs - expenses;\n\n\treturn ns;\n}<\/pre>\n\n\n\n<p>You can make the above code more efficient by using meaningful variable names and avoiding unnecessary declarations.<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">getNetSalary = () => {\n\tdouble basicSalary = 10000;\n\tdouble expenses = 2500;\n\n\treturn (basicSalary - expenses);\n}<\/pre>\n\n\n\n<h2 class=\"wp-block-heading\">Use caching technologies &amp; implement daemon jobs<\/h2>\n\n\n\n<h3 class=\"wp-block-heading\">What are caching technologies?<\/h3>\n\n\n\n<p>Caching service is a <a href=\"https:\/\/www.tutorialspoint.com\/What-is-NoSQL-Not-Only-SQL-database\" target=\"_blank\" rel=\"noopener\">NoSQL<\/a> database that stores key-value pairs. It can be used to store values against unique keys. You can store the value in the string, JSON, or any other format in key-value stores. Redis, Memcached, and AWS elastiCache are the most popular caching services these days.&nbsp;<\/p>\n\n\n\n<p>Now let\u2019s see how caching services can help make your code more efficient.<\/p>\n\n\n\n<p>Suppose your web application is a student LMS, and you are displaying the assignment submission count and the count of students enrolled for courses on the instructor homepage.&nbsp;<\/p>\n\n\n\n<p>You have to execute some database queries to get these counts. The easiest way to show these counts on the homepage is to execute queries while rendering the instructor homepage.<\/p>\n\n\n\n<p>However, this method may cause performance degradation in the application and reduce efficiency. For instance, it will take a lot of time to finish query executions when new students enroll or add new submissions. It will lead to a high response time when loading the instructor&#8217;s home page. We can bring caching technologies to the table for such performance issues.<\/p>\n\n\n\n<p>The tip is to implement a script to get enrollment\/ submission counts and store them in a key-value store. This script is independent of instructor homepage loading and is daemonized (execute script in Linux background process).&nbsp;<\/p>\n\n\n\n<p>Daemon holds the responsibility of communicating with the database for new student enrollments or record submissions. When a new record is added, the daemon will execute the relevant queries and write counts in the key-value store.&nbsp;<\/p>\n\n\n\n<p>We only have to get the counts from the key-value store during the instructor homepage loading and display in the application frontend. It reduces the response time and removes the frequently executed heavy queries from the application during page loading. Thus the application code gets more efficient, and reliable by using caching technologies.&nbsp;<\/p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img decoding=\"async\" loading=\"lazy\" width=\"968\" height=\"601\" src=\"https:\/\/blog-dev.sololearn.com\/wp-content\/uploads\/2022\/12\/unnamed-23.png\" alt=\"\" class=\"wp-image-1789\" srcset=\"https:\/\/www.sololearn.com\/wp-content\/uploads\/2022\/12\/unnamed-23.png 968w, https:\/\/www.sololearn.com\/wp-content\/uploads\/2022\/12\/unnamed-23-300x186.png 300w, https:\/\/www.sololearn.com\/wp-content\/uploads\/2022\/12\/unnamed-23-768x477.png 768w\" sizes=\"(max-width: 968px) 100vw, 968px\" \/><figcaption class=\"wp-element-caption\">Architecture diagram<\/figcaption><\/figure>\n\n\n\n<p>This concept is a high-level solution for software products used in the industry to make the code highly efficient.<\/p>\n\n\n\n<p>Apply Object-Oriented Concepts and identify common functionalities<\/p>\n\n\n\n<p>It is valuable to identify the following facts instead of writing dirty and unstructured code.<\/p>\n\n\n\n<ol>\n<li>What are the main classes in our project?<\/li>\n\n\n\n<li>What are the parent and child classes?<\/li>\n\n\n\n<li>Common functionalities.<\/li>\n\n\n\n<li>Repetitive processes.<\/li>\n\n\n\n<li>What data should be hidden in subclasses?<\/li>\n<\/ol>\n\n\n\n<p>You can implement the code using object-oriented concepts such as inheritance, polymorphism (method overloading &amp; overriding), abstraction, and encapsulation to resolve the above issues.&nbsp;<\/p>\n\n\n\n<p>Now let&#8217;s discuss how to make the code more efficient using the above concepts.<\/p>\n\n\n\n<p>You can implement\/ identify parent classes and common functions and create subclasses by inheriting them. Then those inherited subclasses will be allowed access to the parent class functionalities. You can customize the common functionalities implemented in parent classes using operator overloading and overriding techniques in child classes.<\/p>\n\n\n\n<p>Additionally, use encapsulation to protect and provide access levels to functions and variables.<\/p>\n\n\n\n<p>You can enhance the efficiency of the code and implement uniform code using OOP concepts rather than writing the same code repeatedly. Check the following code to get a better idea of these concepts.<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">public class User {\n\tpublic int login(string username, string password) {\n\t\t\/\/user login\n\t}\n\n\tpublic void draw() {\n\t\t\/\/draw line\n\t}\n}\n\npublic class Teacher extends User {\n\tlogin('teacher1', '123')\n\n\t\/\/method overloading and overriding\n\tpublic void draw(string type) {\n\t\tif (type == 'Circle') {\n\t\t\t\/\/draw circle\n\t\t}\n\t}\n}\n\npublic class Student extends User {\n\tlogin('student1', '123')\n\tdraw();\n}<\/pre>\n\n\n\n<h2 class=\"wp-block-heading\">Reduce unnecessary code executions<\/h2>\n\n\n\n<p>Suppose you fetched some data from the database and stored it in an array as objects. Now you want to loop through the array and find a specific object. Once it is found, you don\u2019t need to execute the loop or wait until it stops executing. You can use break; operator to immediately terminate the execution of the loop or the next; operator to skip the current iteration &amp; jump into the next code block. You can eliminate unnecessary code executions by using this technique.<\/p>\n\n\n\n<p>The following example shows how to break the loop and execute <strong>SendGiftCard()<\/strong> function when the 100th user is found.<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">var userData = getUserData(); \/\/fetch user data\nvar userCount = userData.length\nfor (var currentUser = 1; currentUser &lt;= userCount; currentUser++) {\n\tif (currentUser === 100) {\n\t\tSendGiftCard();\n\t\tbreak;\n\t}\n}<\/pre>\n\n\n\n<p>Another tip is identifying repetitive operations, removing unnecessary costly operations from the loop, and storing them in a global state. The following code gets the word count of the <strong>text <\/strong>variable throughout the loop execution. Here, the problem is that the <strong>.length<\/strong> function executes throughout the loop execution even though it is unnecessary.<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">var text = 'Hello world'\n\nfor (var i = 0; i &lt; 100; i++) {\n\tprint `Word count is ${text.length}`\n}<\/pre>\n\n\n\n<p>You can optimize and remove unnecessary calculations of the above code by storing the word count in a global variable.<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">var text = 'Hello world'\nlet wordCount = text.length\n\nfor (var i = 0; i &lt; 100; i++) {\n\tprint `Word count is ${wordCount}`\n}<\/pre>\n\n\n\n<h2 class=\"wp-block-heading\">Declare constant variables in a single place &amp; import them where necessary<\/h2>\n\n\n\n<p>You will have to declare numerous types of constant variables in your project, such as configurations, database connection string URLs, action types, constant names, and numbers.<\/p>\n\n\n\n<p>For instance, declaring database connection string url within each db operation is not a good practice. Can you imagine how dull and risky it would be if you had to change the db username and password in every connection string?&nbsp;<\/p>\n\n\n\n<p>So the best way is to keep those kinds of constants in a single place and import them where necessary. Then you have to change only one place if you need to modify a certain value. Thus, this technique makes the code efficient by reducing developer efforts and typo errors.<\/p>\n\n\n\n<p>i.e&#8230; Store constant values in a separate file as shown in the below code snippet.<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">export const FETCH_ALL = 'FETCH_ALL'\nexport const CREATE = 'CREATE'\nexport const PORT = 5000\nexport const CONNECTION_URL = \"mongodb+srv:\/\/mongodb.net\/myFirstDatabase?retryWrites=true&amp;w=majority\"\n<\/pre>\n\n\n\n<p>Then access those constants in separate files as shown below.<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">import {\n\tFETCH_ALL,\n\tCREATE,\n\tCONNECTION_URL\n} from '..\/constants'\n\ninsertStudent = () => {\n\tmongoose.connect(CONNECTION_URL).then({\n\t\t\/\/insert user\n\t}).catch({\n\t\t\/\/error handling\n\t})\n}\n\nexport default (posts = [], action) => {\n\tswitch (action.type) {\n\t\tcase FETCH_ALL:\n\t\t\treturn action.payload;\n\t\tcase CREATE:\n\t\t\treturn [...posts, action.payload];\n\t}\n}<\/pre>\n\n\n\n<h3 class=\"wp-block-heading\">Use and data structures and inbuilt functionalities<\/h3>\n\n\n\n<p>Instead of declaring multiple variables to store the same type of data, you can use data structures to store them using a single identifier name.&nbsp;<\/p>\n\n\n\n<p>The most commonly used data structures in the software industry are <strong>arrays, 2-dimensional arrays, linked lists, hashes, queues, and data dictionaries<\/strong>.&nbsp;<\/p>\n\n\n\n<p>The following tips make your code more efficient by using data structures.<\/p>\n\n\n\n<p>Data structures such as arrays, lists, and hashes make repetitions more simple.<\/p>\n\n\n\n<p>They allow users to store multiple pieces of data of the same type using a single identifier name rather than keeping multiple variables.<\/p>\n\n\n\n<p>It is very efficient to store compound data sets using two-dimensional arrays and data dictionaries rather than declaring individual arrays.<\/p>\n\n\n\n<p>In Some scenarios, we can avoid implementing loops and use data structures such as arrays or hashes with language-specific inbuilt functionalities such as grep, map, filter, and reduce.<\/p>\n\n\n\n<p>The following two examples show code snippets on how to use <strong>grep <\/strong>and <strong>map <\/strong>functions.<\/p>\n\n\n\n<p>Use <strong>grep <\/strong>instead of looping a whole array in Perl as shown below.<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">  my @array = [1, 2, 3, 4, 5, 6];\n  my $match = 3;\n  if (my($matched) = grep $_ eq $match, @array) {\n  \tprint \"found it: $matched\\n\";\n  }<\/pre>\n\n\n\n<p>Use the <strong>map <\/strong>function in JavaScript to iterate an array instead of looping items and creating a new array.<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">const array1 = [2, 4, 6, 8]\nconst doubledArray = array1.map(arrayItem => {\n\treturn arrayItem * 2\n})<\/pre>\n\n\n\n<h3 class=\"wp-block-heading\">Conclusion<\/h3>\n\n\n\n<p>In this article, you learned the importance of writing efficient codes. Then you learned how to write efficient codes. In the end, it all comes down to having good knowledge of the subject. This is why you should learn coding from a good education platform. Sololearn is the perfect platform for you with courses developed by experts in the field. <a href=\"https:\/\/www.sololearn.com\/onboarding\/auth\/signup\">Sign up<\/a> today to learn more about the Sololearn course.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>You may be a student, freelancer, software engineering professional, or simply an individual interested in coding. Yet, have you ever thought about how writing efficient code can be important for your software product? So let&#8217;s discuss some tips and concepts on how to make code more efficient. Advantages of writing more efficient code Suppose you <a href=\"https:\/\/www.sololearn.com\/blog\/write-more-efficient-code\/\" class=\"more-link\">&#8230;<span class=\"screen-reader-text\">  Write more efficient code<\/span><\/a><\/p>\n","protected":false},"author":7,"featured_media":2026,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[33],"tags":[84,49],"_links":{"self":[{"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/posts\/1788"}],"collection":[{"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/users\/7"}],"replies":[{"embeddable":true,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/comments?post=1788"}],"version-history":[{"count":3,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/posts\/1788\/revisions"}],"predecessor-version":[{"id":2653,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/posts\/1788\/revisions\/2653"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/media\/2026"}],"wp:attachment":[{"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/media?parent=1788"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/categories?post=1788"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/tags?post=1788"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}