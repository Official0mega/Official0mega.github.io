{"id":1476,"date":"2022-11-03T09:17:26","date_gmt":"2022-11-03T09:17:26","guid":{"rendered":"https:\/\/blog-dev.sololearn.com\/2022\/11\/03\/how-do-you-increase-the-scalability-of-an-app-that-contains-a-database\/"},"modified":"2023-03-10T14:02:59","modified_gmt":"2023-03-10T14:02:59","slug":"increase-app-scalability","status":"publish","type":"post","link":"https:\/\/www.sololearn.com\/blog\/increase-app-scalability\/","title":{"rendered":"What Is Database Scalability and How to Scale a Database?"},"content":{"rendered":"<blockquote><p><b style=\"font-size: revert; color: var(--wp--preset--color--contrast); font-family: var(--wp--preset--font-family--system-font);\">Ever dreamed of making an app that\u2019s as massive and popular as Facebook? Well, realistically, you have to start with a much smaller app. If your user base grows, so do your database needs. But what exactly does that mean?\u00a0<\/b><\/p><\/blockquote>\n<p><span style=\"font-weight: 400;\">Scaling a database is inevitable when you get more users. A <a href=\"https:\/\/www.sololearn.com\/blog\/what-is-datawarehouse\/\">database<\/a> is scaled to meet the changing needs of application usage. You need more processing power, storage space, and network capacity to scale.<\/span><\/p>\n<p><span style=\"font-weight: 400;\">So how does database scalability work? And how does it benefits your application? We\u2019ll also talk about how developers like yourself can solve database scalability challenges.\u00a0<\/span><\/p>\n<h2><span style=\"font-weight: 400;\">Why Is Database Scalability Needed?\u00a0<\/span><\/h2>\n<p><span style=\"font-weight: 400;\">Think you can just launch an application and be done with it? It\u2019s a little more complex than that.. After going live, you must ensure that your application can serve relevant user traffic. A user base can jump from hundreds to millions in a couple of hours. But, your app shouldn\u2019t suffer scalability issues.<\/span><\/p>\n<p><span style=\"font-weight: 400;\">Even large companies can make that mistake and suffer from it. In 2012, EA released <\/span><a href=\"https:\/\/en.wikipedia.org\/wiki\/The_Simpsons:_Tapped_Out#In-game_problems\" target=\"_blank\" rel=\"noopener\"><span style=\"font-weight: 400;\">The Simpsons: Tapped Out<\/span><\/a><span style=\"font-weight: 400;\">, and it faced problems right after launch.\u00a0\u00a0<\/span><\/p>\n<p><span style=\"font-weight: 400;\">Due to massive user demand, the application could not handle user requests or traffic.<\/span><\/p>\n<p><span style=\"font-weight: 400;\">For an app to succeed, it needs to perform well <\/span><i><span style=\"font-weight: 400;\">and <\/span><\/i><span style=\"font-weight: 400;\">be available.\u00a0 So, you need to scale both the software and hardware of the application to tackle traffic. This ensures 24\/7 application availability, no matter how many users you have.<\/span><\/p>\n<h2><span style=\"font-weight: 400;\">What is Database Scalability?<\/span><\/h2>\n<p><span style=\"font-weight: 400;\">Database scalability adds or removes database resources on demand. It aims to meet the changing needs of users on live servers.<\/span><\/p>\n<p><span style=\"font-weight: 400;\">A database can scale in two ways:<\/span><\/p>\n<ul>\n<li aria-level=\"1\"><b>Vertical scaling<\/b><\/li>\n<\/ul>\n<ul>\n<li aria-level=\"1\"><b>Horizontal scaling<\/b><\/li>\n<\/ul>\n<h3><span style=\"font-weight: 400;\">Vertical Database Scaling<\/span><\/h3>\n<p><span style=\"font-weight: 400;\">Vertical database scaling adds CPU, storage space, and memory resources to the same server. It improves the performance of individual databases.<\/span><\/p>\n<p><span style=\"font-weight: 400;\">Vertical scaling is better if the application doesn\u2019t need massive memory and processing. Generally, it doesn\u2019t change the app\u2019s code. Vertical database scaling updates the hardware specifications mostly.<\/span><\/p>\n<p><span style=\"font-weight: 400;\">A machine\u2019s hardware resources limit the extent of vertical scaling. Beyond this limit, an application would need extra servers. More servers bring complexity, and they are expensive.<\/span><\/p>\n<h3><span style=\"font-weight: 400;\">Horizontal Database Scaling<\/span><\/h3>\n<p><span style=\"font-weight: 400;\">As mentioned above, vertical scaling adds more computer resources to the same server. However, the horizontal database scaling technique adds more servers to the system. It distributes the database across various machines.\u00a0<\/span><\/p>\n<p><span style=\"font-weight: 400;\">Data requests from the users go directly to the corresponding server that stores the data. This process is also known as <\/span><b><i>data sharding<\/i><\/b><span style=\"font-weight: 400;\">.\u00a0<\/span><\/p>\n<p><span style=\"font-weight: 400;\">A horizontally scalable database increases <a href=\"https:\/\/www.sololearn.com\/blog\/what-is-sql-used-for\/\">database performance<\/a>. But both the hardware and code must be upgraded. In horizontal scaling, the app\u2019s downtime is minimum. If one server is down, others can handle data requests.<\/span><\/p>\n<p><span style=\"font-weight: 400;\">On the downside, data sharding is a complex process. So, maintaining multiple servers can be difficult for database administrators.<\/span><\/p>\n<h2><span style=\"font-weight: 400;\">How to Scale Up Database: 5 Database Scaling Techniques<\/span><\/h2>\n<p><span style=\"font-weight: 400;\">Various database scaling methods are available. Each method is different depending on the database and the goal of scalability.\u00a0<\/span><\/p>\n<p><span style=\"font-weight: 400;\">These are 5 techniques that can be used to scale the database for better performance.<\/span><\/p>\n<ul>\n<li aria-level=\"1\"><b>Replication<\/b><\/li>\n<\/ul>\n<ul>\n<li aria-level=\"1\"><b>Sharding<\/b><\/li>\n<\/ul>\n<ul>\n<li aria-level=\"1\"><b>Cache<\/b><\/li>\n<\/ul>\n<ul>\n<li aria-level=\"1\"><b>Indexing<\/b><\/li>\n<\/ul>\n<ul>\n<li aria-level=\"1\"><b>Session storage<\/b><\/li>\n<\/ul>\n<h3><span style=\"font-weight: 400;\">1. Replication<\/span><\/h3>\n<p><span style=\"font-weight: 400;\">Replication is a horizontal database scaling technique. <\/span><b>It duplicates or makes copies of computer resources. T<\/b><span style=\"font-weight: 400;\">he developer can create and maintain a copy of the database using the replication technique. Typically, more than one server contains a copy of the information. This means better accessibility, reliability, and fault tolerance.<\/span><\/p>\n<p><span style=\"font-weight: 400;\">Due to replication, when a user requests data, the answer to the search query is not limited to one server. If one server goes down, others can still answer the request. So, the system&#8217;s capacity to handle database read requests improves.<\/span><\/p>\n<p><span style=\"font-weight: 400;\">However, data needs to be consistent on these extra servers so that the response to a user query is always the same.<\/span><\/p>\n<h3><span style=\"font-weight: 400;\">2. Sharding<\/span><\/h3>\n<p><span style=\"font-weight: 400;\">This is another horizontal database scaling technique. <\/span><b>It manages the system load\u00a0 by splitting the main database into smaller databases called shards.\u00a0<\/b><\/p>\n<p><span style=\"font-weight: 400;\">Sometimes sharding is also referred to as table partitioning. Generally, managing smaller shards is easier and faster.<\/span><\/p>\n<p><span style=\"font-weight: 400;\">There are two main sharding techniques.<\/span><\/p>\n<ul>\n<li aria-level=\"1\"><b>Vertical sharding<\/b><\/li>\n<\/ul>\n<ul>\n<li aria-level=\"1\"><b>Horizontal sharding<\/b><\/li>\n<\/ul>\n<p><b>Horizontal sharding<\/b><span style=\"font-weight: 400;\"> organizes data tables in separate machines or servers. The resulting tables have identical columns but different rows. For instance, if a database table has 100 rows, we can split them into two horizontal shards of 50 rows each.<\/span><\/p>\n<p><b>Vertical sharding<\/b><span style=\"font-weight: 400;\"> is more complex. Each partition is independent, with distinct rows and columns in each shard.<\/span><\/p>\n<p><b>Example:<\/b><b><br \/>\n<\/b><i><span style=\"font-weight: 400;\">What happens if one user requests a name and the other requests an address from an employee record? We can split the name and address columns into separate shards.<\/span><\/i><\/p>\n<p><span style=\"font-weight: 400;\">Sharded databases mean better processing speed and resilience against failures. In case of downtime, a sharded database will continue to serve user requests. The affected shard is dealt with in isolation. But, a non-sharded database can cause a system-wide outage.<\/span><\/p>\n<p><span style=\"font-weight: 400;\">Sharding is flexible and offers great benefits. But, it is complex and expensive. The implementation and maintenance costs are high. So, this technique is usually considered after other scaling techniques are already tried.<\/span><\/p>\n<h3><span style=\"font-weight: 400;\">3. Cache<\/span><\/h3>\n<p><span style=\"font-weight: 400;\">Caching database queries is the simplest technique to handle database load. <\/span><b>Caching scales the database by storing previous database results in temporary memory.<\/b><\/p>\n<p><span style=\"font-weight: 400;\">When a user requests information, the system checks whether or not the cache contains it. The saved data is retrieved from the cache instead of the main storage. This allows faster access to information.<\/span><\/p>\n<p><span style=\"font-weight: 400;\">Caching also offers fast processing and better resiliency. If the main database is unavailable, the cache can still provide output to the user.<\/span><\/p>\n<h3><span style=\"font-weight: 400;\">4. Indexing\u00a0<\/span><\/h3>\n<p><b>Database indexing speeds up data retrieval from a database.<\/b><span style=\"font-weight: 400;\"> A database index is like a table of contents or a book&#8217;s index.\u00a0<\/span><\/p>\n<p><span style=\"font-weight: 400;\">Every time a user requests data, indexes find the data quickly. It saves time spent on searching the entire database table to find the relevant record.<\/span><\/p>\n<p><span style=\"font-weight: 400;\">There are two types of database indexes:<\/span><\/p>\n<ul>\n<li aria-level=\"1\"><b>Clustered index<\/b><\/li>\n<\/ul>\n<ul>\n<li aria-level=\"1\"><b>Non-clustered index<\/b><\/li>\n<\/ul>\n<p><span style=\"font-weight: 400;\">A <\/span><b>clustered index<\/b><span style=\"font-weight: 400;\"> points to unique data records (the actual data). A data record represents the actual data values. A <\/span><b>non-clustered index<\/b><span style=\"font-weight: 400;\"> points to the relevant data address. A data address represents a position in the memory where the data is saved.<\/span><\/p>\n<p><span style=\"font-weight: 400;\">Due to quicker search results, database load is managed, and users get a better experience using your app.<\/span><\/p>\n<p><span style=\"font-weight: 400;\">But adding an index table is costly. If your table requires frequent updates, you&#8217;ll have to update the corresponding index table as well. So, if indexes are not properly managed, they can lead to performance degradation.<\/span><\/p>\n<h3><span style=\"font-weight: 400;\">5. Session Storage<\/span><\/h3>\n<p><b>Session storage is a technique that works with how your application handles user sessions<\/b><span style=\"font-weight: 400;\">.\u00a0<\/span><\/p>\n<p><span style=\"font-weight: 400;\">Most applications store sessions in browser cookies or on database servers. Generally, the browser stores session data on the client machine in the form of cookies which offers quick access but is limited in size.<\/span><\/p>\n<p><span style=\"font-weight: 400;\">However, cookies can be removed easily. And they offer limited memory, so there\u2019s always a risk of session data loss. To solve this problem, we can temporarily save the session data on server storage. On the server, sessions are stored for a limited period, so they don\u2019t affect the overall speed of the server or the database.<\/span><\/p>\n<h2><span style=\"font-weight: 400;\">Ready to Learn More?<\/span><\/h2>\n<p><span style=\"font-weight: 400;\">In summary, these are 5 common database scaling methods:<\/span><\/p>\n<ul>\n<li aria-level=\"1\"><b>Replication: <\/b><span style=\"font-weight: 400;\">Create duplicate database servers to handle user load<\/span><\/li>\n<\/ul>\n<ul>\n<li aria-level=\"1\"><b>Sharding:<\/b><span style=\"font-weight: 400;\"> Distribute data among multiple smaller databases, known as shards<\/span><\/li>\n<\/ul>\n<ul>\n<li aria-level=\"1\"><b>Cache:<\/b><span style=\"font-weight: 400;\"> Store the result of previous user data requests in memory\u00a0<\/span><\/li>\n<\/ul>\n<ul>\n<li aria-level=\"1\"><b>Indexing: <\/b><span style=\"font-weight: 400;\">Create fast loop-up tables to enable quicker querying on database tables<\/span><\/li>\n<\/ul>\n<ul>\n<li aria-level=\"1\"><b>Session storage:<\/b><span style=\"font-weight: 400;\"> Store session data to manage user load<\/span><\/li>\n<\/ul>\n<p><span style=\"font-weight: 400;\">Curious about programming, databases, or data science? Start your journey with a <\/span><span style=\"font-weight: 400;\">Sololearn course<\/span><span style=\"font-weight: 400;\">.<\/span><\/p>\n<p><span style=\"font-weight: 400;\">Get the hottest skills in the IT industry by downloading our app and learning on the go! You can find it on <\/span><a href=\"https:\/\/sololearn.onelink.me\/s4ie\/vmisflju\" target=\"_blank\" rel=\"noopener\"><span style=\"font-weight: 400;\">App Store<\/span><\/a><span style=\"font-weight: 400;\"> or <\/span><a href=\"https:\/\/play.google.com\/store\/apps\/details?id=com.sololearn\" target=\"_blank\" rel=\"noopener\"><span style=\"font-weight: 400;\">Google Play<\/span><\/a><span style=\"font-weight: 400;\">.<\/span><\/p>\n","protected":false},"excerpt":{"rendered":"<p>Ever dreamed of making an app that\u2019s as massive and popular as Facebook? Well, realistically, you have to start with a much smaller app. If your user base grows, so do your database needs. But what exactly does that mean?\u00a0 Scaling a database is inevitable when you get more users. A database is scaled to <a href=\"https:\/\/www.sololearn.com\/blog\/increase-app-scalability\/\" class=\"more-link\">&#8230;<span class=\"screen-reader-text\">  What Is Database Scalability and How to Scale a Database?<\/span><\/a><\/p>\n","protected":false},"author":3,"featured_media":2031,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[33],"tags":[20,61],"_links":{"self":[{"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/posts\/1476"}],"collection":[{"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/comments?post=1476"}],"version-history":[{"count":4,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/posts\/1476\/revisions"}],"predecessor-version":[{"id":2565,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/posts\/1476\/revisions\/2565"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/media\/2031"}],"wp:attachment":[{"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/media?parent=1476"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/categories?post=1476"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/tags?post=1476"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}