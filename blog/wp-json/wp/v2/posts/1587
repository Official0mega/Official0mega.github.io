{"id":1587,"date":"2022-11-16T18:52:46","date_gmt":"2022-11-16T18:52:46","guid":{"rendered":"https:\/\/blog-dev.sololearn.com\/?p=1587"},"modified":"2023-03-07T14:57:50","modified_gmt":"2023-03-07T14:57:50","slug":"style-react-app","status":"publish","type":"post","link":"https:\/\/www.sololearn.com\/blog\/style-react-app\/","title":{"rendered":"How to style your React app?"},"content":{"rendered":"\n<p>If you want to add style to <a href=\"https:\/\/www.sololearn.com\/blog\/react-components\/\" data-type=\"post\" data-id=\"1720\">React components,<\/a> your creativity is your limit. Styling in React is like styling an HTML file, but you have the chance to get a lot more dynamic.\u00a0<\/p>\n\n\n\n<p>Apart from the conventional ways of styling such as adding classes and ids, direct styling in a <a href=\"https:\/\/www.sololearn.com\/blog\/what-is-css-used-for\/\" data-type=\"post\" data-id=\"1672\">CSS file,<\/a> and others, you can add styles with the native JavaScript objects. You can also use CSS modules without any complex setup.<\/p>\n\n\n\n<p>In this article, you\u2019ll learn about four different ways you can style in React. By the end of the article, you\u2019ll be confident in styling React components and get to know how React styles work.<\/p>\n\n\n\n<p>This is what we\u2019ll be styling in this article:<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">import Logo from \".\/sololearn-logo.png\"; function App() { return ( &lt;div>\n  &lt;img src={Logo} alt='Sololearn logo' \/>\n  &lt;h1>Welcome to Sololearn&lt;\/h1>\n  &lt;h2>The best platform for coding beginners&lt;\/h2>\n  &lt;p> At Sololearn, you get to learn programming languages like JavaScript, Python, C++, Java, and many more. &lt;\/p>\n  &lt;p> We also have learning resources for frameworks like Angular, Django, React, and many more. &lt;\/p>\n  &lt;a href='sololearn.com'>Start Learning&lt;\/a>\n&lt;\/div> ); } export default App;<\/pre>\n\n\n\n<p>And this\u2019s how it looks in the browser:<\/p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img decoding=\"async\" loading=\"lazy\" width=\"1024\" height=\"501\" src=\"https:\/\/blog-dev.sololearn.com\/wp-content\/uploads\/2022\/11\/Screen-Shot-2022-11-16-at-22.26.37-1024x501.png\" alt=\"\" class=\"wp-image-1589\" srcset=\"https:\/\/www.sololearn.com\/wp-content\/uploads\/2022\/11\/Screen-Shot-2022-11-16-at-22.26.37-1024x501.png 1024w, https:\/\/www.sololearn.com\/wp-content\/uploads\/2022\/11\/Screen-Shot-2022-11-16-at-22.26.37-300x147.png 300w, https:\/\/www.sololearn.com\/wp-content\/uploads\/2022\/11\/Screen-Shot-2022-11-16-at-22.26.37-768x376.png 768w, https:\/\/www.sololearn.com\/wp-content\/uploads\/2022\/11\/Screen-Shot-2022-11-16-at-22.26.37.png 1250w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" \/><\/figure>\n\n\n\n<h2 class=\"wp-block-heading\"><strong>Add CSS Classes to Components&nbsp;<\/strong><\/h2>\n\n\n\n<p>Just like the way you can add classes to <a href=\"https:\/\/www.sololearn.com\/blog\/html-elements\/\" data-type=\"post\" data-id=\"1715\">HTML elements<\/a>, you can also add CSS classes you\u2019ve written to your JSX elements. The only difference is that &#8220;class&#8221; is not called &#8220;class&#8221; in React, it is called &#8220;className&#8221;. That\u2019s because &#8220;class&#8221; is a reserved keyword in <a href=\"https:\/\/www.sololearn.com\/blog\/what-is-javascript-used-for\/\" data-type=\"post\" data-id=\"1791\">JavaScript<\/a>. And in React, you\u2019re always writing JavaScript.<\/p>\n\n\n\n<p>I want to center every content of our JSX. So, I\u2019m going to add a &#8220;className&#8221; I call &#8220;layout&#8221; to the top-level `div`. I&#8217;ll then write out the CSS for that `className` in the `index.css`.<\/p>\n\n\n\n<p>The index.html file:<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n  background-color: #f1f1f1;\n}\n\n.layout {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-direction: column;\n  height: 100vh;\n}<\/pre>\n\n\n\n<p>The JSX:&nbsp;<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">&lt;div className='layout'>\n\t...      \n&lt;\/div><\/pre>\n\n\n\n<p>Now, everything is centered:<\/p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img decoding=\"async\" loading=\"lazy\" width=\"1024\" height=\"525\" src=\"https:\/\/blog-dev.sololearn.com\/wp-content\/uploads\/2022\/11\/Screen-Shot-2022-11-16-at-22.30.17-1024x525.png\" alt=\"\" class=\"wp-image-1588\" srcset=\"https:\/\/www.sololearn.com\/wp-content\/uploads\/2022\/11\/Screen-Shot-2022-11-16-at-22.30.17-1024x525.png 1024w, https:\/\/www.sololearn.com\/wp-content\/uploads\/2022\/11\/Screen-Shot-2022-11-16-at-22.30.17-300x154.png 300w, https:\/\/www.sololearn.com\/wp-content\/uploads\/2022\/11\/Screen-Shot-2022-11-16-at-22.30.17-768x394.png 768w, https:\/\/www.sololearn.com\/wp-content\/uploads\/2022\/11\/Screen-Shot-2022-11-16-at-22.30.17.png 1240w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" \/><\/figure>\n\n\n\n<p>**N.B**: I didn\u2019t have to import the CSS file because any style you put in the index.css file in React is available to your components. You must import the style file if you have a particular style file for a component. Otherwise, it won\u2019t work.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\"><strong>Add Inline CSS to Components&nbsp;<\/strong><\/h2>\n\n\n\n<p>Remember you can always use inline styles in your HTML. The same thing applies to JSX, but the process differs. It follows the <a href=\"https:\/\/www.sololearn.com\/blog\/10-basics-of-javascript\/\" data-type=\"post\" data-id=\"2000\">JavaScript object\u2019s syntax.<\/a><\/p>\n\n\n\n<p>To pass inline styles to your JSX, here are the processes you need to follow:<\/p>\n\n\n\n<ul>\n<li>you need to bring in the `style` attribute first<\/li>\n<\/ul>\n\n\n\n<ul>\n<li>after that, you have to put the properties and values in an object right inside the style attribute. This means you have to use double curly braces.<\/li>\n<\/ul>\n\n\n\n<ul>\n<li>the values you pass to the properties must be string values even if they are numbers&nbsp;<\/li>\n<\/ul>\n\n\n\n<ul>\n<li>if you have many properties you want to apply, you have to separate them with commas<\/li>\n<\/ul>\n\n\n\n<ul>\n<li>if you\u2019re using properties that have more than one word, you have to write them in camel case. So, &#8220;background-color&#8221; becomes &#8220;backgroundColor&#8221;.<\/li>\n<\/ul>\n\n\n\n<p>In the simple web page, we are styling, I\u2019m going to reduce the width and height of the Sololearn logo with inline styles:<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">&lt;img src={Logo} alt='Sololearn logo' style={{ width: \"180px\", height: \"180px\" }} \/>\n<\/pre>\n\n\n\n<p>The Sololearn logo is now smaller:<\/p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img decoding=\"async\" loading=\"lazy\" width=\"1024\" height=\"518\" src=\"https:\/\/blog-dev.sololearn.com\/wp-content\/uploads\/2022\/11\/Screen-Shot-2022-11-16-at-22.33.28-1024x518.png\" alt=\"\" class=\"wp-image-1590\" srcset=\"https:\/\/www.sololearn.com\/wp-content\/uploads\/2022\/11\/Screen-Shot-2022-11-16-at-22.33.28-1024x518.png 1024w, https:\/\/www.sololearn.com\/wp-content\/uploads\/2022\/11\/Screen-Shot-2022-11-16-at-22.33.28-300x152.png 300w, https:\/\/www.sololearn.com\/wp-content\/uploads\/2022\/11\/Screen-Shot-2022-11-16-at-22.33.28-768x388.png 768w, https:\/\/www.sololearn.com\/wp-content\/uploads\/2022\/11\/Screen-Shot-2022-11-16-at-22.33.28.png 1226w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" \/><\/figure>\n\n\n\n<h2 class=\"wp-block-heading\"><strong>Use JS Objects to Style&nbsp;<\/strong><\/h2>\n\n\n\n<p>You can use the native JavaScript object for adding styles to your React components. To do this, you need to write the object outside of your JSX and pass it in as an inline style in a style attribute. With this approach, you don\u2019t need to use double curly braces. That\u2019s because the curly braces of the object is already one.<\/p>\n\n\n\n<p>To show you how to use objects to style your React components, I\u2019m going to style both the h1 and h2 texts of our simple web page with objects.<\/p>\n\n\n\n<p>These are the objects I wrote:<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">const headingOneStyles = {\n    margin: \"10px\",\n    backgroundColor: \"#EA589F\",\n    borderRadius: \"4px\",\n    padding: \"4px\",\n};\n \n  const headingTwoStyles = {\n    margin: \"7px\",\n    backgroundColor: \"#34C1F6\",\n    borderRadius: \"4px\",\n    padding: \"4px\",\n};<\/pre>\n\n\n\n<p>This is how I passed the objects into the h1 and h2 texts:<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">&lt;h1 style={headingOneStyles}>Welcome to Sololearn&lt;\/h1>\n&lt;h2 style={headingTwoStyles}>The best platform for coding beginners&lt;\/h2><\/pre>\n\n\n\n<p>And this is how they look in the browser:<\/p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img decoding=\"async\" loading=\"lazy\" width=\"1024\" height=\"505\" src=\"https:\/\/blog-dev.sololearn.com\/wp-content\/uploads\/2022\/11\/Screen-Shot-2022-11-16-at-22.36.03-1024x505.png\" alt=\"\" class=\"wp-image-1591\" srcset=\"https:\/\/www.sololearn.com\/wp-content\/uploads\/2022\/11\/Screen-Shot-2022-11-16-at-22.36.03-1024x505.png 1024w, https:\/\/www.sololearn.com\/wp-content\/uploads\/2022\/11\/Screen-Shot-2022-11-16-at-22.36.03-300x148.png 300w, https:\/\/www.sololearn.com\/wp-content\/uploads\/2022\/11\/Screen-Shot-2022-11-16-at-22.36.03-768x379.png 768w, https:\/\/www.sololearn.com\/wp-content\/uploads\/2022\/11\/Screen-Shot-2022-11-16-at-22.36.03.png 1232w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" \/><\/figure>\n\n\n\n<h2 class=\"wp-block-heading\"><strong>CSS Modules<\/strong><\/h2>\n\n\n\n<p>CSS modules is one of the coolest ways to style a React application. With CSS modules, you get to write your styles as CSS and consume them as JavaScript objects in your JSX.<\/p>\n\n\n\n<p>To use CSS modules, here are some rules you need to follow:<\/p>\n\n\n\n<ul>\n<li>you need to create a CSS file with the extension `.module.css`. So, the name follows the syntax `cssfilename.module.css`<\/li>\n\n\n\n<li>write your CSS properties and values as classes<\/li>\n\n\n\n<li>import the CSS module file<\/li>\n\n\n\n<li>consume the styles inside the styles as an object inside a &#8220;className&#8221;<\/li>\n<\/ul>\n\n\n\n<p>To show you how CSS modules work in practice, I\u2019m going to style the paragraph and the button on the web page we\u2019ve been using as an example. As you can see below, the paragraphs and button don\u2019t look good enough:<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img decoding=\"async\" src=\"https:\/\/lh5.googleusercontent.com\/NkIyYAyeMcJN1XIU8xBZQDnC50QJRTIeqnc2V2jQ7rLUzFFzZN3k3IlwWL6e4fhW_65x1KfcP9xOiVD0vEIeLYwy2VttAraxwzlVGMa9PF5cIUlAm5ZfxHvpP5CxHDCBE-6aHE_MFYrksx_PUmyRN3uwAp3ZvzY50AC_g16UAqJuiZl0inVSAbZQqvEK_g\" alt=\"\"\/><\/figure>\n\n\n\n<p>So, I\u2019ll create a file named styles.module.css and put the styles in it:<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">\/*styles.modules.css file*\/\n\n.text {\n  padding: 5px;\n}\n\n.button {\n  text-decoration: none;\n  margin-top: 10px;\n  color: #fff;\n  background-color: #ffa310;\n  padding: 10px;\n  border-radius: 4px;\n}\n\n.button:hover {\n  background-color: #c07908;\n}<\/pre>\n\n\n\n<p>I\u2019ll import the CSS module this way:<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">import styles from \".\/styles.module.css\";<\/pre>\n\n\n\n<p>To consume the CSS modules, I\u2019ll pass it in as an object inside a `className` attribute:<\/p>\n\n\n\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"generic\" data-enlighter-theme=\"\" data-enlighter-highlight=\"\" data-enlighter-linenumbers=\"\" data-enlighter-lineoffset=\"\" data-enlighter-title=\"\" data-enlighter-group=\"\">&lt;p className={styles.text}> At Sololearn, you get to learn programming languages like JavaScript, Python, C++, Java, and many more. &lt;\/p>\n&lt;p className={styles.text}> We also have learning resources for frameworks like Angular, Django, React, and many more. &lt;\/p>\n&lt;a href='sololearn.com' className={styles.button}> Start Learning &lt;\/a><\/pre>\n\n\n\n<p>Notice that I use the exact classes I used inside the CSS module (.text and .button)<\/p>\n\n\n\n<p>Now the paragraphs and button look better:<\/p>\n\n\n\n<figure class=\"wp-block-image size-full\"><img decoding=\"async\" loading=\"lazy\" width=\"975\" height=\"483\" src=\"https:\/\/blog-dev.sololearn.com\/wp-content\/uploads\/2022\/11\/unnamed-2.png\" alt=\"\" class=\"wp-image-1592\" srcset=\"https:\/\/www.sololearn.com\/wp-content\/uploads\/2022\/11\/unnamed-2.png 975w, https:\/\/www.sololearn.com\/wp-content\/uploads\/2022\/11\/unnamed-2-300x149.png 300w, https:\/\/www.sololearn.com\/wp-content\/uploads\/2022\/11\/unnamed-2-768x380.png 768w\" sizes=\"(max-width: 975px) 100vw, 975px\" \/><\/figure>\n\n\n\n<h2 class=\"wp-block-heading\"><strong>Conclusion<\/strong><\/h2>\n\n\n\n<p>This article showed you 4 different ways you can style your React applications.<\/p>\n\n\n\n<p>We looked at:<\/p>\n\n\n\n<ul>\n<li>how you can add classes to your components by using classes (className in React)<\/li>\n\n\n\n<li>how you can add inline CSS in the syntax of a JavaScript object<\/li>\n\n\n\n<li>how to pass in native JavaScript objects as styles<\/li>\n\n\n\n<li>and how you can use CSS modules.<\/li>\n<\/ul>\n\n\n\n<p>If you want to learn more about React and how to style React components, you should check out our <a href=\"https:\/\/www.sololearn.com\/learning\/1097\">React course for beginners.<\/a><\/p>\n\n\n\n<p>Thank you for reading.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>If you want to add style to React components, your creativity is your limit. Styling in React is like styling an HTML file, but you have the chance to get a lot more dynamic.\u00a0 Apart from the conventional ways of styling such as adding classes and ids, direct styling in a CSS file, and others, <a href=\"https:\/\/www.sololearn.com\/blog\/style-react-app\/\" class=\"more-link\">&#8230;<span class=\"screen-reader-text\">  How to style your React app?<\/span><\/a><\/p>\n","protected":false},"author":3,"featured_media":2100,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[35],"tags":[40,39,38],"_links":{"self":[{"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/posts\/1587"}],"collection":[{"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/comments?post=1587"}],"version-history":[{"count":3,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/posts\/1587\/revisions"}],"predecessor-version":[{"id":2489,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/posts\/1587\/revisions\/2489"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/media\/2100"}],"wp:attachment":[{"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/media?parent=1587"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/categories?post=1587"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/www.sololearn.com\/blog\/wp-json\/wp\/v2\/tags?post=1587"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}